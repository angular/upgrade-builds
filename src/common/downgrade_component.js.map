{"version":3,"file":"downgrade_component.js","sourceRoot":"","sources":["../../../../../modules/@angular/upgrade/src/common/downgrade_component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactory, ComponentFactoryResolver, Injector, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {$COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, REQUIRE_INJECTOR, REQUIRE_NG_MODEL} from './constants';\nimport {DowngradeComponentAdapter} from './downgrade_component_adapter';\nimport {controllerKey, getComponentName} from './util';\n\nlet /** @type {?} */ downgradeCount = 0;\n/**\n * \\@whatItDoes \n * \n * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n * \n * Allows an Angular component to be used from AngularJS.\n * \n * \\@howToUse \n * \n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n * \n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n * \n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n * \n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n * \n * In this example you can see that we must provide information about the component being\n * \"downgraded\". This is because once the AoT compiler has run, all metadata about the\n * component has been removed from the code, and so cannot be inferred.\n * \n * We must do the following:\n * * specify the Angular component class that is to be downgraded\n * * specify all inputs and outputs that the AngularJS component expects\n * \n * \\@description \n * \n * A helper function that returns a factory function to be used for registering an\n * AngularJS wrapper directive for \"downgrading\" an Angular component.\n * \n * The parameter contains information about the Component that is being downgraded:\n * \n * * `component: Type<any>`: The type of the Component that will be downgraded\n * * `inputs: string[]`: A collection of strings that specify what inputs the component accepts.\n * * `outputs: string[]`: A collection of strings that specify what outputs the component emits.\n * \n * The `inputs` and `outputs` are strings that map the names of properties to camelCased\n * attribute names. They are of the form `\"prop: attr\"`; or simply `\"propAndAttr\" where the\n * property and attribute have the same identifier.\n * \n * \\@experimental\n * @param {?} info\n * @return {?}\n */\nexport function downgradeComponent(info: /* ComponentInfo */ {\n  component: Type<any>;\n  inputs?: string[];\n  outputs?: string[];\n}): any /* angular.IInjectable */ {\n  const /** @type {?} */ idPrefix = `NG2_UPGRADE_${downgradeCount++}_`;\n  let /** @type {?} */ idCount = 0;\n\n  const /** @type {?} */ directiveFactory:\n      angular.IAnnotatedFunction = function(\n                                       $compile: angular.ICompileService,\n                                       $injector: angular.IInjectorService,\n                                       $parse: angular.IParseService): angular.IDirective {\n\n    return {\n      restrict: 'E',\n      terminal: true,\n      require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n      link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n             required: any[]) => {\n        // We might have to compile the contents asynchronously, because this might have been\n        // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n        // been compiled.\n\n        const /** @type {?} */ parentInjector: Injector|ParentInjectorPromise =\n            required[0] || $injector.get(INJECTOR_KEY);\n        const /** @type {?} */ ngModel: angular.INgModelController = required[1];\n\n        const /** @type {?} */ downgradeFn = (injector: Injector) => {\n          const /** @type {?} */ componentFactoryResolver: ComponentFactoryResolver =\n              injector.get(ComponentFactoryResolver);\n          const /** @type {?} */ componentFactory: ComponentFactory<any> =\n              componentFactoryResolver.resolveComponentFactory(info.component);\n\n          if (!componentFactory) {\n            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n          }\n\n          const /** @type {?} */ id = idPrefix + (idCount++);\n          const /** @type {?} */ injectorPromise = new ParentInjectorPromise(element);\n          const /** @type {?} */ facade = new DowngradeComponentAdapter(\n              id, info, element, attrs, scope, ngModel, injector, $injector, $compile, $parse,\n              componentFactory);\n\n          const /** @type {?} */ projectableNodes = facade.compileContents();\n          facade.createComponent(projectableNodes);\n          facade.setupInputs();\n          facade.setupOutputs();\n          facade.registerCleanup();\n\n          injectorPromise.resolve(facade.getInjector());\n        };\n\n        if (parentInjector instanceof ParentInjectorPromise) {\n          parentInjector.then(downgradeFn);\n        } else {\n          downgradeFn(parentInjector);\n        }\n      }\n    };\n  };\n\n  directiveFactory.$inject = [$COMPILE, $INJECTOR, $PARSE];\n  return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nclass ParentInjectorPromise {\nprivate injector: Injector;\nprivate injectorKey: string = controllerKey(INJECTOR_KEY);\nprivate callbacks: ((injector: Injector) => any)[] = [];\n/**\n * @param {?} element\n */\nconstructor(private element: angular.IAugmentedJQuery) {\n    // Store the promise on the element.\n    element.data(this.injectorKey, this);\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nthen(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n/**\n * @param {?} injector\n * @return {?}\n */\nresolve(injector: Injector) {\n    this.injector = injector;\n\n    // Store the real injector on the element.\n    this.element.data(this.injectorKey, injector);\n\n    // Release the element to prevent memory leaks.\n    this.element = null;\n\n    // Run the queued callbacks.\n    this.callbacks.forEach(callback => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\nfunction ParentInjectorPromise_tsickle_Closure_declarations() {\n/** @type {?} */\nParentInjectorPromise.prototype.injector;\n/** @type {?} */\nParentInjectorPromise.prototype.injectorKey;\n/** @type {?} */\nParentInjectorPromise.prototype.callbacks;\n/** @type {?} */\nParentInjectorPromise.prototype.element;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
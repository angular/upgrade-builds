{"version":3,"sources":["../../../../../modules/@angular/upgrade/src/common/downgrade_component.ts"],"names":[],"mappings":"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","file":"downgrade_component.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactory, ComponentFactoryResolver, Injector, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {$COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, REQUIRE_INJECTOR, REQUIRE_NG_MODEL} from './constants';\nimport {DowngradeComponentAdapter} from './downgrade_component_adapter';\nimport {controllerKey, getComponentName} from './util';\n\nlet /** @type {?} */ downgradeCount = 0;\n/**\n * \\@whatItDoes \n * \n * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n * \n * Allows an Angular component to be used from AngularJS.\n * \n * \\@howToUse \n * \n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n * \n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n * \n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n * \n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n * \n * In this example you can see that we must provide information about the component being\n * \"downgraded\". This is because once the AoT compiler has run, all metadata about the\n * component has been removed from the code, and so cannot be inferred.\n * \n * We must do the following:\n * * specify the Angular component class that is to be downgraded\n * * specify all inputs and outputs that the AngularJS component expects\n * \n * \\@description \n * \n * A helper function that returns a factory function to be used for registering an\n * AngularJS wrapper directive for \"downgrading\" an Angular component.\n * \n * The parameter contains information about the Component that is being downgraded:\n * \n * * `component: Type<any>`: The type of the Component that will be downgraded\n * * `inputs: string[]`: A collection of strings that specify what inputs the component accepts.\n * * `outputs: string[]`: A collection of strings that specify what outputs the component emits.\n * \n * The `inputs` and `outputs` are strings that map the names of properties to camelCased\n * attribute names. They are of the form `\"prop: attr\"`; or simply `\"propAndAttr\" where the\n * property and attribute have the same identifier.\n * \n * \\@experimental\n * @param {?} info\n * @return {?}\n */\nexport function downgradeComponent(info: /* ComponentInfo */ {\n  component: Type<any>;\n  inputs?: string[];\n  outputs?: string[];\n}): any /* angular.IInjectable */ {\n  const /** @type {?} */ idPrefix = `NG2_UPGRADE_${downgradeCount++}_`;\n  let /** @type {?} */ idCount = 0;\n\n  const /** @type {?} */ directiveFactory:\n      angular.IAnnotatedFunction = function(\n                                       $compile: angular.ICompileService,\n                                       $injector: angular.IInjectorService,\n                                       $parse: angular.IParseService): angular.IDirective {\n\n    return {\n      restrict: 'E',\n      terminal: true,\n      require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n      link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n             required: any[]) => {\n        // We might have to compile the contents asynchronously, because this might have been\n        // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n        // been compiled.\n\n        const /** @type {?} */ parentInjector: Injector|ParentInjectorPromise =\n            required[0] || $injector.get(INJECTOR_KEY);\n        const /** @type {?} */ ngModel: angular.INgModelController = required[1];\n\n        const /** @type {?} */ downgradeFn = (injector: Injector) => {\n          const /** @type {?} */ componentFactoryResolver: ComponentFactoryResolver =\n              injector.get(ComponentFactoryResolver);\n          const /** @type {?} */ componentFactory: ComponentFactory<any> =\n              componentFactoryResolver.resolveComponentFactory(info.component);\n\n          if (!componentFactory) {\n            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n          }\n\n          const /** @type {?} */ id = idPrefix + (idCount++);\n          const /** @type {?} */ injectorPromise = new ParentInjectorPromise(element);\n          const /** @type {?} */ facade = new DowngradeComponentAdapter(\n              id, info, element, attrs, scope, ngModel, injector, $injector, $compile, $parse,\n              componentFactory);\n\n          const /** @type {?} */ projectableNodes = facade.compileContents();\n          facade.createComponent(projectableNodes);\n          facade.setupInputs();\n          facade.setupOutputs();\n          facade.registerCleanup();\n\n          injectorPromise.resolve(facade.getInjector());\n        };\n\n        if (parentInjector instanceof ParentInjectorPromise) {\n          parentInjector.then(downgradeFn);\n        } else {\n          downgradeFn(parentInjector);\n        }\n      }\n    };\n  };\n\n  // bracket-notation because of closure - see #14441\n  directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n  return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nclass ParentInjectorPromise {\nprivate injector: Injector;\nprivate injectorKey: string = controllerKey(INJECTOR_KEY);\nprivate callbacks: ((injector: Injector) => any)[] = [];\n/**\n * @param {?} element\n */\nconstructor(private element: angular.IAugmentedJQuery) {\n    // Store the promise on the element.\n    element.data(this.injectorKey, this);\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nthen(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n/**\n * @param {?} injector\n * @return {?}\n */\nresolve(injector: Injector) {\n    this.injector = injector;\n\n    // Store the real injector on the element.\n    this.element.data(this.injectorKey, injector);\n\n    // Release the element to prevent memory leaks.\n    this.element = null;\n\n    // Run the queued callbacks.\n    this.callbacks.forEach(callback => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\nfunction ParentInjectorPromise_tsickle_Closure_declarations() {\n/** @type {?} */\nParentInjectorPromise.prototype.injector;\n/** @type {?} */\nParentInjectorPromise.prototype.injectorKey;\n/** @type {?} */\nParentInjectorPromise.prototype.callbacks;\n/** @type {?} */\nParentInjectorPromise.prototype.element;\n}\n\n"]}
{"version":3,"sources":["../../../../../modules/@angular/upgrade/src/common/util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAIH;;;GAGG;AACH,wBAHC,CAAA;IAIC,yDAAyD;IACzD,EAAE,CAAC,CAAC,OAHC,CAAO,KAAC,CAAK,CAAC,CAAA;QAIjB,OAAO,CAHC,KAAC,CAAK,CAAC,EAAE,CAAA,CAAE,KAAC,CAAK,CAAC;IAI5B,CAAC;IAHC,IAAA,CAAK,CAAA;QAIL,sCAAsC;QACtC,OAAO,CAHC,GAAC,CAAG,CAAC,EAAE,CAAA,CAAE,KAAC,CAAK,CAAC;IAI1B,CAAC;IACD,MAHM,CAAA,CAAE;AAIV,CAAC;AACD;;;GAGG;AACH,8BANC,IAAA;IAOC,MAAM,CANC,GAAA,GAAM,IAAA,GAAO,YAAA,CAAa;AAOnC,CAAC;AACD;;;GAGG;AACH,qCATC,IAAA;IAUC,MAAM,gBAAgB,CAThB,UAAA,GAAa,IAAA,CAAK,UAAC,CAAU;IAUnC,IAAI,gBAAgB,CAThB,OAA0B,CAAE;IAUhC,EAAE,CAAC,CAAC,UATC,CAAU,CAAC,CAAA;QAUd,IAAI,gBAAgB,CAThB,OAAA,GAAU,UAAA,CAAW,MAAC,CAAM;QAUhC,OAAO,GATG,IAAI,KAAA,CAAM,OAAC,CAAO,CAAC;QAU7B,GAAG,CAAC,CAAC,IATC,gBAAA,CAAG,CAAA,GAAI,CAAA,EAAG,CAAA,GAAI,OAAA,EAAS,CAAA,EAAE,EAAG,CAAA;YAUhC,OAAO,CATC,CAAC,CAAC,GAAG,CAAA,UAAE,CAAU,CAAC,CAAC,CAAC,QAAC,EAAS,UAAA,CAAW,CAAC,CAAC,CAAC,SAAC,CAAS,CAAC;QAUjE,CAAC;IACH,CAAC;IACD,MAAM,CATC,OAAA,IAAW,EAAA,CAAG;AAUvB,CAAC;AACD;;;GAGG;AACH,iCAZC,SAAA;IAaC,iFAAiF;IACjF,MAAM,CAZC,CAAA,CAAA,SAAc,CAAA,CAAI,CAAC,cAAC,IAAiB,SAAA,CAAU,IAAC,IAAO,SAAA,CAAU,QAAC,EAAQ,CAAE,KAAC,CAAK,IAAC,CAAI,CAAC,CAAC,CAAC,CAAC;AAapG,CAAC;AACD;IAIA;QACI,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG;YAClC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAED;IACA,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;IAC3B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;IAC3B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;AAC1B,CAAC;AAED;;;;;GAKG;AACH,yBApBC,SAAA;IAqBC,MAAM,CApBC,OAAO,SAAA,CAAU,UAAC,KAAc,UAAA;QAqBnC,OApBO,SAAA,CAAU,gBAAC,KAAoB,UAAA,CAAW;AAqBvD,CAAC;AACD;;;;;;GAMG;AACH,8BAtBC,OAAA,EAAA,SAAA;IAuBC,EAAE,CAAC,CAAC,OAtBC,IAAU,eAAA,CAAgB,SAAC,CAAS,CAAC,CAAC,CAAA;QAuBzC,OAAO,CAtBC,OAAC,GAAS,QAAQ,SAAA,CAAU,UAAC,CAAU,OAAC,CAAO,UAAC,CAAU,CAAC,CAAC,CAAA,CAAE;QAuBtE,SAAS,CAtBC,gBAAC,CAAgB,OAAC,CAAO,aAAC,CAAa,IAAC,CAAI,OAAC,CAAO,CAAC,CAAC;IAuBlE,CAAC;AACH,CAAC","file":"util.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core/index';\nimport * as angular from './angular1';\n/**\n * @param {?} e\n * @return {?}\n */\nexport function onError(e: any) {\n  // TODO: (misko): We seem to not have a stack trace here!\n  if (console.error) {\n    console.error(e, e.stack);\n  } else {\n    // tslint:disable-next-line:no-console\n    console.log(e, e.stack);\n  }\n  throw e;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function controllerKey(name: string): string {\n  return '$' + name + 'Controller';\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function getAttributesAsArray(node: Node): [string, string][] {\n  const /** @type {?} */ attributes = node.attributes;\n  let /** @type {?} */ asArray: [string, string][];\n  if (attributes) {\n    let /** @type {?} */ attrLen = attributes.length;\n    asArray = new Array(attrLen);\n    for (let /** @type {?} */ i = 0; i < attrLen; i++) {\n      asArray[i] = [attributes[i].nodeName, attributes[i].nodeValue];\n    }\n  }\n  return asArray || [];\n}\n/**\n * @param {?} component\n * @return {?}\n */\nexport function getComponentName(component: Type<any>): string {\n  // Return the name of the component or the first line of its stringified version.\n  return ( /** @type {?} */((component as any))).overriddenName || component.name || component.toString().split('\\n')[0];\n}\nexport class Deferred<R> {\n  promise: Promise<R>;\n  resolve: (value?: R|PromiseLike<R>) => void;\n  reject: (error?: any) => void;\nconstructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\nfunction Deferred_tsickle_Closure_declarations() {\n/** @type {?} */\nDeferred.prototype.promise;\n/** @type {?} */\nDeferred.prototype.resolve;\n/** @type {?} */\nDeferred.prototype.reject;\n}\n\n/**\n * @param {?} component\n * @return {?} Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component: any) {\n  return typeof component.writeValue === 'function' &&\n      typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n * @param {?} ngModel\n * @param {?} component\n * @return {?}\n */\nexport function hookupNgModel(ngModel: angular.INgModelController, component: any) {\n  if (ngModel && supportsNgModel(component)) {\n    ngModel.$render = () => { component.writeValue(ngModel.$viewValue); };\n    component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n  }\n}\n"]}
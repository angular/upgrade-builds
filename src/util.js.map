{"version":3,"file":"util.js","sourceRoot":"","sources":["../../../../modules/@angular/upgrade/src/util.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAGH;;;GAGG;AACH,wBAAwB,CAAM;IAC5B,yDAAyD;IACzD,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;QAClB,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;IAC5B,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,sCAAsC;QACtC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IACD,MAAM,CAAC,CAAC;AACV,CAAC;AACD;;;GAGG;AACH,8BAA8B,IAAY;IACxC,MAAM,CAAC,GAAG,GAAG,IAAI,GAAG,YAAY,CAAC;AACnC,CAAC;AACD;;;GAGG;AACH,qCAAqC,IAAU;IAC7C,IAAM,gBAAgB,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;IACpD,IAAI,gBAAgB,CAAC,OAA2B,CAAC;IACjD,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACf,IAAI,gBAAgB,CAAC,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC;QACjD,OAAO,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;QAC7B,GAAG,CAAC,CAAC,IAAI,gBAAgB,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC;YAClD,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;QACjE,CAAC;IACH,CAAC;IACD,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;AACvB,CAAC;AACD;IAIA;QAJA,iBAUC;QALG,IAAI,CAAC,OAAO,GAAG,IAAI,OAAO,CAAC,UAAC,GAAG,EAAE,GAAG;YAClC,KAAI,CAAC,OAAO,GAAG,GAAG,CAAC;YACnB,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IACH,eAAC;AAAD,CAAC,AAVD,IAUC;AAED;IACA,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;IAC3B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC;IAC3B,gBAAgB;IAChB,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC;AAC1B,CAAC;AAED;;;;GAIG;AACH,yBAAyB,SAAc;IACrC,MAAM,CAAC,OAAO,SAAS,CAAC,UAAU,KAAK,UAAU;QAC7C,OAAO,SAAS,CAAC,gBAAgB,KAAK,UAAU,CAAC;AACvD,CAAC;AACD;;;;;;GAMG;AACH,8BAA8B,OAAmC,EAAE,SAAc;IAC/E,EAAE,CAAC,CAAC,OAAO,IAAI,eAAe,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC1C,OAAO,CAAC,OAAO,GAAG,cAAQ,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,SAAS,CAAC,gBAAgB,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;IAClE,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as angular from './angular_js';\n/**\n * @param {?} e\n * @return {?}\n */\nexport function onError(e: any) {\n  // TODO: (misko): We seem to not have a stack trace here!\n  if (console.error) {\n    console.error(e, e.stack);\n  } else {\n    // tslint:disable-next-line:no-console\n    console.log(e, e.stack);\n  }\n  throw e;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function controllerKey(name: string): string {\n  return '$' + name + 'Controller';\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function getAttributesAsArray(node: Node): [string, string][] {\n  const /** @type {?} */ attributes = node.attributes;\n  let /** @type {?} */ asArray: [string, string][];\n  if (attributes) {\n    let /** @type {?} */ attrLen = attributes.length;\n    asArray = new Array(attrLen);\n    for (let /** @type {?} */ i = 0; i < attrLen; i++) {\n      asArray[i] = [attributes[i].nodeName, attributes[i].nodeValue];\n    }\n  }\n  return asArray || [];\n}\nexport class Deferred<R> {\n  promise: Promise<R>;\n  resolve: (value?: R|PromiseLike<R>) => void;\n  reject: (error?: any) => void;\nconstructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\nfunction Deferred_tsickle_Closure_declarations() {\n/** @type {?} */\nDeferred.prototype.promise;\n/** @type {?} */\nDeferred.prototype.resolve;\n/** @type {?} */\nDeferred.prototype.reject;\n}\n\n/**\n * @param {?} component\n * @return {?} true if the passed-in component implements the subset of\n *     ControlValueAccessor needed for AngularJS ng-model compatibility.\n */\nfunction supportsNgModel(component: any) {\n  return typeof component.writeValue === 'function' &&\n      typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS ngModelController if it exists to the component if it\n * implements the needed subset of ControlValueAccessor.\n * @param {?} ngModel\n * @param {?} component\n * @return {?}\n */\nexport function hookupNgModel(ngModel: angular.INgModelController, component: any) {\n  if (ngModel && supportsNgModel(component)) {\n    ngModel.$render = () => { component.writeValue(ngModel.$viewValue); };\n    component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../../../modules/@angular/upgrade/src/dynamic/upgrade_adapter.ts"],"names":[],"mappings":"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","file":"upgrade_adapter.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DirectiveResolver} from '@angular/compiler';\nimport {Compiler, CompilerOptions, Directive, Injector, NgModule, NgModuleRef, NgZone, Provider, Testability, Type} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport * as angular from '../common/angular1';\nimport {ComponentInfo} from '../common/component_info';\nimport {$$TESTABILITY, $COMPILE, $INJECTOR, $ROOT_SCOPE, COMPILER_KEY, INJECTOR_KEY, NG_ZONE_KEY} from '../common/constants';\nimport {ContentProjectionHelper} from '../common/content_projection_helper';\nimport {downgradeComponent} from '../common/downgrade_component';\nimport {downgradeInjectable} from '../common/downgrade_injectable';\nimport {Deferred, controllerKey, onError} from '../common/util';\n\nimport {DynamicContentProjectionHelper} from './content_projection_helper';\nimport {UpgradeNg1ComponentAdapterBuilder} from './upgrade_ng1_adapter';\n\nlet /** @type {?} */ upgradeCount: number = 0;\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n * \n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n * \n * ## Mental Model\n * \n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n * \n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n * \n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n * \n * \n * \\@Component({ \n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * \n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n * \n * ```\n * \n * \\@stable\n */\nexport class UpgradeAdapter {\nprivate idPrefix: string = `NG2_UPGRADE_${upgradeCount++}_`;\nprivate directiveResolver: DirectiveResolver = new DirectiveResolver();\nprivate downgradedComponents: Type<any>[] = [];\nprivate ng1ComponentsToBeUpgraded: {[name: string]: UpgradeNg1ComponentAdapterBuilder} = {};\nprivate upgradedProviders: Provider[] = [];\nprivate ngZone: NgZone;\nprivate ng1Module: angular.IModule;\nprivate moduleRef: NgModuleRef<any> = null;\nprivate ng2BootstrapDeferred: Deferred<angular.IInjectorService>;\n/**\n * @param {?} ng2AppModule\n * @param {?=} compilerOptions\n */\nconstructor(private ng2AppModule: Type<any>,\nprivate compilerOptions?: CompilerOptions) {\n    if (!ng2AppModule) {\n      throw new Error(\n          'UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n    }\n  }\n/**\n * Allows Angular Component to be used from AngularJS.\n * \n * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n * Angular Component. The adapter will bootstrap Angular component from within the\n * AngularJS template.\n * \n * ## Mental Model\n * \n * 1. The component is instantiated by being listed in AngularJS template. This means that the\n *    host element is controlled by AngularJS, but the component's view will be controlled by\n *    Angular.\n * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n *    syntax. This has to be done, this way because we must follow Angular components do not\n *    declare how the attributes should be interpreted.\n * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n *    by way of the `ControlValueAccessor` interface from \\@angular/forms. Only components that\n *    implement this interface are eligible.\n * \n * ## Supported Features\n * \n * - Bindings:\n *   - Attribute: `<comp name=\"World\">`\n *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n *   - Expression:  `<comp [name]=\"username\">`\n *   - Event:  `<comp (close)=\"doSomething()\">`\n *   - ng-model: `<comp ng-model=\"name\">`\n * - Content projection: yes\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n * const module = angular.module('myExample', []);\n * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n * \n * \\@Component({ \n *   selector: 'greet',\n *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n * })\n * class Greeter {\n *   \\@Input() salutation: string;\n *   \\@Input() name: string;\n * }\n * \n * \\@NgModule({ \n *   declarations: [Greeter],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML =\n *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n * });\n * ```\n * @param {?} component\n * @return {?}\n */\ndowngradeNg2Component(component: Type<any>): Function {\n    this.downgradedComponents.push(component);\n\n    const /** @type {?} */ metadata: Directive = this.directiveResolver.resolve(component);\n    const /** @type {?} */ info: ComponentInfo = {component, inputs: metadata.inputs, outputs: metadata.outputs};\n\n    return downgradeComponent(info);\n  }\n/**\n * Allows AngularJS Component to be used from Angular.\n * \n * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n * directive. The adapter will bootstrap AngularJS component from within the Angular\n * template.\n * \n * ## Mental Model\n * \n * 1. The component is instantiated by being listed in Angular template. This means that the\n *    host element is controlled by Angular, but the component's view will be controlled by\n *    AngularJS.\n * \n * ## Supported Features\n * \n * - Bindings:\n *   - Attribute: `<comp name=\"World\">`\n *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n *   - Expression:  `<comp [name]=\"username\">`\n *   - Event:  `<comp (close)=\"doSomething()\">`\n * - Transclusion: yes\n * - Only some of the features of\n *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n *   supported:\n *   - `compile`: not supported because the host element is owned by Angular, which does\n *     not allow modifying DOM structure during compilation.\n *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n *   - `controllerAs`: supported.\n *   - `bindToController`: supported.\n *   - `link`: supported. (NOTE: only pre-link function is supported.)\n *   - `name`: supported.\n *   - `priority`: ignored.\n *   - `replace`: not supported.\n *   - `require`: supported.\n *   - `restrict`: must be set to 'E'.\n *   - `scope`: supported.\n *   - `template`: supported.\n *   - `templateUrl`: supported.\n *   - `terminal`: ignored.\n *   - `transclude`: supported.\n * \n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n * const module = angular.module('myExample', []);\n * \n * module.directive('greet', function() {\n *   return {\n *     scope: {salutation: '=', name: '=' },\n *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n *   };\n * });\n * \n * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n * \n * \\@Component({ \n *   selector: 'ng2',\n *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n * })\n * class Ng2Component {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML = '<ng2></ng2>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n * });\n * ```\n * @param {?} name\n * @return {?}\n */\nupgradeNg1Component(name: string): Type<any> {\n    if (( /** @type {?} */((<any>this.ng1ComponentsToBeUpgraded))).hasOwnProperty(name)) {\n      return this.ng1ComponentsToBeUpgraded[name].type;\n    } else {\n      return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n          .type;\n    }\n  }\n/**\n * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n * Use this instead of `angular.mock.module()` to load the upgrade module into\n * the AngularJS testing injector.\n * \n * ### Example\n * \n * ```\n * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n * \n * // configure the adapter with upgrade/downgrade components and services\n * upgradeAdapter.downgradeNg2Component(MyComponent);\n * \n * let upgradeAdapterRef: UpgradeAdapterRef;\n * let $compile, $rootScope;\n * \n * // We must register the adapter before any calls to `inject()`\n * beforeEach(() => {\n *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n * });\n * \n * beforeEach(inject((_$compile_, _$rootScope_) => {\n *   $compile = _$compile_;\n *   $rootScope = _$rootScope_;\n * }));\n * \n * it(\"says hello\", (done) => {\n *   upgradeAdapterRef.ready(() => {\n *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n *     $rootScope.$apply();\n *     expect(element.html()).toContain(\"Hello World\");\n *     done();\n *   })\n * });\n * \n * ```\n * \n * @param {?=} modules any AngularJS modules that the upgrade module should depend upon\n * @return {?} an {\\@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n * run assertions once the Angular components are ready to test through AngularJS.\n */\nregisterForNg1Tests(modules?: string[]): UpgradeAdapterRef {\n    const /** @type {?} */ windowNgMock = ( /** @type {?} */((window as any)))['angular'].mock;\n    if (!windowNgMock || !windowNgMock.module) {\n      throw new Error('Failed to find \\'angular.mock.module\\'.');\n    }\n    this.declareNg1Module(modules);\n    windowNgMock.module(this.ng1Module.name);\n    const /** @type {?} */ upgrade = new UpgradeAdapterRef();\n    this.ng2BootstrapDeferred.promise.then(\n        (ng1Injector) => { ( /** @type {?} */((<any>upgrade)))._bootstrapDone(this.moduleRef, ng1Injector); }, onError);\n    return upgrade;\n  }\n/**\n * Bootstrap a hybrid AngularJS / Angular application.\n * \n * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n * AngularJS, this bootstrap is asynchronous.\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(MyNg2Module);\n * const module = angular.module('myExample', []);\n * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n * \n * module.directive('ng1', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n * \n * \n * \\@Component({ \n *   selector: 'ng2',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n * })\n * class Ng2 {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n * ```\n * @param {?} element\n * @param {?=} modules\n * @param {?=} config\n * @return {?}\n */\nbootstrap(element: Element, modules?: any[], config?: angular.IAngularBootstrapConfig):\n      UpgradeAdapterRef {\n    this.declareNg1Module(modules);\n\n    const /** @type {?} */ upgrade = new UpgradeAdapterRef();\n\n    // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n    const /** @type {?} */ windowAngular = ( /** @type {?} */((window as any)) /** TODO #???? */)['angular'];\n    windowAngular.resumeBootstrap = undefined;\n\n    this.ngZone.run(() => { angular.bootstrap(element, [this.ng1Module.name], config); });\n    const /** @type {?} */ ng1BootstrapPromise = new Promise((resolve) => {\n      if (windowAngular.resumeBootstrap) {\n        const /** @type {?} */ originalResumeBootstrap: () => void = windowAngular.resumeBootstrap;\n        windowAngular.resumeBootstrap = function() {\n          windowAngular.resumeBootstrap = originalResumeBootstrap;\n          windowAngular.resumeBootstrap.apply(this, arguments);\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n    });\n\n    Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(([ng1Injector]) => {\n      angular.element(element).data(controllerKey(INJECTOR_KEY), this.moduleRef.injector);\n      this.moduleRef.injector.get(NgZone).run(\n          () => { ( /** @type {?} */((<any>upgrade)))._bootstrapDone(this.moduleRef, ng1Injector); });\n    }, onError);\n    return upgrade;\n  }\n/**\n * Allows AngularJS service to be accessible from Angular.\n * \n * \n * ### Example\n * \n * ```\n * class Login { ... }\n * class Server { ... }\n * \n * \\@Injectable() \n * class Example {\n *   constructor(\\@Inject('server') server, login: Login) {\n *     ...\n *   }\n * }\n * \n * const module = angular.module('myExample', []);\n * module.service('server', Server);\n * module.service('login', Login);\n * \n * const adapter = new UpgradeAdapter(MyNg2Module);\n * adapter.upgradeNg1Provider('server');\n * adapter.upgradeNg1Provider('login', {asToken: Login});\n * \n * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n *   const example: Example = ref.ng2Injector.get(Example);\n * });\n * \n * ```\n * @param {?} name\n * @param {?=} options\n * @return {?}\n */\nupgradeNg1Provider(name: string, options?: {asToken: any}) {\n    const /** @type {?} */ token = options && options.asToken || name;\n    this.upgradedProviders.push({\n      provide: token,\n      useFactory: ($injector: angular.IInjectorService) => $injector.get(name),\n      deps: [$INJECTOR]\n    });\n  }\n/**\n * Allows Angular service to be accessible from AngularJS.\n * \n * \n * ### Example\n * \n * ```\n * class Example {\n * }\n * \n * const adapter = new UpgradeAdapter(MyNg2Module);\n * \n * const module = angular.module('myExample', []);\n * module.factory('example', adapter.downgradeNg2Provider(Example));\n * \n * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n *   const example: Example = ref.ng1Injector.get('example');\n * });\n * \n * ```\n * @param {?} token\n * @return {?}\n */\ndowngradeNg2Provider(token: any): Function { return downgradeInjectable(token); }\n/**\n * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n * hybrid application.\n * \n * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n * \n * @param {?=} modules The AngularJS modules that this upgrade module should depend upon.\n * @return {?} The AngularJS upgrade module that is declared by this method\n * \n * ### Example\n * \n * ```\n * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n * upgradeAdapter.declareNg1Module(['heroApp']);\n * ```\n */\nprivate declareNg1Module(modules: string[] = []): angular.IModule {\n    const /** @type {?} */ delayApplyExps: Function[] = [];\n    let /** @type {?} */ original$applyFn: Function;\n    let /** @type {?} */ rootScopePrototype: any;\n    let /** @type {?} */ rootScope: angular.IRootScopeService;\n    const /** @type {?} */ upgradeAdapter = this;\n    const /** @type {?} */ ng1Module = this.ng1Module = angular.module(this.idPrefix, modules);\n    const /** @type {?} */ platformRef = platformBrowserDynamic();\n\n    this.ngZone = new NgZone({enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec')});\n    this.ng2BootstrapDeferred = new Deferred();\n    ng1Module.factory(INJECTOR_KEY, () => this.moduleRef.injector.get(Injector))\n        .constant(NG_ZONE_KEY, this.ngZone)\n        .factory(COMPILER_KEY, () => this.moduleRef.injector.get(Compiler))\n        .config([\n          '$provide', '$injector',\n          (provide: angular.IProvideService, ng1Injector: angular.IInjectorService) => {\n            provide.decorator($ROOT_SCOPE, [\n              '$delegate',\n              function(rootScopeDelegate: angular.IRootScopeService) {\n                // Capture the root apply so that we can delay first call to $apply until we\n                // bootstrap Angular and then we replay and restore the $apply.\n                rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                if (rootScopePrototype.hasOwnProperty('$apply')) {\n                  original$applyFn = rootScopePrototype.$apply;\n                  rootScopePrototype.$apply = (exp: any) => delayApplyExps.push(exp);\n                } else {\n                  throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                }\n                return rootScope = rootScopeDelegate;\n              }\n            ]);\n            if (ng1Injector.has($$TESTABILITY)) {\n              provide.decorator($$TESTABILITY, [\n                '$delegate',\n                function(testabilityDelegate: angular.ITestabilityService) {\n                  const /** @type {?} */ originalWhenStable: Function = testabilityDelegate.whenStable;\n                  // Cannot use arrow function below because we need the context\n                  const /** @type {?} */ newWhenStable = function(callback: Function) {\n                    originalWhenStable.call(this, function() {\n                      const /** @type {?} */ ng2Testability: Testability =\n                          upgradeAdapter.moduleRef.injector.get(Testability);\n                      if (ng2Testability.isStable()) {\n                        callback.apply(this, arguments);\n                      } else {\n                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                      }\n                    });\n                  };\n\n                  testabilityDelegate.whenStable = newWhenStable;\n                  return testabilityDelegate;\n                }\n              ]);\n            }\n          }\n        ]);\n\n    ng1Module.run([\n      '$injector', '$rootScope',\n      (ng1Injector: angular.IInjectorService, rootScope: angular.IRootScopeService) => {\n        UpgradeNg1ComponentAdapterBuilder.resolve(this.ng1ComponentsToBeUpgraded, ng1Injector)\n            .then(() => {\n              // At this point we have ng1 injector and we have lifted ng1 components into ng2, we\n              // now can bootstrap ng2.\n              const /** @type {?} */ DynamicNgUpgradeModule =\n                  NgModule({\n                    providers: [\n                      {provide: $INJECTOR, useFactory: () => ng1Injector},\n                      {provide: $COMPILE, useFactory: () => ng1Injector.get($COMPILE)},\n                      {provide: ContentProjectionHelper, useClass: DynamicContentProjectionHelper},\n                      this.upgradedProviders\n                    ],\n                    imports: [this.ng2AppModule],\n                    entryComponents: this.downgradedComponents\n                  }).Class({\n                    constructor: function DynamicNgUpgradeModule() {},\n                    ngDoBootstrap: function() {}\n                  });\n              ( /** @type {?} */((platformRef as any)))\n                  ._bootstrapModuleWithZone(\n                      DynamicNgUpgradeModule, this.compilerOptions, this.ngZone)\n                  .then((ref: NgModuleRef<any>) => {\n                    this.moduleRef = ref;\n                    this.ngZone.run(() => {\n                      if (rootScopePrototype) {\n                        rootScopePrototype.$apply = original$applyFn;  // restore original $apply\n                        while (delayApplyExps.length) {\n                          rootScope.$apply(delayApplyExps.shift());\n                        }\n                        rootScopePrototype = null;\n                      }\n                    });\n                  })\n                  .then(() => this.ng2BootstrapDeferred.resolve(ng1Injector), onError)\n                  .then(() => {\n                    let /** @type {?} */ subscription =\n                        this.ngZone.onMicrotaskEmpty.subscribe({next: () => rootScope.$digest()});\n                    rootScope.$on('$destroy', () => { subscription.unsubscribe(); });\n                  });\n            })\n            .catch((e) => this.ng2BootstrapDeferred.reject(e));\n      }\n    ]);\n\n    return ng1Module;\n  }\n}\n\nfunction UpgradeAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeAdapter.prototype.idPrefix;\n/** @type {?} */\nUpgradeAdapter.prototype.directiveResolver;\n/** @type {?} */\nUpgradeAdapter.prototype.downgradedComponents;\n/**\n * An internal map of ng1 components which need to up upgraded to ng2.\n * \n * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n * \n * \\@internal\n * @type {?}\n */\nUpgradeAdapter.prototype.ng1ComponentsToBeUpgraded;\n/** @type {?} */\nUpgradeAdapter.prototype.upgradedProviders;\n/** @type {?} */\nUpgradeAdapter.prototype.ngZone;\n/** @type {?} */\nUpgradeAdapter.prototype.ng1Module;\n/** @type {?} */\nUpgradeAdapter.prototype.moduleRef;\n/** @type {?} */\nUpgradeAdapter.prototype.ng2BootstrapDeferred;\n/** @type {?} */\nUpgradeAdapter.prototype.ng2AppModule;\n/** @type {?} */\nUpgradeAdapter.prototype.compilerOptions;\n}\n\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's $compile.\n */\nclass ParentInjectorPromise {\nprivate injector: Injector;\nprivate callbacks: ((injector: Injector) => any)[] = [];\n/**\n * @param {?} element\n */\nconstructor(private element: angular.IAugmentedJQuery) {\n    // store the promise on the element\n    element.data(controllerKey(INJECTOR_KEY), this);\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nthen(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n/**\n * @param {?} injector\n * @return {?}\n */\nresolve(injector: Injector) {\n    this.injector = injector;\n\n    // reset the element data to point to the real injector\n    this.element.data(controllerKey(INJECTOR_KEY), injector);\n\n    // clean out the element to prevent memory leaks\n    this.element = null;\n\n    // run all the queued callbacks\n    this.callbacks.forEach((callback) => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\nfunction ParentInjectorPromise_tsickle_Closure_declarations() {\n/** @type {?} */\nParentInjectorPromise.prototype.injector;\n/** @type {?} */\nParentInjectorPromise.prototype.callbacks;\n/** @type {?} */\nParentInjectorPromise.prototype.element;\n}\n\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n * \n * \\@stable\n */\nexport class UpgradeAdapterRef {\nprivate _readyFn: (upgradeAdapterRef?: UpgradeAdapterRef) => void = null;\npublic ng1RootScope: angular.IRootScopeService = null;\npublic ng1Injector: angular.IInjectorService = null;\npublic ng2ModuleRef: NgModuleRef<any> = null;\npublic ng2Injector: Injector = null;\n/**\n * @param {?} ngModuleRef\n * @param {?} ng1Injector\n * @return {?}\n */\nprivate _bootstrapDone(ngModuleRef: NgModuleRef<any>, ng1Injector: angular.IInjectorService) {\n    this.ng2ModuleRef = ngModuleRef;\n    this.ng2Injector = ngModuleRef.injector;\n    this.ng1Injector = ng1Injector;\n    this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n    this._readyFn && this._readyFn(this);\n  }\n/**\n * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n * application has been bootstrapped.\n * \n * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n * require a call to `$apply()`.\n * @param {?} fn\n * @return {?}\n */\npublic ready(fn: (upgradeAdapterRef?: UpgradeAdapterRef) => void) { this._readyFn = fn; }\n/**\n * Dispose of running hybrid AngularJS / Angular application.\n * @return {?}\n */\npublic dispose() {\n    this.ng1Injector.get($ROOT_SCOPE).$destroy();\n    this.ng2ModuleRef.destroy();\n  }\n}\n\nfunction UpgradeAdapterRef_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeAdapterRef.prototype._readyFn;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng1RootScope;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng1Injector;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng2ModuleRef;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng2Injector;\n}\n\n"]}
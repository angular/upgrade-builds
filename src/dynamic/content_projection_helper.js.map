{"version":3,"file":"content_projection_helper.js","sourceRoot":"","sources":["../../../../../modules/@angular/upgrade/src/dynamic/content_projection_helper.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CssSelector, SelectorMatcher, createElementCssSelector} from '@angular/compiler/index';\nimport {Compiler, Type} from '@angular/core/index';\n\nimport * as angular from '../common/angular1';\nimport {COMPILER_KEY} from '../common/constants';\nimport {ContentProjectionHelper} from '../common/content_projection_helper';\nimport {getAttributesAsArray, getComponentName} from '../common/util';\nexport class DynamicContentProjectionHelper extends ContentProjectionHelper {\n/**\n * @param {?} $injector\n * @param {?} component\n * @param {?} nodes\n * @return {?}\n */\ngroupProjectableNodes($injector: angular.IInjectorService, component: Type<any>, nodes: Node[]):\n      Node[][] {\n    const /** @type {?} */ ng2Compiler = /** @type {?} */(( $injector.get(COMPILER_KEY) as Compiler));\n    const /** @type {?} */ ngContentSelectors = ng2Compiler.getNgContentSelectors(component);\n\n    if (!ngContentSelectors) {\n      throw new Error('Expecting ngContentSelectors for: ' + getComponentName(component));\n    }\n\n    return this.groupNodesBySelector(ngContentSelectors, nodes);\n  }\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n * @param {?} ngContentSelectors\n * @param {?} nodes\n * @return {?}\n */\ngroupNodesBySelector(ngContentSelectors: string[], nodes: Node[]): Node[][] {\n    const /** @type {?} */ projectableNodes: Node[][] = [];\n    let /** @type {?} */ matcher = new SelectorMatcher();\n    let /** @type {?} */ wildcardNgContentIndex: number;\n\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ii = ngContentSelectors.length; i < ii; ++i) {\n      projectableNodes[i] = [];\n\n      const /** @type {?} */ selector = ngContentSelectors[i];\n      if (selector === '*') {\n        wildcardNgContentIndex = i;\n      } else {\n        matcher.addSelectables(CssSelector.parse(selector), i);\n      }\n    }\n\n    for (let /** @type {?} */ j = 0, /** @type {?} */ jj = nodes.length; j < jj; ++j) {\n      const /** @type {?} */ ngContentIndices: number[] = [];\n      const /** @type {?} */ node = nodes[j];\n      const /** @type {?} */ selector =\n          createElementCssSelector(node.nodeName.toLowerCase(), getAttributesAsArray(node));\n\n      matcher.match(selector, (_, index) => ngContentIndices.push(index));\n      ngContentIndices.sort();\n\n      if (wildcardNgContentIndex !== undefined) {\n        ngContentIndices.push(wildcardNgContentIndex);\n      }\n\n      if (ngContentIndices.length) {\n        projectableNodes[ngContentIndices[0]].push(node);\n      }\n    }\n\n    return projectableNodes;\n  }\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}
{"version":3,"sources":["../../../../../modules/@angular/upgrade/src/dynamic/content_projection_helper.ts"],"names":[],"mappings":"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","file":"content_projection_helper.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CssSelector, SelectorMatcher, createElementCssSelector} from '@angular/compiler/index';\nimport {Compiler, Type} from '@angular/core/index';\n\nimport * as angular from '../common/angular1';\nimport {COMPILER_KEY} from '../common/constants';\nimport {ContentProjectionHelper} from '../common/content_projection_helper';\nimport {getAttributesAsArray, getComponentName} from '../common/util';\nexport class DynamicContentProjectionHelper extends ContentProjectionHelper {\n/**\n * @param {?} $injector\n * @param {?} component\n * @param {?} nodes\n * @return {?}\n */\ngroupProjectableNodes($injector: angular.IInjectorService, component: Type<any>, nodes: Node[]):\n      Node[][] {\n    const /** @type {?} */ ng2Compiler = /** @type {?} */(( $injector.get(COMPILER_KEY) as Compiler));\n    const /** @type {?} */ ngContentSelectors = ng2Compiler.getNgContentSelectors(component);\n\n    if (!ngContentSelectors) {\n      throw new Error('Expecting ngContentSelectors for: ' + getComponentName(component));\n    }\n\n    return this.groupNodesBySelector(ngContentSelectors, nodes);\n  }\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n * @param {?} ngContentSelectors\n * @param {?} nodes\n * @return {?}\n */\ngroupNodesBySelector(ngContentSelectors: string[], nodes: Node[]): Node[][] {\n    const /** @type {?} */ projectableNodes: Node[][] = [];\n    let /** @type {?} */ matcher = new SelectorMatcher();\n    let /** @type {?} */ wildcardNgContentIndex: number;\n\n    for (let /** @type {?} */ i = 0, /** @type {?} */ ii = ngContentSelectors.length; i < ii; ++i) {\n      projectableNodes[i] = [];\n\n      const /** @type {?} */ selector = ngContentSelectors[i];\n      if (selector === '*') {\n        wildcardNgContentIndex = i;\n      } else {\n        matcher.addSelectables(CssSelector.parse(selector), i);\n      }\n    }\n\n    for (let /** @type {?} */ j = 0, /** @type {?} */ jj = nodes.length; j < jj; ++j) {\n      const /** @type {?} */ ngContentIndices: number[] = [];\n      const /** @type {?} */ node = nodes[j];\n      const /** @type {?} */ selector =\n          createElementCssSelector(node.nodeName.toLowerCase(), getAttributesAsArray(node));\n\n      matcher.match(selector, (_, index) => ngContentIndices.push(index));\n      ngContentIndices.sort();\n\n      if (wildcardNgContentIndex !== undefined) {\n        ngContentIndices.push(wildcardNgContentIndex);\n      }\n\n      if (ngContentIndices.length) {\n        projectableNodes[ngContentIndices[0]].push(node);\n      }\n    }\n\n    return projectableNodes;\n  }\n}\n"]}
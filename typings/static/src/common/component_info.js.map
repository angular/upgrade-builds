{"version":3,"sources":["../../../../../../modules/@angular/upgrade/src/common/component_info.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAUH;;;;;GAKG;AACH;IAUE,yBAAmB,OAAe;QAAf,YAAO,GAAP,OAAO,CAAQ;QAAI,IAAI,CAAC,YAAY,EAAE,CAAC;IAAC,CAAC;IAEpD,sCAAY,GAApB;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACtC,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAC5B,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,MAAI,IAAI,CAAC,IAAI,MAAG,CAAC;QACpC,IAAI,CAAC,SAAS,GAAG,MAAI,IAAI,CAAC,IAAI,MAAG,CAAC;QAClC,IAAI,CAAC,gBAAgB,GAAG,OAAK,IAAI,CAAC,IAAI,OAAI,CAAC;QAC3C,IAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAC5E,IAAI,CAAC,MAAM,GAAG,OAAK,WAAa,CAAC;QACjC,IAAI,CAAC,QAAQ,GAAG,SAAO,WAAa,CAAC;QACrC,IAAI,CAAC,UAAU,GAAG,WAAS,WAAa,CAAC;IAC3C,CAAC;IACH,sBAAC;AAAD,CAxBA,AAwBC,IAAA","file":"component_info.js","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\n\nexport interface ComponentInfo {\n  component: Type<any>;\n  inputs?: string[];\n  outputs?: string[];\n}\n\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nexport class PropertyBinding {\n  prop: string;\n  attr: string;\n  bracketAttr: string;\n  bracketParenAttr: string;\n  parenAttr: string;\n  onAttr: string;\n  bindAttr: string;\n  bindonAttr: string;\n\n  constructor(public binding: string) { this.parseBinding(); }\n\n  private parseBinding() {\n    const parts = this.binding.split(':');\n    this.prop = parts[0].trim();\n    this.attr = (parts[1] || this.prop).trim();\n    this.bracketAttr = `[${this.attr}]`;\n    this.parenAttr = `(${this.attr})`;\n    this.bracketParenAttr = `[(${this.attr})]`;\n    const capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n    this.onAttr = `on${capitalAttr}`;\n    this.bindAttr = `bind${capitalAttr}`;\n    this.bindonAttr = `bindon${capitalAttr}`;\n  }\n}\n"]}
{"version":3,"file":"upgrade.js","sources":["../src/common/version.ts","../src/common/angular1.ts","../src/common/constants.ts","../src/common/component_info.ts","../src/common/util.ts","../src/common/downgrade_component_adapter.ts","../src/common/downgrade_component.ts","../src/common/downgrade_injectable.ts","../src/common/upgrade_helper.ts","../src/dynamic/upgrade_ng1_adapter.ts","../src/dynamic/upgrade_adapter.ts","../upgrade.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n\nexport const VERSION = new Version('6.1.9');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type Ng1Token = string;\n\nexport type Ng1Expression = string | Function;\n\nexport interface IAnnotatedFunction extends Function { $inject?: ReadonlyArray<Ng1Token>; }\n\nexport type IInjectable = (Ng1Token | Function)[] | IAnnotatedFunction;\n\nexport type SingleOrListOrMap<T> = T | T[] | {[key: string]: T};\n\nexport interface IModule {\n  name: string;\n  requires: (string|IInjectable)[];\n  config(fn: IInjectable): IModule;\n  directive(selector: string, factory: IInjectable): IModule;\n  component(selector: string, component: IComponent): IModule;\n  controller(name: string, type: IInjectable): IModule;\n  factory(key: Ng1Token, factoryFn: IInjectable): IModule;\n  value(key: Ng1Token, value: any): IModule;\n  constant(token: Ng1Token, value: any): IModule;\n  run(a: IInjectable): IModule;\n}\nexport interface ICompileService {\n  (element: Element|NodeList|Node[]|string, transclude?: Function): ILinkFn;\n}\nexport interface ILinkFn {\n  (scope: IScope, cloneAttachFn?: ICloneAttachFunction, options?: ILinkFnOptions): IAugmentedJQuery;\n  $$slots?: {[slotName: string]: ILinkFn};\n}\nexport interface ILinkFnOptions {\n  parentBoundTranscludeFn?: Function;\n  transcludeControllers?: {[key: string]: any};\n  futureParentElement?: Node;\n}\nexport interface IRootScopeService {\n  $new(isolate?: boolean): IScope;\n  $id: string;\n  $parent: IScope;\n  $root: IScope;\n  $watch(exp: Ng1Expression, fn?: (a1?: any, a2?: any) => void): Function;\n  $on(event: string, fn?: (event?: any, ...args: any[]) => void): Function;\n  $destroy(): any;\n  $apply(exp?: Ng1Expression): any;\n  $digest(): any;\n  $evalAsync(exp: Ng1Expression, locals?: any): void;\n  $on(event: string, fn?: (event?: any, ...args: any[]) => void): Function;\n  $$childTail: IScope;\n  $$childHead: IScope;\n  $$nextSibling: IScope;\n  [key: string]: any;\n}\nexport interface IScope extends IRootScopeService {}\n\nexport interface IAngularBootstrapConfig { strictDi?: boolean; }\nexport interface IDirective {\n  compile?: IDirectiveCompileFn;\n  controller?: IController;\n  controllerAs?: string;\n  bindToController?: boolean|{[key: string]: string};\n  link?: IDirectiveLinkFn|IDirectivePrePost;\n  name?: string;\n  priority?: number;\n  replace?: boolean;\n  require?: DirectiveRequireProperty;\n  restrict?: string;\n  scope?: boolean|{[key: string]: string};\n  template?: string|Function;\n  templateUrl?: string|Function;\n  templateNamespace?: string;\n  terminal?: boolean;\n  transclude?: DirectiveTranscludeProperty;\n}\nexport type DirectiveRequireProperty = SingleOrListOrMap<string>;\nexport type DirectiveTranscludeProperty = boolean | 'element' | {[key: string]: string};\nexport interface IDirectiveCompileFn {\n  (templateElement: IAugmentedJQuery, templateAttributes: IAttributes,\n   transclude: ITranscludeFunction): IDirectivePrePost;\n}\nexport interface IDirectivePrePost {\n  pre?: IDirectiveLinkFn;\n  post?: IDirectiveLinkFn;\n}\nexport interface IDirectiveLinkFn {\n  (scope: IScope, instanceElement: IAugmentedJQuery, instanceAttributes: IAttributes,\n   controller: any, transclude: ITranscludeFunction): void;\n}\nexport interface IComponent {\n  bindings?: {[key: string]: string};\n  controller?: string|IInjectable;\n  controllerAs?: string;\n  require?: DirectiveRequireProperty;\n  template?: string|Function;\n  templateUrl?: string|Function;\n  transclude?: DirectiveTranscludeProperty;\n}\nexport interface IAttributes {\n  $observe(attr: string, fn: (v: string) => void): void;\n  [key: string]: any;\n}\nexport interface ITranscludeFunction {\n  // If the scope is provided, then the cloneAttachFn must be as well.\n  (scope: IScope, cloneAttachFn: ICloneAttachFunction): IAugmentedJQuery;\n  // If one argument is provided, then it's assumed to be the cloneAttachFn.\n  (cloneAttachFn?: ICloneAttachFunction): IAugmentedJQuery;\n}\nexport interface ICloneAttachFunction {\n  // Let's hint but not force cloneAttachFn's signature\n  (clonedElement?: IAugmentedJQuery, scope?: IScope): any;\n}\nexport type IAugmentedJQuery = Node[] & {\n  on?: (name: string, fn: () => void) => void;\n  data?: (name: string, value?: any) => any;\n  text?: () => string;\n  inheritedData?: (name: string, value?: any) => any;\n  contents?: () => IAugmentedJQuery;\n  parent?: () => IAugmentedJQuery;\n  empty?: () => void;\n  append?: (content: IAugmentedJQuery | string) => IAugmentedJQuery;\n  controller?: (name: string) => any;\n  isolateScope?: () => IScope;\n  injector?: () => IInjectorService;\n  triggerHandler?: (eventTypeOrObject: string | Event, extraParameters?: any[]) => IAugmentedJQuery;\n  remove?: () => void;\n  removeData?: () => void;\n};\nexport interface IProvider { $get: IInjectable; }\nexport interface IProvideService {\n  provider(token: Ng1Token, provider: IProvider): IProvider;\n  factory(token: Ng1Token, factory: IInjectable): IProvider;\n  service(token: Ng1Token, type: IInjectable): IProvider;\n  value(token: Ng1Token, value: any): IProvider;\n  constant(token: Ng1Token, value: any): void;\n  decorator(token: Ng1Token, factory: IInjectable): void;\n}\nexport interface IParseService { (expression: string): ICompiledExpression; }\nexport interface ICompiledExpression {\n  (context: any, locals: any): any;\n  assign?: (context: any, value: any) => any;\n}\nexport interface IHttpBackendService {\n  (method: string, url: string, post?: any, callback?: Function, headers?: any, timeout?: number,\n   withCredentials?: boolean): void;\n}\nexport interface ICacheObject {\n  put<T>(key: string, value?: T): T;\n  get(key: string): any;\n}\nexport interface ITemplateCacheService extends ICacheObject {}\nexport interface ITemplateRequestService {\n  (template: string|any /* TrustedResourceUrl */, ignoreRequestError?: boolean): Promise<string>;\n  totalPendingRequests: number;\n}\nexport type IController = string | IInjectable;\nexport interface IControllerService {\n  (controllerConstructor: IController, locals?: any, later?: any, ident?: any): any;\n  (controllerName: string, locals?: any): any;\n}\n\nexport interface IInjectorService {\n  get(key: string): any;\n  has(key: string): boolean;\n}\n\nexport interface IIntervalService {\n  (func: Function, delay: number, count?: number, invokeApply?: boolean,\n   ...args: any[]): Promise<any>;\n  cancel(promise: Promise<any>): boolean;\n}\n\nexport interface ITestabilityService {\n  findBindings(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  findModels(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  getLocation(): string;\n  setLocation(url: string): void;\n  whenStable(callback: Function): void;\n}\n\nexport interface INgModelController {\n  $render(): void;\n  $isEmpty(value: any): boolean;\n  $setValidity(validationErrorKey: string, isValid: boolean): void;\n  $setPristine(): void;\n  $setDirty(): void;\n  $setUntouched(): void;\n  $setTouched(): void;\n  $rollbackViewValue(): void;\n  $validate(): void;\n  $commitViewValue(): void;\n  $setViewValue(value: any, trigger: string): void;\n\n  $viewValue: any;\n  $modelValue: any;\n  $parsers: Function[];\n  $formatters: Function[];\n  $validators: {[key: string]: Function};\n  $asyncValidators: {[key: string]: Function};\n  $viewChangeListeners: Function[];\n  $error: Object;\n  $pending: Object;\n  $untouched: boolean;\n  $touched: boolean;\n  $pristine: boolean;\n  $dirty: boolean;\n  $valid: boolean;\n  $invalid: boolean;\n  $name: string;\n}\n\nfunction noNg() {\n  throw new Error('AngularJS v1.x is not loaded!');\n}\n\n\nlet angular: {\n  bootstrap: (e: Element, modules: (string | IInjectable)[], config?: IAngularBootstrapConfig) =>\n                 IInjectorService,\n  module: (prefix: string, dependencies?: string[]) => IModule,\n  element: (e: string | Element | Document | IAugmentedJQuery) => IAugmentedJQuery,\n  version: {major: number},\n  resumeBootstrap: () => void,\n  getTestability: (e: Element) => ITestabilityService\n} = <any>{\n  bootstrap: noNg,\n  module: noNg,\n  element: noNg,\n  version: undefined,\n  resumeBootstrap: noNg,\n  getTestability: noNg\n};\n\ntry {\n  if (window.hasOwnProperty('angular')) {\n    angular = (<any>window).angular;\n  }\n} catch (e) {\n  // ignore in CJS mode.\n}\n\n/**\n * @deprecated Use `setAngularJSGlobal` instead.\n */\nexport function setAngularLib(ng: any): void {\n  setAngularJSGlobal(ng);\n}\n\n/**\n * @deprecated Use `getAngularJSGlobal` instead.\n */\nexport function getAngularLib(): any {\n  return getAngularJSGlobal();\n}\n\n/**\n * Resets the AngularJS global.\n *\n * Used when AngularJS is loaded lazily, and not available on `window`.\n */\nexport function setAngularJSGlobal(ng: any): void {\n  angular = ng;\n  version = ng && ng.version;\n}\n\n/**\n * Returns the current AngularJS global.\n */\nexport function getAngularJSGlobal(): any {\n  return angular;\n}\n\nexport const bootstrap: typeof angular.bootstrap = (e, modules, config?) =>\n    angular.bootstrap(e, modules, config);\n\nexport const module: typeof angular.module = (prefix, dependencies?) =>\n    angular.module(prefix, dependencies);\n\nexport const element: typeof angular.element = e => angular.element(e);\n\nexport const resumeBootstrap: typeof angular.resumeBootstrap = () => angular.resumeBootstrap();\n\nexport const getTestability: typeof angular.getTestability = e => angular.getTestability(e);\n\nexport let version = angular.version;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const $COMPILE = '$compile';\nexport const $CONTROLLER = '$controller';\nexport const $DELEGATE = '$delegate';\nexport const $HTTP_BACKEND = '$httpBackend';\nexport const $INJECTOR = '$injector';\nexport const $INTERVAL = '$interval';\nexport const $PARSE = '$parse';\nexport const $PROVIDE = '$provide';\nexport const $ROOT_SCOPE = '$rootScope';\nexport const $SCOPE = '$scope';\nexport const $TEMPLATE_CACHE = '$templateCache';\nexport const $TEMPLATE_REQUEST = '$templateRequest';\n\nexport const $$TESTABILITY = '$$testability';\n\nexport const COMPILER_KEY = '$$angularCompiler';\nexport const GROUP_PROJECTABLE_NODES_KEY = '$$angularGroupProjectableNodes';\nexport const INJECTOR_KEY = '$$angularInjector';\nexport const LAZY_MODULE_REF = '$$angularLazyModuleRef';\nexport const NG_ZONE_KEY = '$$angularNgZone';\n\nexport const REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nexport const REQUIRE_NG_MODEL = '?ngModel';\n\nexport const UPGRADE_MODULE_NAME = '$$UpgradeModule';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nexport class PropertyBinding {\n  // TODO(issue/24571): remove '!'.\n  bracketAttr !: string;\n  // TODO(issue/24571): remove '!'.\n  bracketParenAttr !: string;\n  // TODO(issue/24571): remove '!'.\n  parenAttr !: string;\n  // TODO(issue/24571): remove '!'.\n  onAttr !: string;\n  // TODO(issue/24571): remove '!'.\n  bindAttr !: string;\n  // TODO(issue/24571): remove '!'.\n  bindonAttr !: string;\n\n  constructor(public prop: string, public attr: string) { this.parseBinding(); }\n\n  private parseBinding() {\n    this.bracketAttr = `[${this.attr}]`;\n    this.parenAttr = `(${this.attr})`;\n    this.bracketParenAttr = `[(${this.attr})]`;\n    const capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n    this.onAttr = `on${capitalAttr}`;\n    this.bindAttr = `bind${capitalAttr}`;\n    this.bindonAttr = `bindon${capitalAttr}`;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, Type} from '@angular/core';\nimport * as angular from './angular1';\n\nconst DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\nconst DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n\nexport function onError(e: any) {\n  // TODO: (misko): We seem to not have a stack trace here!\n  if (console.error) {\n    console.error(e, e.stack);\n  } else {\n    // tslint:disable-next-line:no-console\n    console.log(e, e.stack);\n  }\n  throw e;\n}\n\nexport function controllerKey(name: string): string {\n  return '$' + name + 'Controller';\n}\n\nexport function directiveNormalize(name: string): string {\n  return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n      .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, (_, letter) => letter.toUpperCase());\n}\n\nexport function getComponentName(component: Type<any>): string {\n  // Return the name of the component or the first line of its stringified version.\n  return (component as any).overriddenName || component.name || component.toString().split('\\n')[0];\n}\n\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  // TODO(issue/24571): remove '!'.\n  resolve !: (value?: R | PromiseLike<R>) => void;\n  // TODO(issue/24571): remove '!'.\n  reject !: (error?: any) => void;\n\n  constructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\nexport interface LazyModuleRef {\n  // Whether the AngularJS app has been bootstrapped outside the Angular zone\n  // (in which case calls to Angular APIs need to be brought back in).\n  needsNgZone: boolean;\n  injector?: Injector;\n  promise?: Promise<Injector>;\n}\n\n/**\n * @return Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component: any) {\n  return typeof component.writeValue === 'function' &&\n      typeof component.registerOnChange === 'function';\n}\n\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n */\nexport function hookupNgModel(ngModel: angular.INgModelController, component: any) {\n  if (ngModel && supportsNgModel(component)) {\n    ngModel.$render = () => { component.writeValue(ngModel.$viewValue); };\n    component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n    if (typeof component.registerOnTouched === 'function') {\n      component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n    }\n  }\n}\n\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\nexport function strictEquals(val1: any, val2: any): boolean {\n  return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ApplicationRef, ChangeDetectorRef, ComponentFactory, ComponentRef, EventEmitter, Injector, OnChanges, SimpleChange, SimpleChanges, StaticProvider, Testability, TestabilityRegistry, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {PropertyBinding} from './component_info';\nimport {$SCOPE} from './constants';\nimport {getComponentName, hookupNgModel, strictEquals} from './util';\n\nconst INITIAL_VALUE = {\n  __UNINITIALIZED__: true\n};\n\nexport class DowngradeComponentAdapter {\n  private implementsOnChanges = false;\n  private inputChangeCount: number = 0;\n  private inputChanges: SimpleChanges = {};\n  private componentScope: angular.IScope;\n  // TODO(issue/24571): remove '!'.\n  private componentRef !: ComponentRef<any>;\n  private component: any;\n  // TODO(issue/24571): remove '!'.\n  private changeDetector !: ChangeDetectorRef;\n  // TODO(issue/24571): remove '!'.\n  private viewChangeDetector !: ChangeDetectorRef;\n\n  constructor(\n      private element: angular.IAugmentedJQuery, private attrs: angular.IAttributes,\n      private scope: angular.IScope, private ngModel: angular.INgModelController,\n      private parentInjector: Injector, private $injector: angular.IInjectorService,\n      private $compile: angular.ICompileService, private $parse: angular.IParseService,\n      private componentFactory: ComponentFactory<any>,\n      private wrapCallback: <T>(cb: () => T) => () => T) {\n    this.componentScope = scope.$new();\n  }\n\n  compileContents(): Node[][] {\n    const compiledProjectableNodes: Node[][] = [];\n    const projectableNodes: Node[][] = this.groupProjectableNodes();\n    const linkFns = projectableNodes.map(nodes => this.$compile(nodes));\n\n    this.element.empty !();\n\n    linkFns.forEach(linkFn => {\n      linkFn(this.scope, (clone: Node[]) => {\n        compiledProjectableNodes.push(clone);\n        this.element.append !(clone);\n      });\n    });\n\n    return compiledProjectableNodes;\n  }\n\n  createComponent(projectableNodes: Node[][]) {\n    const providers: StaticProvider[] = [{provide: $SCOPE, useValue: this.componentScope}];\n    const childInjector = Injector.create(\n        {providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter'});\n\n    this.componentRef =\n        this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n    this.viewChangeDetector = this.componentRef.injector.get(ChangeDetectorRef);\n    this.changeDetector = this.componentRef.changeDetectorRef;\n    this.component = this.componentRef.instance;\n\n    // testability hook is commonly added during component bootstrap in\n    // packages/core/src/application_ref.bootstrap()\n    // in downgraded application, component creation will take place here as well as adding the\n    // testability hook.\n    const testability = this.componentRef.injector.get(Testability, null);\n    if (testability) {\n      this.componentRef.injector.get(TestabilityRegistry)\n          .registerApplication(this.componentRef.location.nativeElement, testability);\n    }\n\n    hookupNgModel(this.ngModel, this.component);\n  }\n\n  setupInputs(needsNgZone: boolean, propagateDigest = true): void {\n    const attrs = this.attrs;\n    const inputs = this.componentFactory.inputs || [];\n    for (let i = 0; i < inputs.length; i++) {\n      const input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n      let expr: string|null = null;\n\n      if (attrs.hasOwnProperty(input.attr)) {\n        const observeFn = (prop => {\n          let prevValue = INITIAL_VALUE;\n          return (currValue: any) => {\n            // Initially, both `$observe()` and `$watch()` will call this function.\n            if (!strictEquals(prevValue, currValue)) {\n              if (prevValue === INITIAL_VALUE) {\n                prevValue = currValue;\n              }\n\n              this.updateInput(prop, prevValue, currValue);\n              prevValue = currValue;\n            }\n          };\n        })(input.prop);\n        attrs.$observe(input.attr, observeFn);\n\n        // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n        // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n        // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n        let unwatch: Function|null = this.componentScope.$watch(() => {\n          unwatch !();\n          unwatch = null;\n          observeFn(attrs[input.attr]);\n        });\n\n      } else if (attrs.hasOwnProperty(input.bindAttr)) {\n        expr = attrs[input.bindAttr];\n      } else if (attrs.hasOwnProperty(input.bracketAttr)) {\n        expr = attrs[input.bracketAttr];\n      } else if (attrs.hasOwnProperty(input.bindonAttr)) {\n        expr = attrs[input.bindonAttr];\n      } else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n        expr = attrs[input.bracketParenAttr];\n      }\n      if (expr != null) {\n        const watchFn =\n            (prop => (currValue: any, prevValue: any) =>\n                 this.updateInput(prop, prevValue, currValue))(input.prop);\n        this.componentScope.$watch(expr, watchFn);\n      }\n    }\n\n    // Invoke `ngOnChanges()` and Change Detection (when necessary)\n    const detectChanges = () => this.changeDetector.detectChanges();\n    const prototype = this.componentFactory.componentType.prototype;\n    this.implementsOnChanges = !!(prototype && (<OnChanges>prototype).ngOnChanges);\n\n    this.componentScope.$watch(() => this.inputChangeCount, this.wrapCallback(() => {\n      // Invoke `ngOnChanges()`\n      if (this.implementsOnChanges) {\n        const inputChanges = this.inputChanges;\n        this.inputChanges = {};\n        (<OnChanges>this.component).ngOnChanges(inputChanges !);\n      }\n\n      this.viewChangeDetector.markForCheck();\n\n      // If opted out of propagating digests, invoke change detection when inputs change.\n      if (!propagateDigest) {\n        detectChanges();\n      }\n    }));\n\n    // If not opted out of propagating digests, invoke change detection on every digest\n    if (propagateDigest) {\n      this.componentScope.$watch(this.wrapCallback(detectChanges));\n    }\n\n    // If necessary, attach the view so that it will be dirty-checked.\n    // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n    if (needsNgZone || !propagateDigest) {\n      let unwatch: Function|null = this.componentScope.$watch(() => {\n        unwatch !();\n        unwatch = null;\n\n        const appRef = this.parentInjector.get<ApplicationRef>(ApplicationRef);\n        appRef.attachView(this.componentRef.hostView);\n      });\n    }\n  }\n\n  setupOutputs() {\n    const attrs = this.attrs;\n    const outputs = this.componentFactory.outputs || [];\n    for (let j = 0; j < outputs.length; j++) {\n      const output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n      const bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n      const bracketParenAttr =\n          `[(${output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8)})]`;\n      // order below is important - first update bindings then evaluate expressions\n      if (attrs.hasOwnProperty(bindonAttr)) {\n        this.subscribeToOutput(output, attrs[bindonAttr], true);\n      }\n      if (attrs.hasOwnProperty(bracketParenAttr)) {\n        this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n      }\n      if (attrs.hasOwnProperty(output.onAttr)) {\n        this.subscribeToOutput(output, attrs[output.onAttr]);\n      }\n      if (attrs.hasOwnProperty(output.parenAttr)) {\n        this.subscribeToOutput(output, attrs[output.parenAttr]);\n      }\n    }\n  }\n\n  private subscribeToOutput(output: PropertyBinding, expr: string, isAssignment: boolean = false) {\n    const getter = this.$parse(expr);\n    const setter = getter.assign;\n    if (isAssignment && !setter) {\n      throw new Error(`Expression '${expr}' is not assignable!`);\n    }\n    const emitter = this.component[output.prop] as EventEmitter<any>;\n    if (emitter) {\n      emitter.subscribe({\n        next: isAssignment ? (v: any) => setter !(this.scope, v) :\n                             (v: any) => getter(this.scope, {'$event': v})\n      });\n    } else {\n      throw new Error(\n          `Missing emitter '${output.prop}' on component '${getComponentName(this.componentFactory.componentType)}'!`);\n    }\n  }\n\n  registerCleanup() {\n    const destroyComponentRef = this.wrapCallback(() => this.componentRef.destroy());\n    let destroyed = false;\n\n    this.element.on !('$destroy', () => this.componentScope.$destroy());\n    this.componentScope.$on('$destroy', () => {\n      if (!destroyed) {\n        destroyed = true;\n        this.componentRef.injector.get(TestabilityRegistry)\n            .unregisterApplication(this.componentRef.location.nativeElement);\n        destroyComponentRef();\n      }\n    });\n  }\n\n  getInjector(): Injector { return this.componentRef.injector; }\n\n  private updateInput(prop: string, prevValue: any, currValue: any) {\n    if (this.implementsOnChanges) {\n      this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n    }\n\n    this.inputChangeCount++;\n    this.component[prop] = currValue;\n  }\n\n  groupProjectableNodes() {\n    let ngContentSelectors = this.componentFactory.ngContentSelectors;\n    return groupNodesBySelector(ngContentSelectors, this.element.contents !());\n  }\n}\n\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n */\nexport function groupNodesBySelector(ngContentSelectors: string[], nodes: Node[]): Node[][] {\n  const projectableNodes: Node[][] = [];\n  let wildcardNgContentIndex: number;\n\n  for (let i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n    projectableNodes[i] = [];\n  }\n\n  for (let j = 0, jj = nodes.length; j < jj; ++j) {\n    const node = nodes[j];\n    const ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n    if (ngContentIndex != null) {\n      projectableNodes[ngContentIndex].push(node);\n    }\n  }\n\n  return projectableNodes;\n}\n\nfunction findMatchingNgContentIndex(element: any, ngContentSelectors: string[]): number|null {\n  const ngContentIndices: number[] = [];\n  let wildcardNgContentIndex: number = -1;\n  for (let i = 0; i < ngContentSelectors.length; i++) {\n    const selector = ngContentSelectors[i];\n    if (selector === '*') {\n      wildcardNgContentIndex = i;\n    } else {\n      if (matchesSelector(element, selector)) {\n        ngContentIndices.push(i);\n      }\n    }\n  }\n  ngContentIndices.sort();\n\n  if (wildcardNgContentIndex !== -1) {\n    ngContentIndices.push(wildcardNgContentIndex);\n  }\n  return ngContentIndices.length ? ngContentIndices[0] : null;\n}\n\nlet _matches: (this: any, selector: string) => boolean;\n\nfunction matchesSelector(el: any, selector: string): boolean {\n  if (!_matches) {\n    const elProto = <any>Element.prototype;\n    _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n        elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n  }\n  return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactory, ComponentFactoryResolver, Injector, NgZone, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {$COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, LAZY_MODULE_REF, REQUIRE_INJECTOR, REQUIRE_NG_MODEL} from './constants';\nimport {DowngradeComponentAdapter} from './downgrade_component_adapter';\nimport {LazyModuleRef, controllerKey, getComponentName, isFunction} from './util';\n\n\ninterface Thenable<T> {\n  then(callback: (value: T) => any): any;\n}\n\n/**\n * @description\n *\n * A helper function that allows an Angular component to be used from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function to be used for registering\n * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * @usageNotes\n * ### Examples\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * @param info contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n * * `propagateDigest?: boolean`: Whether to perform {@link ChangeDetectorRef#detectChanges\n *   change detection} on the component on every\n *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n *   change detection will still be performed when any of the component's inputs changes.\n *   (Default: true)\n *\n * @returns a factory function that can be used to register the component in an\n * AngularJS module.\n *\n * @experimental\n */\nexport function downgradeComponent(info: {\n  component: Type<any>;\n  /** @experimental */\n  propagateDigest?: boolean;\n  /** @deprecated since v4. This parameter is no longer used */\n  inputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  outputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  selectors?: string[];\n}): any /* angular.IInjectable */ {\n  const directiveFactory:\n      angular.IAnnotatedFunction = function(\n                                       $compile: angular.ICompileService,\n                                       $injector: angular.IInjectorService,\n                                       $parse: angular.IParseService): angular.IDirective {\n    // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n    // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n    // (except if explicitly escaped, in which case we shouldn't force it back in).\n    // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n    // Angular zone.\n    let needsNgZone = false;\n    let wrapCallback = <T>(cb: () => T) => cb;\n    let ngZone: NgZone;\n\n    return {\n      restrict: 'E',\n      terminal: true,\n      require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n      link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n             required: any[]) => {\n        // We might have to compile the contents asynchronously, because this might have been\n        // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n        // been compiled.\n\n        const ngModel: angular.INgModelController = required[1];\n        let parentInjector: Injector|Thenable<Injector>|undefined = required[0];\n        let ranAsync = false;\n\n        if (!parentInjector) {\n          const lazyModuleRef = $injector.get(LAZY_MODULE_REF) as LazyModuleRef;\n          needsNgZone = lazyModuleRef.needsNgZone;\n          parentInjector = lazyModuleRef.injector || lazyModuleRef.promise as Promise<Injector>;\n        }\n\n        const doDowngrade = (injector: Injector) => {\n          const componentFactoryResolver: ComponentFactoryResolver =\n              injector.get(ComponentFactoryResolver);\n          const componentFactory: ComponentFactory<any> =\n              componentFactoryResolver.resolveComponentFactory(info.component) !;\n\n          if (!componentFactory) {\n            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n          }\n\n          const injectorPromise = new ParentInjectorPromise(element);\n          const facade = new DowngradeComponentAdapter(\n              element, attrs, scope, ngModel, injector, $injector, $compile, $parse,\n              componentFactory, wrapCallback);\n\n          const projectableNodes = facade.compileContents();\n          facade.createComponent(projectableNodes);\n          facade.setupInputs(needsNgZone, info.propagateDigest);\n          facade.setupOutputs();\n          facade.registerCleanup();\n\n          injectorPromise.resolve(facade.getInjector());\n\n          if (ranAsync) {\n            // If this is run async, it is possible that it is not run inside a\n            // digest and initial input values will not be detected.\n            scope.$evalAsync(() => {});\n          }\n        };\n\n        const downgradeFn = !needsNgZone ? doDowngrade : (injector: Injector) => {\n          if (!ngZone) {\n            ngZone = injector.get(NgZone);\n            wrapCallback = <T>(cb: () => T) => () =>\n                NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n          }\n\n          wrapCallback(() => doDowngrade(injector))();\n        };\n\n        if (isThenable<Injector>(parentInjector)) {\n          parentInjector.then(downgradeFn);\n        } else {\n          downgradeFn(parentInjector);\n        }\n\n        ranAsync = true;\n      }\n    };\n  };\n\n  // bracket-notation because of closure - see #14441\n  directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n  return directiveFactory;\n}\n\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nclass ParentInjectorPromise {\n  // TODO(issue/24571): remove '!'.\n  private injector !: Injector;\n  private injectorKey: string = controllerKey(INJECTOR_KEY);\n  private callbacks: ((injector: Injector) => any)[] = [];\n\n  constructor(private element: angular.IAugmentedJQuery) {\n    // Store the promise on the element.\n    element.data !(this.injectorKey, this);\n  }\n\n  then(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n\n  resolve(injector: Injector) {\n    this.injector = injector;\n\n    // Store the real injector on the element.\n    this.element.data !(this.injectorKey, injector);\n\n    // Release the element to prevent memory leaks.\n    this.element = null !;\n\n    // Run the queued callbacks.\n    this.callbacks.forEach(callback => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\nfunction isThenable<T>(obj: object): obj is Thenable<T> {\n  return isFunction((obj as any).then);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {INJECTOR_KEY} from './constants';\n\n/**\n * @description\n *\n * A helper function to allow an Angular service to be accessible from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function that provides access to the Angular\n * service identified by the `token` parameter.\n *\n * @usageNotes\n * ### Examples\n *\n * First ensure that the service to be downgraded is provided in an `NgModule`\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app `NgModule`\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n *\n * @param token an `InjectionToken` that identifies a service provided from Angular.\n *\n * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n * @experimental\n */\nexport function downgradeInjectable(token: any): Function {\n  const factory = function(i: Injector) { return i.get(token); };\n  (factory as any)['$inject'] = [INJECTOR_KEY];\n\n  return factory;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ElementRef, Injector, SimpleChanges} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {$COMPILE, $CONTROLLER, $HTTP_BACKEND, $INJECTOR, $TEMPLATE_CACHE} from './constants';\nimport {controllerKey, directiveNormalize, isFunction} from './util';\n\n\n// Constants\nconst REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n\n// Interfaces\nexport interface IBindingDestination {\n  [key: string]: any;\n  $onChanges?: (changes: SimpleChanges) => void;\n}\n\nexport interface IControllerInstance extends IBindingDestination {\n  $doCheck?: () => void;\n  $onDestroy?: () => void;\n  $onInit?: () => void;\n  $postLink?: () => void;\n}\n\n// Classes\nexport class UpgradeHelper {\n  public readonly $injector: angular.IInjectorService;\n  public readonly element: Element;\n  public readonly $element: angular.IAugmentedJQuery;\n  public readonly directive: angular.IDirective;\n\n  private readonly $compile: angular.ICompileService;\n  private readonly $controller: angular.IControllerService;\n\n  constructor(\n      private injector: Injector, private name: string, elementRef: ElementRef,\n      directive?: angular.IDirective) {\n    this.$injector = injector.get($INJECTOR);\n    this.$compile = this.$injector.get($COMPILE);\n    this.$controller = this.$injector.get($CONTROLLER);\n\n    this.element = elementRef.nativeElement;\n    this.$element = angular.element(this.element);\n\n    this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n  }\n\n  static getDirective($injector: angular.IInjectorService, name: string): angular.IDirective {\n    const directives: angular.IDirective[] = $injector.get(name + 'Directive');\n    if (directives.length > 1) {\n      throw new Error(`Only support single directive definition for: ${name}`);\n    }\n\n    const directive = directives[0];\n\n    // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n    // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n    if (directive.compile && !directive.link) notSupported(name, 'compile');\n    if (directive.replace) notSupported(name, 'replace');\n    if (directive.terminal) notSupported(name, 'terminal');\n\n    return directive;\n  }\n\n  static getTemplate(\n      $injector: angular.IInjectorService, directive: angular.IDirective,\n      fetchRemoteTemplate = false): string|Promise<string> {\n    if (directive.template !== undefined) {\n      return getOrCall<string>(directive.template);\n    } else if (directive.templateUrl) {\n      const $templateCache = $injector.get($TEMPLATE_CACHE) as angular.ITemplateCacheService;\n      const url = getOrCall<string>(directive.templateUrl);\n      const template = $templateCache.get(url);\n\n      if (template !== undefined) {\n        return template;\n      } else if (!fetchRemoteTemplate) {\n        throw new Error('loading directive templates asynchronously is not supported');\n      }\n\n      return new Promise((resolve, reject) => {\n        const $httpBackend = $injector.get($HTTP_BACKEND) as angular.IHttpBackendService;\n        $httpBackend('GET', url, null, (status: number, response: string) => {\n          if (status === 200) {\n            resolve($templateCache.put(url, response));\n          } else {\n            reject(`GET component template from '${url}' returned '${status}: ${response}'`);\n          }\n        });\n      });\n    } else {\n      throw new Error(`Directive '${directive.name}' is not a component, it is missing template.`);\n    }\n  }\n\n  buildController(controllerType: angular.IController, $scope: angular.IScope) {\n    // TODO: Document that we do not pre-assign bindings on the controller instance.\n    // Quoted properties below so that this code can be optimized with Closure Compiler.\n    const locals = {'$scope': $scope, '$element': this.$element};\n    const controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n\n    this.$element.data !(controllerKey(this.directive.name !), controller);\n\n    return controller;\n  }\n\n  compileTemplate(template?: string): angular.ILinkFn {\n    if (template === undefined) {\n      template = UpgradeHelper.getTemplate(this.$injector, this.directive) as string;\n    }\n\n    return this.compileHtml(template);\n  }\n\n  onDestroy($scope: angular.IScope, controllerInstance?: any) {\n    if (controllerInstance && isFunction(controllerInstance.$onDestroy)) {\n      controllerInstance.$onDestroy();\n    }\n    $scope.$destroy();\n    this.$element.triggerHandler !('$destroy');\n  }\n\n  prepareTransclusion(): angular.ILinkFn|undefined {\n    const transclude = this.directive.transclude;\n    const contentChildNodes = this.extractChildNodes();\n    const attachChildrenFn: angular.ILinkFn = (scope, cloneAttachFn) => {\n      // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n      // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n      // there will be no transclusion scope here.\n      // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n      scope = scope || {$destroy: () => undefined};\n      return cloneAttachFn !($template, scope);\n    };\n    let $template = contentChildNodes;\n\n    if (transclude) {\n      const slots = Object.create(null);\n\n      if (typeof transclude === 'object') {\n        $template = [];\n\n        const slotMap = Object.create(null);\n        const filledSlots = Object.create(null);\n\n        // Parse the element selectors.\n        Object.keys(transclude).forEach(slotName => {\n          let selector = transclude[slotName];\n          const optional = selector.charAt(0) === '?';\n          selector = optional ? selector.substring(1) : selector;\n\n          slotMap[selector] = slotName;\n          slots[slotName] = null;            // `null`: Defined but not yet filled.\n          filledSlots[slotName] = optional;  // Consider optional slots as filled.\n        });\n\n        // Add the matching elements into their slot.\n        contentChildNodes.forEach(node => {\n          const slotName = slotMap[directiveNormalize(node.nodeName.toLowerCase())];\n          if (slotName) {\n            filledSlots[slotName] = true;\n            slots[slotName] = slots[slotName] || [];\n            slots[slotName].push(node);\n          } else {\n            $template.push(node);\n          }\n        });\n\n        // Check for required slots that were not filled.\n        Object.keys(filledSlots).forEach(slotName => {\n          if (!filledSlots[slotName]) {\n            throw new Error(`Required transclusion slot '${slotName}' on directive: ${this.name}`);\n          }\n        });\n\n        Object.keys(slots).filter(slotName => slots[slotName]).forEach(slotName => {\n          const nodes = slots[slotName];\n          slots[slotName] = (scope: angular.IScope, cloneAttach: angular.ICloneAttachFunction) =>\n              cloneAttach !(nodes, scope);\n        });\n      }\n\n      // Attach `$$slots` to default slot transclude fn.\n      attachChildrenFn.$$slots = slots;\n\n      // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n      // removes all text content after the first interpolation and updates it later, after\n      // evaluating the expressions. This would result in AngularJS failing to recognize text\n      // nodes that start with an interpolation as transcluded content and use the fallback\n      // content instead.\n      // To avoid this issue, we add a\n      // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n      // to empty text nodes (which can only be a result of Angular removing their initial content).\n      // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n      //       will still fail to be detected by AngularJS v1.6+\n      $template.forEach(node => {\n        if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n          node.nodeValue = '\\u200C';\n        }\n      });\n    }\n\n    return attachChildrenFn;\n  }\n\n  resolveAndBindRequiredControllers(controllerInstance: IControllerInstance|null) {\n    const directiveRequire = this.getDirectiveRequire();\n    const requiredControllers = this.resolveRequire(directiveRequire);\n\n    if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n      const requiredControllersMap = requiredControllers as{[key: string]: IControllerInstance};\n      Object.keys(requiredControllersMap).forEach(key => {\n        controllerInstance[key] = requiredControllersMap[key];\n      });\n    }\n\n    return requiredControllers;\n  }\n\n  private compileHtml(html: string): angular.ILinkFn {\n    this.element.innerHTML = html;\n    return this.$compile(this.element.childNodes);\n  }\n\n  private extractChildNodes(): Node[] {\n    const childNodes: Node[] = [];\n    let childNode: Node|null;\n\n    while (childNode = this.element.firstChild) {\n      this.element.removeChild(childNode);\n      childNodes.push(childNode);\n    }\n\n    return childNodes;\n  }\n\n  private getDirectiveRequire(): angular.DirectiveRequireProperty {\n    const require = this.directive.require || (this.directive.controller && this.directive.name) !;\n\n    if (isMap(require)) {\n      Object.keys(require).forEach(key => {\n        const value = require[key];\n        const match = value.match(REQUIRE_PREFIX_RE) !;\n        const name = value.substring(match[0].length);\n\n        if (!name) {\n          require[key] = match[0] + key;\n        }\n      });\n    }\n\n    return require;\n  }\n\n  private resolveRequire(require: angular.DirectiveRequireProperty, controllerInstance?: any):\n      angular.SingleOrListOrMap<IControllerInstance>|null {\n    if (!require) {\n      return null;\n    } else if (Array.isArray(require)) {\n      return require.map(req => this.resolveRequire(req));\n    } else if (typeof require === 'object') {\n      const value: {[key: string]: IControllerInstance} = {};\n      Object.keys(require).forEach(key => value[key] = this.resolveRequire(require[key]) !);\n      return value;\n    } else if (typeof require === 'string') {\n      const match = require.match(REQUIRE_PREFIX_RE) !;\n      const inheritType = match[1] || match[3];\n\n      const name = require.substring(match[0].length);\n      const isOptional = !!match[2];\n      const searchParents = !!inheritType;\n      const startOnParent = inheritType === '^^';\n\n      const ctrlKey = controllerKey(name);\n      const elem = startOnParent ? this.$element.parent !() : this.$element;\n      const value = searchParents ? elem.inheritedData !(ctrlKey) : elem.data !(ctrlKey);\n\n      if (!value && !isOptional) {\n        throw new Error(\n            `Unable to find required '${require}' in upgraded directive '${this.name}'.`);\n      }\n\n      return value;\n    } else {\n      throw new Error(\n          `Unrecognized 'require' syntax on upgraded directive '${this.name}': ${require}`);\n    }\n  }\n}\n\nfunction getOrCall<T>(property: T | Function): T {\n  return isFunction(property) ? property() : property;\n}\n\n// NOTE: Only works for `typeof T !== 'object'`.\nfunction isMap<T>(value: angular.SingleOrListOrMap<T>): value is {[key: string]: T} {\n  return value && !Array.isArray(value) && typeof value === 'object';\n}\n\nfunction notSupported(name: string, feature: string) {\n  throw new Error(`Upgraded directive '${name}' contains unsupported feature: '${feature}'.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, DoCheck, ElementRef, EventEmitter, Inject, Injector, OnChanges, OnInit, SimpleChange, SimpleChanges, Type} from '@angular/core';\n\nimport * as angular from '../common/angular1';\nimport {$SCOPE} from '../common/constants';\nimport {IBindingDestination, IControllerInstance, UpgradeHelper} from '../common/upgrade_helper';\nimport {isFunction, strictEquals} from '../common/util';\n\n\nconst CAMEL_CASE = /([A-Z])/g;\nconst INITIAL_VALUE = {\n  __UNINITIALIZED__: true\n};\nconst NOT_SUPPORTED: any = 'NOT_SUPPORTED';\n\n\nexport class UpgradeNg1ComponentAdapterBuilder {\n  // TODO(issue/24571): remove '!'.\n  type !: Type<any>;\n  inputs: string[] = [];\n  inputsRename: string[] = [];\n  outputs: string[] = [];\n  outputsRename: string[] = [];\n  propertyOutputs: string[] = [];\n  checkProperties: string[] = [];\n  propertyMap: {[name: string]: string} = {};\n  directive: angular.IDirective|null = null;\n  // TODO(issue/24571): remove '!'.\n  template !: string;\n\n  constructor(public name: string) {\n    const selector =\n        name.replace(CAMEL_CASE, (all: string, next: string) => '-' + next.toLowerCase());\n    const self = this;\n\n    // Note: There is a bug in TS 2.4 that prevents us from\n    // inlining this into @Directive\n    // TODO(tbosch): find or file a bug against TypeScript for this.\n    const directive = {selector: selector, inputs: this.inputsRename, outputs: this.outputsRename};\n\n    @Directive({jit: true, ...directive})\n    class MyClass {\n      // TODO(issue/24571): remove '!'.\n      directive !: angular.IDirective;\n      constructor(\n          @Inject($SCOPE) scope: angular.IScope, injector: Injector, elementRef: ElementRef) {\n        const helper = new UpgradeHelper(injector, name, elementRef, this.directive);\n        return new UpgradeNg1ComponentAdapter(\n            helper, scope, self.template, self.inputs, self.outputs, self.propertyOutputs,\n            self.checkProperties, self.propertyMap) as any;\n      }\n      ngOnInit() { /* needs to be here for ng2 to properly detect it */\n      }\n      ngOnChanges() { /* needs to be here for ng2 to properly detect it */\n      }\n      ngDoCheck() { /* needs to be here for ng2 to properly detect it */\n      }\n      ngOnDestroy() { /* needs to be here for ng2 to properly detect it */\n      }\n    }\n    this.type = MyClass;\n  }\n\n  extractBindings() {\n    const btcIsObject = typeof this.directive !.bindToController === 'object';\n    if (btcIsObject && Object.keys(this.directive !.scope !).length) {\n      throw new Error(\n          `Binding definitions on scope and controller at the same time are not supported.`);\n    }\n\n    const context = (btcIsObject) ? this.directive !.bindToController : this.directive !.scope;\n\n    if (typeof context == 'object') {\n      Object.keys(context).forEach(propName => {\n        const definition = context[propName];\n        const bindingType = definition.charAt(0);\n        const bindingOptions = definition.charAt(1);\n        const attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n\n        // QUESTION: What about `=*`? Ignore? Throw? Support?\n\n        const inputName = `input_${attrName}`;\n        const inputNameRename = `${inputName}: ${attrName}`;\n        const outputName = `output_${attrName}`;\n        const outputNameRename = `${outputName}: ${attrName}`;\n        const outputNameRenameChange = `${outputNameRename}Change`;\n\n        switch (bindingType) {\n          case '@':\n          case '<':\n            this.inputs.push(inputName);\n            this.inputsRename.push(inputNameRename);\n            this.propertyMap[inputName] = propName;\n            break;\n          case '=':\n            this.inputs.push(inputName);\n            this.inputsRename.push(inputNameRename);\n            this.propertyMap[inputName] = propName;\n\n            this.outputs.push(outputName);\n            this.outputsRename.push(outputNameRenameChange);\n            this.propertyMap[outputName] = propName;\n\n            this.checkProperties.push(propName);\n            this.propertyOutputs.push(outputName);\n            break;\n          case '&':\n            this.outputs.push(outputName);\n            this.outputsRename.push(outputNameRename);\n            this.propertyMap[outputName] = propName;\n            break;\n          default:\n            let json = JSON.stringify(context);\n            throw new Error(\n                `Unexpected mapping '${bindingType}' in '${json}' in '${this.name}' directive.`);\n        }\n      });\n    }\n  }\n\n  /**\n   * Upgrade ng1 components into Angular.\n   */\n  static resolve(\n      exportedComponents: {[name: string]: UpgradeNg1ComponentAdapterBuilder},\n      $injector: angular.IInjectorService): Promise<string[]> {\n    const promises = Object.keys(exportedComponents).map(name => {\n      const exportedComponent = exportedComponents[name];\n      exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n      exportedComponent.extractBindings();\n\n      return Promise\n          .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n          .then(template => exportedComponent.template = template);\n    });\n\n    return Promise.all(promises);\n  }\n}\n\nclass UpgradeNg1ComponentAdapter implements OnInit, OnChanges, DoCheck {\n  private controllerInstance: IControllerInstance|null = null;\n  destinationObj: IBindingDestination|null = null;\n  checkLastValues: any[] = [];\n  private directive: angular.IDirective;\n  element: Element;\n  $element: any = null;\n  componentScope: angular.IScope;\n\n  constructor(\n      private helper: UpgradeHelper, scope: angular.IScope, private template: string,\n      private inputs: string[], private outputs: string[], private propOuts: string[],\n      private checkProperties: string[], private propertyMap: {[key: string]: string}) {\n    this.directive = helper.directive;\n    this.element = helper.element;\n    this.$element = helper.$element;\n    this.componentScope = scope.$new(!!this.directive.scope);\n\n    const controllerType = this.directive.controller;\n\n    if (this.directive.bindToController && controllerType) {\n      this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n      this.destinationObj = this.controllerInstance;\n    } else {\n      this.destinationObj = this.componentScope;\n    }\n\n    for (let i = 0; i < inputs.length; i++) {\n      (this as any)[inputs[i]] = null;\n    }\n    for (let j = 0; j < outputs.length; j++) {\n      const emitter = (this as any)[outputs[j]] = new EventEmitter<any>();\n      if (this.propOuts.indexOf(outputs[j]) === -1) {\n        this.setComponentProperty(\n            outputs[j], (emitter => (value: any) => emitter.emit(value))(emitter));\n      }\n    }\n    for (let k = 0; k < propOuts.length; k++) {\n      this.checkLastValues.push(INITIAL_VALUE);\n    }\n  }\n\n  ngOnInit() {\n    // Collect contents, insert and compile template\n    const attachChildNodes: angular.ILinkFn|undefined = this.helper.prepareTransclusion();\n    const linkFn = this.helper.compileTemplate(this.template);\n\n    // Instantiate controller (if not already done so)\n    const controllerType = this.directive.controller;\n    const bindToController = this.directive.bindToController;\n    if (controllerType && !bindToController) {\n      this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n    }\n\n    // Require other controllers\n    const requiredControllers =\n        this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n\n    // Hook: $onInit\n    if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n      this.controllerInstance.$onInit();\n    }\n\n    // Linking\n    const link = this.directive.link;\n    const preLink = (typeof link == 'object') && (link as angular.IDirectivePrePost).pre;\n    const postLink = (typeof link == 'object') ? (link as angular.IDirectivePrePost).post : link;\n    const attrs: angular.IAttributes = NOT_SUPPORTED;\n    const transcludeFn: angular.ITranscludeFunction = NOT_SUPPORTED;\n    if (preLink) {\n      preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    linkFn(this.componentScope, null !, {parentBoundTranscludeFn: attachChildNodes});\n\n    if (postLink) {\n      postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    // Hook: $postLink\n    if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n      this.controllerInstance.$postLink();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const ng1Changes: any = {};\n    Object.keys(changes).forEach(name => {\n      const change: SimpleChange = changes[name];\n      this.setComponentProperty(name, change.currentValue);\n      ng1Changes[this.propertyMap[name]] = change;\n    });\n\n    if (isFunction(this.destinationObj !.$onChanges)) {\n      this.destinationObj !.$onChanges !(ng1Changes);\n    }\n  }\n\n  ngDoCheck() {\n    const destinationObj = this.destinationObj;\n    const lastValues = this.checkLastValues;\n    const checkProperties = this.checkProperties;\n    const propOuts = this.propOuts;\n    checkProperties.forEach((propName, i) => {\n      const value = destinationObj ![propName];\n      const last = lastValues[i];\n      if (!strictEquals(last, value)) {\n        const eventEmitter: EventEmitter<any> = (this as any)[propOuts[i]];\n        eventEmitter.emit(lastValues[i] = value);\n      }\n    });\n\n    if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n      this.controllerInstance.$doCheck();\n    }\n  }\n\n  ngOnDestroy() { this.helper.onDestroy(this.componentScope, this.controllerInstance); }\n\n  setComponentProperty(name: string, value: any) {\n    this.destinationObj ![this.propertyMap[name]] = value;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerOptions, Directive, Injector, NgModule, NgModuleRef, NgZone, StaticProvider, Testability, Type} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport * as angular from '../common/angular1';\nimport {$$TESTABILITY, $COMPILE, $INJECTOR, $ROOT_SCOPE, COMPILER_KEY, INJECTOR_KEY, LAZY_MODULE_REF, NG_ZONE_KEY} from '../common/constants';\nimport {downgradeComponent} from '../common/downgrade_component';\nimport {downgradeInjectable} from '../common/downgrade_injectable';\nimport {Deferred, LazyModuleRef, controllerKey, onError} from '../common/util';\n\nimport {UpgradeNg1ComponentAdapterBuilder} from './upgrade_ng1_adapter';\n\nlet upgradeCount: number = 0;\n\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * @usageNotes\n * ### Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * @Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * @NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nexport class UpgradeAdapter {\n  private idPrefix: string = `NG2_UPGRADE_${upgradeCount++}_`;\n  private downgradedComponents: Type<any>[] = [];\n  /**\n   * An internal map of ng1 components which need to up upgraded to ng2.\n   *\n   * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n   * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n   *\n   * @internal\n   */\n  private ng1ComponentsToBeUpgraded: {[name: string]: UpgradeNg1ComponentAdapterBuilder} = {};\n  private upgradedProviders: StaticProvider[] = [];\n  // TODO(issue/24571): remove '!'.\n  private ngZone !: NgZone;\n  // TODO(issue/24571): remove '!'.\n  private ng1Module !: angular.IModule;\n  private moduleRef: NgModuleRef<any>|null = null;\n  // TODO(issue/24571): remove '!'.\n  private ng2BootstrapDeferred !: Deferred<angular.IInjectorService>;\n\n  constructor(private ng2AppModule: Type<any>, private compilerOptions?: CompilerOptions) {\n    if (!ng2AppModule) {\n      throw new Error(\n          'UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n    }\n  }\n\n  /**\n   * Allows Angular Component to be used from AngularJS.\n   *\n   * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n   * Angular Component. The adapter will bootstrap Angular component from within the\n   * AngularJS template.\n   *\n   * @usageNotes\n   * ### Mental Model\n   *\n   * 1. The component is instantiated by being listed in AngularJS template. This means that the\n   *    host element is controlled by AngularJS, but the component's view will be controlled by\n   *    Angular.\n   * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n   *    syntax. This has to be done, this way because we must follow Angular components do not\n   *    declare how the attributes should be interpreted.\n   * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n   *    by way of the `ControlValueAccessor` interface from @angular/forms. Only components that\n   *    implement this interface are eligible.\n   *\n   * ### Supported Features\n   *\n   * - Bindings:\n   *   - Attribute: `<comp name=\"World\">`\n   *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n   *   - Expression:  `<comp [name]=\"username\">`\n   *   - Event:  `<comp (close)=\"doSomething()\">`\n   *   - ng-model: `<comp ng-model=\"name\">`\n   * - Content projection: yes\n   *\n   * ### Example\n   *\n   * ```\n   * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n   * const module = angular.module('myExample', []);\n   * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n   *\n   * @Component({\n   *   selector: 'greet',\n   *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n   * })\n   * class Greeter {\n   *   @Input() salutation: string;\n   *   @Input() name: string;\n   * }\n   *\n   * @NgModule({\n   *   declarations: [Greeter],\n   *   imports: [BrowserModule]\n   * })\n   * class MyNg2Module {}\n   *\n   * document.body.innerHTML =\n   *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n   *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n   * });\n   * ```\n   */\n  downgradeNg2Component(component: Type<any>): Function {\n    this.downgradedComponents.push(component);\n\n    return downgradeComponent({component});\n  }\n\n  /**\n   * Allows AngularJS Component to be used from Angular.\n   *\n   * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n   * directive. The adapter will bootstrap AngularJS component from within the Angular\n   * template.\n   *\n   * @usageNotes\n   * ### Mental Model\n   *\n   * 1. The component is instantiated by being listed in Angular template. This means that the\n   *    host element is controlled by Angular, but the component's view will be controlled by\n   *    AngularJS.\n   *\n   * ### Supported Features\n   *\n   * - Bindings:\n   *   - Attribute: `<comp name=\"World\">`\n   *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n   *   - Expression:  `<comp [name]=\"username\">`\n   *   - Event:  `<comp (close)=\"doSomething()\">`\n   * - Transclusion: yes\n   * - Only some of the features of\n   *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n   *   supported:\n   *   - `compile`: not supported because the host element is owned by Angular, which does\n   *     not allow modifying DOM structure during compilation.\n   *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n   *   - `controllerAs`: supported.\n   *   - `bindToController`: supported.\n   *   - `link`: supported. (NOTE: only pre-link function is supported.)\n   *   - `name`: supported.\n   *   - `priority`: ignored.\n   *   - `replace`: not supported.\n   *   - `require`: supported.\n   *   - `restrict`: must be set to 'E'.\n   *   - `scope`: supported.\n   *   - `template`: supported.\n   *   - `templateUrl`: supported.\n   *   - `terminal`: ignored.\n   *   - `transclude`: supported.\n   *\n   *\n   * ### Example\n   *\n   * ```\n   * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n   * const module = angular.module('myExample', []);\n   *\n   * module.directive('greet', function() {\n   *   return {\n   *     scope: {salutation: '=', name: '=' },\n   *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n   *   };\n   * });\n   *\n   * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n   *\n   * @Component({\n   *   selector: 'ng2',\n   *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n   * })\n   * class Ng2Component {\n   * }\n   *\n   * @NgModule({\n   *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n   *   imports: [BrowserModule]\n   * })\n   * class MyNg2Module {}\n   *\n   * document.body.innerHTML = '<ng2></ng2>';\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n   *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n   * });\n   * ```\n   */\n  upgradeNg1Component(name: string): Type<any> {\n    if ((<any>this.ng1ComponentsToBeUpgraded).hasOwnProperty(name)) {\n      return this.ng1ComponentsToBeUpgraded[name].type;\n    } else {\n      return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n          .type;\n    }\n  }\n\n  /**\n   * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n   * Use this instead of `angular.mock.module()` to load the upgrade module into\n   * the AngularJS testing injector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```\n   * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n   *\n   * // configure the adapter with upgrade/downgrade components and services\n   * upgradeAdapter.downgradeNg2Component(MyComponent);\n   *\n   * let upgradeAdapterRef: UpgradeAdapterRef;\n   * let $compile, $rootScope;\n   *\n   * // We must register the adapter before any calls to `inject()`\n   * beforeEach(() => {\n   *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n   * });\n   *\n   * beforeEach(inject((_$compile_, _$rootScope_) => {\n   *   $compile = _$compile_;\n   *   $rootScope = _$rootScope_;\n   * }));\n   *\n   * it(\"says hello\", (done) => {\n   *   upgradeAdapterRef.ready(() => {\n   *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n   *     $rootScope.$apply();\n   *     expect(element.html()).toContain(\"Hello World\");\n   *     done();\n   *   })\n   * });\n   *\n   * ```\n   *\n   * @param modules any AngularJS modules that the upgrade module should depend upon\n   * @returns an `UpgradeAdapterRef`, which lets you register a `ready()` callback to\n   * run assertions once the Angular components are ready to test through AngularJS.\n   */\n  registerForNg1Tests(modules?: string[]): UpgradeAdapterRef {\n    const windowNgMock = (window as any)['angular'].mock;\n    if (!windowNgMock || !windowNgMock.module) {\n      throw new Error('Failed to find \\'angular.mock.module\\'.');\n    }\n    this.declareNg1Module(modules);\n    windowNgMock.module(this.ng1Module.name);\n    const upgrade = new UpgradeAdapterRef();\n    this.ng2BootstrapDeferred.promise.then(\n        (ng1Injector) => { (<any>upgrade)._bootstrapDone(this.moduleRef, ng1Injector); }, onError);\n    return upgrade;\n  }\n\n  /**\n   * Bootstrap a hybrid AngularJS / Angular application.\n   *\n   * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n   * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n   * AngularJS, this bootstrap is asynchronous.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```\n   * const adapter = new UpgradeAdapter(MyNg2Module);\n   * const module = angular.module('myExample', []);\n   * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n   *\n   * module.directive('ng1', function() {\n   *   return {\n   *      scope: { title: '=' },\n   *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n   *   };\n   * });\n   *\n   *\n   * @Component({\n   *   selector: 'ng2',\n   *   inputs: ['name'],\n   *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n   * })\n   * class Ng2 {\n   * }\n   *\n   * @NgModule({\n   *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n   *   imports: [BrowserModule]\n   * })\n   * class MyNg2Module {}\n   *\n   * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n   *   expect(document.body.textContent).toEqual(\n   *       \"ng2[ng1[Hello World!](transclude)](project)\");\n   * });\n   * ```\n   */\n  bootstrap(element: Element, modules?: any[], config?: angular.IAngularBootstrapConfig):\n      UpgradeAdapterRef {\n    this.declareNg1Module(modules);\n\n    const upgrade = new UpgradeAdapterRef();\n\n    // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n    const windowAngular = (window as any /** TODO #???? */)['angular'];\n    windowAngular.resumeBootstrap = undefined;\n\n    this.ngZone.run(() => { angular.bootstrap(element, [this.ng1Module.name], config !); });\n    const ng1BootstrapPromise = new Promise((resolve) => {\n      if (windowAngular.resumeBootstrap) {\n        const originalResumeBootstrap: () => void = windowAngular.resumeBootstrap;\n        windowAngular.resumeBootstrap = function() {\n          windowAngular.resumeBootstrap = originalResumeBootstrap;\n          const r = windowAngular.resumeBootstrap.apply(this, arguments);\n          resolve();\n          return r;\n        };\n      } else {\n        resolve();\n      }\n    });\n\n    Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(([ng1Injector]) => {\n      angular.element(element).data !(controllerKey(INJECTOR_KEY), this.moduleRef !.injector);\n      this.moduleRef !.injector.get<NgZone>(NgZone).run(\n          () => { (<any>upgrade)._bootstrapDone(this.moduleRef, ng1Injector); });\n    }, onError);\n    return upgrade;\n  }\n\n  /**\n   * Allows AngularJS service to be accessible from Angular.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```\n   * class Login { ... }\n   * class Server { ... }\n   *\n   * @Injectable()\n   * class Example {\n   *   constructor(@Inject('server') server, login: Login) {\n   *     ...\n   *   }\n   * }\n   *\n   * const module = angular.module('myExample', []);\n   * module.service('server', Server);\n   * module.service('login', Login);\n   *\n   * const adapter = new UpgradeAdapter(MyNg2Module);\n   * adapter.upgradeNg1Provider('server');\n   * adapter.upgradeNg1Provider('login', {asToken: Login});\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n   *   const example: Example = ref.ng2Injector.get(Example);\n   * });\n   *\n   * ```\n   */\n  upgradeNg1Provider(name: string, options?: {asToken: any}) {\n    const token = options && options.asToken || name;\n    this.upgradedProviders.push({\n      provide: token,\n      useFactory: ($injector: angular.IInjectorService) => $injector.get(name),\n      deps: [$INJECTOR]\n    });\n  }\n\n  /**\n   * Allows Angular service to be accessible from AngularJS.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```\n   * class Example {\n   * }\n   *\n   * const adapter = new UpgradeAdapter(MyNg2Module);\n   *\n   * const module = angular.module('myExample', []);\n   * module.factory('example', adapter.downgradeNg2Provider(Example));\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n   *   const example: Example = ref.ng1Injector.get('example');\n   * });\n   *\n   * ```\n   */\n  downgradeNg2Provider(token: any): Function { return downgradeInjectable(token); }\n\n  /**\n   * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n   * hybrid application.\n   *\n   * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n   *\n   * @param modules The AngularJS modules that this upgrade module should depend upon.\n   * @returns The AngularJS upgrade module that is declared by this method\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * ```\n   * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n   * upgradeAdapter.declareNg1Module(['heroApp']);\n   * ```\n   */\n  private declareNg1Module(modules: string[] = []): angular.IModule {\n    const delayApplyExps: Function[] = [];\n    let original$applyFn: Function;\n    let rootScopePrototype: any;\n    let rootScope: angular.IRootScopeService;\n    const upgradeAdapter = this;\n    const ng1Module = this.ng1Module = angular.module(this.idPrefix, modules);\n    const platformRef = platformBrowserDynamic();\n\n    this.ngZone = new NgZone({enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec')});\n    this.ng2BootstrapDeferred = new Deferred();\n    ng1Module.factory(INJECTOR_KEY, () => this.moduleRef !.injector.get(Injector))\n        .factory(\n            LAZY_MODULE_REF,\n            [\n              INJECTOR_KEY,\n              (injector: Injector) => ({ injector, needsNgZone: false } as LazyModuleRef)\n            ])\n        .constant(NG_ZONE_KEY, this.ngZone)\n        .factory(COMPILER_KEY, () => this.moduleRef !.injector.get(Compiler))\n        .config([\n          '$provide', '$injector',\n          (provide: angular.IProvideService, ng1Injector: angular.IInjectorService) => {\n            provide.decorator($ROOT_SCOPE, [\n              '$delegate',\n              function(rootScopeDelegate: angular.IRootScopeService) {\n                // Capture the root apply so that we can delay first call to $apply until we\n                // bootstrap Angular and then we replay and restore the $apply.\n                rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                if (rootScopePrototype.hasOwnProperty('$apply')) {\n                  original$applyFn = rootScopePrototype.$apply;\n                  rootScopePrototype.$apply = (exp: any) => delayApplyExps.push(exp);\n                } else {\n                  throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                }\n                return rootScope = rootScopeDelegate;\n              }\n            ]);\n            if (ng1Injector.has($$TESTABILITY)) {\n              provide.decorator($$TESTABILITY, [\n                '$delegate',\n                function(testabilityDelegate: angular.ITestabilityService) {\n                  const originalWhenStable: Function = testabilityDelegate.whenStable;\n                  // Cannot use arrow function below because we need the context\n                  const newWhenStable = function(callback: Function) {\n                    originalWhenStable.call(this, function() {\n                      const ng2Testability: Testability =\n                          upgradeAdapter.moduleRef !.injector.get(Testability);\n                      if (ng2Testability.isStable()) {\n                        callback.apply(this, arguments);\n                      } else {\n                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                      }\n                    });\n                  };\n\n                  testabilityDelegate.whenStable = newWhenStable;\n                  return testabilityDelegate;\n                }\n              ]);\n            }\n          }\n        ]);\n\n    ng1Module.run([\n      '$injector', '$rootScope',\n      (ng1Injector: angular.IInjectorService, rootScope: angular.IRootScopeService) => {\n        UpgradeNg1ComponentAdapterBuilder.resolve(this.ng1ComponentsToBeUpgraded, ng1Injector)\n            .then(() => {\n              // Note: There is a bug in TS 2.4 that prevents us from\n              // inlining this into @NgModule\n              // TODO(tbosch): find or file a bug against TypeScript for this.\n              const ngModule = {\n                providers: [\n                  {provide: $INJECTOR, useFactory: () => ng1Injector},\n                  {provide: $COMPILE, useFactory: () => ng1Injector.get($COMPILE)},\n                  this.upgradedProviders\n                ],\n                imports: [this.ng2AppModule],\n                entryComponents: this.downgradedComponents\n              };\n              // At this point we have ng1 injector and we have prepared\n              // ng1 components to be upgraded, we now can bootstrap ng2.\n              @NgModule({jit: true, ...ngModule})\n              class DynamicNgUpgradeModule {\n                constructor() {}\n                ngDoBootstrap() {}\n              }\n              platformRef\n                  .bootstrapModule(\n                      DynamicNgUpgradeModule, [this.compilerOptions !, {ngZone: this.ngZone}])\n                  .then((ref: NgModuleRef<any>) => {\n                    this.moduleRef = ref;\n                    this.ngZone.run(() => {\n                      if (rootScopePrototype) {\n                        rootScopePrototype.$apply = original$applyFn;  // restore original $apply\n                        while (delayApplyExps.length) {\n                          rootScope.$apply(delayApplyExps.shift());\n                        }\n                        rootScopePrototype = null;\n                      }\n                    });\n                  })\n                  .then(() => this.ng2BootstrapDeferred.resolve(ng1Injector), onError)\n                  .then(() => {\n                    let subscription =\n                        this.ngZone.onMicrotaskEmpty.subscribe({next: () => rootScope.$digest()});\n                    rootScope.$on('$destroy', () => { subscription.unsubscribe(); });\n                  });\n            })\n            .catch((e) => this.ng2BootstrapDeferred.reject(e));\n      }\n    ]);\n\n    return ng1Module;\n  }\n}\n\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's $compile.\n */\nclass ParentInjectorPromise {\n  // TODO(issue/24571): remove '!'.\n  private injector !: Injector;\n  private callbacks: ((injector: Injector) => any)[] = [];\n\n  constructor(private element: angular.IAugmentedJQuery) {\n    // store the promise on the element\n    element.data !(controllerKey(INJECTOR_KEY), this);\n  }\n\n  then(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n\n  resolve(injector: Injector) {\n    this.injector = injector;\n\n    // reset the element data to point to the real injector\n    this.element.data !(controllerKey(INJECTOR_KEY), injector);\n\n    // clean out the element to prevent memory leaks\n    this.element = null !;\n\n    // run all the queued callbacks\n    this.callbacks.forEach((callback) => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\n\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nexport class UpgradeAdapterRef {\n  /* @internal */\n  private _readyFn: ((upgradeAdapterRef?: UpgradeAdapterRef) => void)|null = null;\n\n  public ng1RootScope: angular.IRootScopeService = null !;\n  public ng1Injector: angular.IInjectorService = null !;\n  public ng2ModuleRef: NgModuleRef<any> = null !;\n  public ng2Injector: Injector = null !;\n\n  /* @internal */\n  private _bootstrapDone(ngModuleRef: NgModuleRef<any>, ng1Injector: angular.IInjectorService) {\n    this.ng2ModuleRef = ngModuleRef;\n    this.ng2Injector = ngModuleRef.injector;\n    this.ng1Injector = ng1Injector;\n    this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n    this._readyFn && this._readyFn(this);\n  }\n\n  /**\n   * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n   * application has been bootstrapped.\n   *\n   * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n   * require a call to `$apply()`.\n   */\n  public ready(fn: (upgradeAdapterRef: UpgradeAdapterRef) => void) { this._readyFn = fn; }\n\n  /**\n   * Dispose of running hybrid AngularJS / Angular application.\n   */\n  public dispose() {\n    this.ng1Injector !.get($ROOT_SCOPE).$destroy();\n    this.ng2ModuleRef !.destroy();\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["module","angular.element","INITIAL_VALUE","element","angular.bootstrap","angular.module"],"mappings":"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"}
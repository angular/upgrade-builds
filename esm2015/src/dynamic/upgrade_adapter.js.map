{"version":3,"file":"upgrade_adapter.js","sourceRoot":"","sources":["../../../../../packages/upgrade/src/dynamic/upgrade_adapter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Compiler, CompilerOptions, Directive, Injector, NgModule, NgModuleRef, NgZone, StaticProvider, Testability, Type} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport * as angular from '../common/angular1';\nimport {$$TESTABILITY, $COMPILE, $INJECTOR, $ROOT_SCOPE, COMPILER_KEY, INJECTOR_KEY, LAZY_MODULE_REF, NG_ZONE_KEY} from '../common/constants';\nimport {downgradeComponent} from '../common/downgrade_component';\nimport {downgradeInjectable} from '../common/downgrade_injectable';\nimport {Deferred, LazyModuleRef, controllerKey, onError} from '../common/util';\n\nimport {UpgradeNg1ComponentAdapterBuilder} from './upgrade_ng1_adapter';\n\nlet upgradeCount: number = 0;\n\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * ## Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * @Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * @NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nexport class UpgradeAdapter {\n  private idPrefix: string = `NG2_UPGRADE_${upgradeCount++}_`;\n  private downgradedComponents: Type<any>[] = [];\n  /**\n   * An internal map of ng1 components which need to up upgraded to ng2.\n   *\n   * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n   * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n   *\n   * @internal\n   */\n  private ng1ComponentsToBeUpgraded: {[name: string]: UpgradeNg1ComponentAdapterBuilder} = {};\n  private upgradedProviders: StaticProvider[] = [];\n  private ngZone: NgZone;\n  private ng1Module: angular.IModule;\n  private moduleRef: NgModuleRef<any>|null = null;\n  private ng2BootstrapDeferred: Deferred<angular.IInjectorService>;\n\n  constructor(private ng2AppModule: Type<any>, private compilerOptions?: CompilerOptions) {\n    if (!ng2AppModule) {\n      throw new Error(\n          'UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n    }\n  }\n\n  /**\n   * Allows Angular Component to be used from AngularJS.\n   *\n   * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n   * Angular Component. The adapter will bootstrap Angular component from within the\n   * AngularJS template.\n   *\n   * ## Mental Model\n   *\n   * 1. The component is instantiated by being listed in AngularJS template. This means that the\n   *    host element is controlled by AngularJS, but the component's view will be controlled by\n   *    Angular.\n   * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n   *    syntax. This has to be done, this way because we must follow Angular components do not\n   *    declare how the attributes should be interpreted.\n   * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n   *    by way of the `ControlValueAccessor` interface from @angular/forms. Only components that\n   *    implement this interface are eligible.\n   *\n   * ## Supported Features\n   *\n   * - Bindings:\n   *   - Attribute: `<comp name=\"World\">`\n   *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n   *   - Expression:  `<comp [name]=\"username\">`\n   *   - Event:  `<comp (close)=\"doSomething()\">`\n   *   - ng-model: `<comp ng-model=\"name\">`\n   * - Content projection: yes\n   *\n   * ### Example\n   *\n   * ```\n   * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n   * const module = angular.module('myExample', []);\n   * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n   *\n   * @Component({\n   *   selector: 'greet',\n   *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n   * })\n   * class Greeter {\n   *   @Input() salutation: string;\n   *   @Input() name: string;\n   * }\n   *\n   * @NgModule({\n   *   declarations: [Greeter],\n   *   imports: [BrowserModule]\n   * })\n   * class MyNg2Module {}\n   *\n   * document.body.innerHTML =\n   *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n   *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n   * });\n   * ```\n   */\n  downgradeNg2Component(component: Type<any>): Function {\n    this.downgradedComponents.push(component);\n\n    return downgradeComponent({component});\n  }\n\n  /**\n   * Allows AngularJS Component to be used from Angular.\n   *\n   * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n   * directive. The adapter will bootstrap AngularJS component from within the Angular\n   * template.\n   *\n   * ## Mental Model\n   *\n   * 1. The component is instantiated by being listed in Angular template. This means that the\n   *    host element is controlled by Angular, but the component's view will be controlled by\n   *    AngularJS.\n   *\n   * ## Supported Features\n   *\n   * - Bindings:\n   *   - Attribute: `<comp name=\"World\">`\n   *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n   *   - Expression:  `<comp [name]=\"username\">`\n   *   - Event:  `<comp (close)=\"doSomething()\">`\n   * - Transclusion: yes\n   * - Only some of the features of\n   *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n   *   supported:\n   *   - `compile`: not supported because the host element is owned by Angular, which does\n   *     not allow modifying DOM structure during compilation.\n   *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n   *   - `controllerAs`: supported.\n   *   - `bindToController`: supported.\n   *   - `link`: supported. (NOTE: only pre-link function is supported.)\n   *   - `name`: supported.\n   *   - `priority`: ignored.\n   *   - `replace`: not supported.\n   *   - `require`: supported.\n   *   - `restrict`: must be set to 'E'.\n   *   - `scope`: supported.\n   *   - `template`: supported.\n   *   - `templateUrl`: supported.\n   *   - `terminal`: ignored.\n   *   - `transclude`: supported.\n   *\n   *\n   * ### Example\n   *\n   * ```\n   * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n   * const module = angular.module('myExample', []);\n   *\n   * module.directive('greet', function() {\n   *   return {\n   *     scope: {salutation: '=', name: '=' },\n   *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n   *   };\n   * });\n   *\n   * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n   *\n   * @Component({\n   *   selector: 'ng2',\n   *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n   * })\n   * class Ng2Component {\n   * }\n   *\n   * @NgModule({\n   *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n   *   imports: [BrowserModule]\n   * })\n   * class MyNg2Module {}\n   *\n   * document.body.innerHTML = '<ng2></ng2>';\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n   *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n   * });\n   * ```\n   */\n  upgradeNg1Component(name: string): Type<any> {\n    if ((<any>this.ng1ComponentsToBeUpgraded).hasOwnProperty(name)) {\n      return this.ng1ComponentsToBeUpgraded[name].type;\n    } else {\n      return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n          .type;\n    }\n  }\n\n  /**\n   * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n   * Use this instead of `angular.mock.module()` to load the upgrade module into\n   * the AngularJS testing injector.\n   *\n   * ### Example\n   *\n   * ```\n   * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n   *\n   * // configure the adapter with upgrade/downgrade components and services\n   * upgradeAdapter.downgradeNg2Component(MyComponent);\n   *\n   * let upgradeAdapterRef: UpgradeAdapterRef;\n   * let $compile, $rootScope;\n   *\n   * // We must register the adapter before any calls to `inject()`\n   * beforeEach(() => {\n   *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n   * });\n   *\n   * beforeEach(inject((_$compile_, _$rootScope_) => {\n   *   $compile = _$compile_;\n   *   $rootScope = _$rootScope_;\n   * }));\n   *\n   * it(\"says hello\", (done) => {\n   *   upgradeAdapterRef.ready(() => {\n   *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n   *     $rootScope.$apply();\n   *     expect(element.html()).toContain(\"Hello World\");\n   *     done();\n   *   })\n   * });\n   *\n   * ```\n   *\n   * @param modules any AngularJS modules that the upgrade module should depend upon\n   * @returns an `UpgradeAdapterRef`, which lets you register a `ready()` callback to\n   * run assertions once the Angular components are ready to test through AngularJS.\n   */\n  registerForNg1Tests(modules?: string[]): UpgradeAdapterRef {\n    const windowNgMock = (window as any)['angular'].mock;\n    if (!windowNgMock || !windowNgMock.module) {\n      throw new Error('Failed to find \\'angular.mock.module\\'.');\n    }\n    this.declareNg1Module(modules);\n    windowNgMock.module(this.ng1Module.name);\n    const upgrade = new UpgradeAdapterRef();\n    this.ng2BootstrapDeferred.promise.then(\n        (ng1Injector) => { (<any>upgrade)._bootstrapDone(this.moduleRef, ng1Injector); }, onError);\n    return upgrade;\n  }\n\n  /**\n   * Bootstrap a hybrid AngularJS / Angular application.\n   *\n   * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n   * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n   * AngularJS, this bootstrap is asynchronous.\n   *\n   * ### Example\n   *\n   * ```\n   * const adapter = new UpgradeAdapter(MyNg2Module);\n   * const module = angular.module('myExample', []);\n   * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n   *\n   * module.directive('ng1', function() {\n   *   return {\n   *      scope: { title: '=' },\n   *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n   *   };\n   * });\n   *\n   *\n   * @Component({\n   *   selector: 'ng2',\n   *   inputs: ['name'],\n   *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n   * })\n   * class Ng2 {\n   * }\n   *\n   * @NgModule({\n   *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n   *   imports: [BrowserModule]\n   * })\n   * class MyNg2Module {}\n   *\n   * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n   *   expect(document.body.textContent).toEqual(\n   *       \"ng2[ng1[Hello World!](transclude)](project)\");\n   * });\n   * ```\n   */\n  bootstrap(element: Element, modules?: any[], config?: angular.IAngularBootstrapConfig):\n      UpgradeAdapterRef {\n    this.declareNg1Module(modules);\n\n    const upgrade = new UpgradeAdapterRef();\n\n    // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n    const windowAngular = (window as any /** TODO #???? */)['angular'];\n    windowAngular.resumeBootstrap = undefined;\n\n    this.ngZone.run(() => { angular.bootstrap(element, [this.ng1Module.name], config !); });\n    const ng1BootstrapPromise = new Promise((resolve) => {\n      if (windowAngular.resumeBootstrap) {\n        const originalResumeBootstrap: () => void = windowAngular.resumeBootstrap;\n        windowAngular.resumeBootstrap = function() {\n          windowAngular.resumeBootstrap = originalResumeBootstrap;\n          const r = windowAngular.resumeBootstrap.apply(this, arguments);\n          resolve();\n          return r;\n        };\n      } else {\n        resolve();\n      }\n    });\n\n    Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(([ng1Injector]) => {\n      angular.element(element).data !(controllerKey(INJECTOR_KEY), this.moduleRef !.injector);\n      this.moduleRef !.injector.get<NgZone>(NgZone).run(\n          () => { (<any>upgrade)._bootstrapDone(this.moduleRef, ng1Injector); });\n    }, onError);\n    return upgrade;\n  }\n\n  /**\n   * Allows AngularJS service to be accessible from Angular.\n   *\n   *\n   * ### Example\n   *\n   * ```\n   * class Login { ... }\n   * class Server { ... }\n   *\n   * @Injectable()\n   * class Example {\n   *   constructor(@Inject('server') server, login: Login) {\n   *     ...\n   *   }\n   * }\n   *\n   * const module = angular.module('myExample', []);\n   * module.service('server', Server);\n   * module.service('login', Login);\n   *\n   * const adapter = new UpgradeAdapter(MyNg2Module);\n   * adapter.upgradeNg1Provider('server');\n   * adapter.upgradeNg1Provider('login', {asToken: Login});\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n   *   const example: Example = ref.ng2Injector.get(Example);\n   * });\n   *\n   * ```\n   */\n  upgradeNg1Provider(name: string, options?: {asToken: any}) {\n    const token = options && options.asToken || name;\n    this.upgradedProviders.push({\n      provide: token,\n      useFactory: ($injector: angular.IInjectorService) => $injector.get(name),\n      deps: [$INJECTOR]\n    });\n  }\n\n  /**\n   * Allows Angular service to be accessible from AngularJS.\n   *\n   *\n   * ### Example\n   *\n   * ```\n   * class Example {\n   * }\n   *\n   * const adapter = new UpgradeAdapter(MyNg2Module);\n   *\n   * const module = angular.module('myExample', []);\n   * module.factory('example', adapter.downgradeNg2Provider(Example));\n   *\n   * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n   *   const example: Example = ref.ng1Injector.get('example');\n   * });\n   *\n   * ```\n   */\n  downgradeNg2Provider(token: any): Function { return downgradeInjectable(token); }\n\n  /**\n   * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n   * hybrid application.\n   *\n   * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n   *\n   * @param modules The AngularJS modules that this upgrade module should depend upon.\n   * @returns The AngularJS upgrade module that is declared by this method\n   *\n   * ### Example\n   *\n   * ```\n   * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n   * upgradeAdapter.declareNg1Module(['heroApp']);\n   * ```\n   */\n  private declareNg1Module(modules: string[] = []): angular.IModule {\n    const delayApplyExps: Function[] = [];\n    let original$applyFn: Function;\n    let rootScopePrototype: any;\n    let rootScope: angular.IRootScopeService;\n    const upgradeAdapter = this;\n    const ng1Module = this.ng1Module = angular.module(this.idPrefix, modules);\n    const platformRef = platformBrowserDynamic();\n\n    this.ngZone = new NgZone({enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec')});\n    this.ng2BootstrapDeferred = new Deferred();\n    ng1Module.factory(INJECTOR_KEY, () => this.moduleRef !.injector.get(Injector))\n        .factory(\n            LAZY_MODULE_REF,\n            [\n              INJECTOR_KEY,\n              (injector: Injector) => ({ injector, needsNgZone: false } as LazyModuleRef)\n            ])\n        .constant(NG_ZONE_KEY, this.ngZone)\n        .factory(COMPILER_KEY, () => this.moduleRef !.injector.get(Compiler))\n        .config([\n          '$provide', '$injector',\n          (provide: angular.IProvideService, ng1Injector: angular.IInjectorService) => {\n            provide.decorator($ROOT_SCOPE, [\n              '$delegate',\n              function(rootScopeDelegate: angular.IRootScopeService) {\n                // Capture the root apply so that we can delay first call to $apply until we\n                // bootstrap Angular and then we replay and restore the $apply.\n                rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                if (rootScopePrototype.hasOwnProperty('$apply')) {\n                  original$applyFn = rootScopePrototype.$apply;\n                  rootScopePrototype.$apply = (exp: any) => delayApplyExps.push(exp);\n                } else {\n                  throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                }\n                return rootScope = rootScopeDelegate;\n              }\n            ]);\n            if (ng1Injector.has($$TESTABILITY)) {\n              provide.decorator($$TESTABILITY, [\n                '$delegate',\n                function(testabilityDelegate: angular.ITestabilityService) {\n                  const originalWhenStable: Function = testabilityDelegate.whenStable;\n                  // Cannot use arrow function below because we need the context\n                  const newWhenStable = function(callback: Function) {\n                    originalWhenStable.call(this, function() {\n                      const ng2Testability: Testability =\n                          upgradeAdapter.moduleRef !.injector.get(Testability);\n                      if (ng2Testability.isStable()) {\n                        callback.apply(this, arguments);\n                      } else {\n                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                      }\n                    });\n                  };\n\n                  testabilityDelegate.whenStable = newWhenStable;\n                  return testabilityDelegate;\n                }\n              ]);\n            }\n          }\n        ]);\n\n    ng1Module.run([\n      '$injector', '$rootScope',\n      (ng1Injector: angular.IInjectorService, rootScope: angular.IRootScopeService) => {\n        UpgradeNg1ComponentAdapterBuilder.resolve(this.ng1ComponentsToBeUpgraded, ng1Injector)\n            .then(() => {\n              // Note: There is a bug in TS 2.4 that prevents us from\n              // inlining this into @NgModule\n              // TODO(tbosch): find or file a bug against TypeScript for this.\n              const ngModule = {\n                providers: [\n                  {provide: $INJECTOR, useFactory: () => ng1Injector},\n                  {provide: $COMPILE, useFactory: () => ng1Injector.get($COMPILE)},\n                  this.upgradedProviders\n                ],\n                imports: [this.ng2AppModule],\n                entryComponents: this.downgradedComponents\n              };\n              // At this point we have ng1 injector and we have prepared\n              // ng1 components to be upgraded, we now can bootstrap ng2.\n              @NgModule(ngModule)\n              class DynamicNgUpgradeModule {\n                constructor() {}\n                ngDoBootstrap() {}\n              }\n              platformRef\n                  .bootstrapModule(\n                      DynamicNgUpgradeModule, [this.compilerOptions !, {ngZone: this.ngZone}])\n                  .then((ref: NgModuleRef<any>) => {\n                    this.moduleRef = ref;\n                    this.ngZone.run(() => {\n                      if (rootScopePrototype) {\n                        rootScopePrototype.$apply = original$applyFn;  // restore original $apply\n                        while (delayApplyExps.length) {\n                          rootScope.$apply(delayApplyExps.shift());\n                        }\n                        rootScopePrototype = null;\n                      }\n                    });\n                  })\n                  .then(() => this.ng2BootstrapDeferred.resolve(ng1Injector), onError)\n                  .then(() => {\n                    let subscription =\n                        this.ngZone.onMicrotaskEmpty.subscribe({next: () => rootScope.$digest()});\n                    rootScope.$on('$destroy', () => { subscription.unsubscribe(); });\n                  });\n            })\n            .catch((e) => this.ng2BootstrapDeferred.reject(e));\n      }\n    ]);\n\n    return ng1Module;\n  }\n}\n\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's $compile.\n */\nclass ParentInjectorPromise {\n  private injector: Injector;\n  private callbacks: ((injector: Injector) => any)[] = [];\n\n  constructor(private element: angular.IAugmentedJQuery) {\n    // store the promise on the element\n    element.data !(controllerKey(INJECTOR_KEY), this);\n  }\n\n  then(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n\n  resolve(injector: Injector) {\n    this.injector = injector;\n\n    // reset the element data to point to the real injector\n    this.element.data !(controllerKey(INJECTOR_KEY), injector);\n\n    // clean out the element to prevent memory leaks\n    this.element = null !;\n\n    // run all the queued callbacks\n    this.callbacks.forEach((callback) => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\n\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nexport class UpgradeAdapterRef {\n  /* @internal */\n  private _readyFn: ((upgradeAdapterRef?: UpgradeAdapterRef) => void)|null = null;\n\n  public ng1RootScope: angular.IRootScopeService = null !;\n  public ng1Injector: angular.IInjectorService = null !;\n  public ng2ModuleRef: NgModuleRef<any> = null !;\n  public ng2Injector: Injector = null !;\n\n  /* @internal */\n  private _bootstrapDone(ngModuleRef: NgModuleRef<any>, ng1Injector: angular.IInjectorService) {\n    this.ng2ModuleRef = ngModuleRef;\n    this.ng2Injector = ngModuleRef.injector;\n    this.ng1Injector = ng1Injector;\n    this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n    this._readyFn && this._readyFn(this);\n  }\n\n  /**\n   * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n   * application has been bootstrapped.\n   *\n   * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n   * require a call to `$apply()`.\n   */\n  public ready(fn: (upgradeAdapterRef: UpgradeAdapterRef) => void) { this._readyFn = fn; }\n\n  /**\n   * Dispose of running hybrid AngularJS / Angular application.\n   */\n  public dispose() {\n    this.ng1Injector !.get($ROOT_SCOPE).$destroy();\n    this.ng2ModuleRef !.destroy();\n  }\n}\n"]}
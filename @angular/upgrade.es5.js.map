{"version":3,"file":"upgrade.es5.js","sources":["../../../../packages/upgrade/src/dynamic/upgrade_adapter.ts","../../../../packages/upgrade/public_api.ts","../../../../packages/upgrade/src/dynamic/upgrade_ng1_adapter.ts","../../../../packages/upgrade/src/common/upgrade_helper.ts","../../../../packages/upgrade/src/common/downgrade_injectable.ts","../../../../packages/upgrade/src/common/downgrade_component.ts","../../../../packages/upgrade/src/common/downgrade_component_adapter.ts","../../../../packages/upgrade/src/common/util.ts","../../../../packages/upgrade/src/common/component_info.ts","../../../../packages/upgrade/src/common/constants.ts","../../../../packages/upgrade/src/common/angular1.ts","../../../../packages/upgrade/src/common/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Compiler, CompilerOptions, Directive, Injector, NgModule, NgModuleRef, NgZone, Provider, Testability, Type} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport * as angular from '../common/angular1';\nimport {$$TESTABILITY, $COMPILE, $INJECTOR, $ROOT_SCOPE, COMPILER_KEY, INJECTOR_KEY, LAZY_MODULE_REF, NG_ZONE_KEY} from '../common/constants';\nimport {downgradeComponent} from '../common/downgrade_component';\nimport {downgradeInjectable} from '../common/downgrade_injectable';\nimport {Deferred, controllerKey, onError} from '../common/util';\n\nimport {UpgradeNg1ComponentAdapterBuilder} from './upgrade_ng1_adapter';\n\nlet /** @type {?} */ upgradeCount: number = 0;\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n * \n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n * \n * ## Mental Model\n * \n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n * \n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n * \n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n * \n * \n * \\@Component({ \n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * \n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n * \n * ```\n * \n * \\@stable\n */\nexport class UpgradeAdapter {\nprivate idPrefix: string = `NG2_UPGRADE_${upgradeCount++}_`;\nprivate downgradedComponents: Type<any>[] = [];\n/**\n * An internal map of ng1 components which need to up upgraded to ng2.\n * \n * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n * \n * \\@internal\n */\nprivate ng1ComponentsToBeUpgraded: {[name: string]: UpgradeNg1ComponentAdapterBuilder} = {};\nprivate upgradedProviders: Provider[] = [];\nprivate ngZone: NgZone;\nprivate ng1Module: angular.IModule;\nprivate moduleRef: NgModuleRef<any>|null = null;\nprivate ng2BootstrapDeferred: Deferred<angular.IInjectorService>;\n/**\n * @param {?} ng2AppModule\n * @param {?=} compilerOptions\n */\nconstructor(private ng2AppModule: Type<any>,\nprivate compilerOptions?: CompilerOptions) {\n    if (!ng2AppModule) {\n      throw new Error(\n          'UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n    }\n  }\n/**\n * Allows Angular Component to be used from AngularJS.\n * \n * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n * Angular Component. The adapter will bootstrap Angular component from within the\n * AngularJS template.\n * \n * ## Mental Model\n * \n * 1. The component is instantiated by being listed in AngularJS template. This means that the\n *    host element is controlled by AngularJS, but the component's view will be controlled by\n *    Angular.\n * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n *    syntax. This has to be done, this way because we must follow Angular components do not\n *    declare how the attributes should be interpreted.\n * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n *    by way of the `ControlValueAccessor` interface from \\@angular/forms. Only components that\n *    implement this interface are eligible.\n * \n * ## Supported Features\n * \n * - Bindings:\n *   - Attribute: `<comp name=\"World\">`\n *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n *   - Expression:  `<comp [name]=\"username\">`\n *   - Event:  `<comp (close)=\"doSomething()\">`\n *   - ng-model: `<comp ng-model=\"name\">`\n * - Content projection: yes\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n * const module = angular.module('myExample', []);\n * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n * \n * \\@Component({ \n *   selector: 'greet',\n *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n * })\n * class Greeter {\n *   \\@Input() salutation: string;\n *   \\@Input() name: string;\n * }\n * \n * \\@NgModule({ \n *   declarations: [Greeter],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML =\n *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n * });\n * ```\n * @param {?} component\n * @return {?}\n */\ndowngradeNg2Component(component: Type<any>): Function {\n    this.downgradedComponents.push(component);\n\n    return downgradeComponent({component});\n  }\n/**\n * Allows AngularJS Component to be used from Angular.\n * \n * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n * directive. The adapter will bootstrap AngularJS component from within the Angular\n * template.\n * \n * ## Mental Model\n * \n * 1. The component is instantiated by being listed in Angular template. This means that the\n *    host element is controlled by Angular, but the component's view will be controlled by\n *    AngularJS.\n * \n * ## Supported Features\n * \n * - Bindings:\n *   - Attribute: `<comp name=\"World\">`\n *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n *   - Expression:  `<comp [name]=\"username\">`\n *   - Event:  `<comp (close)=\"doSomething()\">`\n * - Transclusion: yes\n * - Only some of the features of\n *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n *   supported:\n *   - `compile`: not supported because the host element is owned by Angular, which does\n *     not allow modifying DOM structure during compilation.\n *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n *   - `controllerAs`: supported.\n *   - `bindToController`: supported.\n *   - `link`: supported. (NOTE: only pre-link function is supported.)\n *   - `name`: supported.\n *   - `priority`: ignored.\n *   - `replace`: not supported.\n *   - `require`: supported.\n *   - `restrict`: must be set to 'E'.\n *   - `scope`: supported.\n *   - `template`: supported.\n *   - `templateUrl`: supported.\n *   - `terminal`: ignored.\n *   - `transclude`: supported.\n * \n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n * const module = angular.module('myExample', []);\n * \n * module.directive('greet', function() {\n *   return {\n *     scope: {salutation: '=', name: '=' },\n *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n *   };\n * });\n * \n * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n * \n * \\@Component({ \n *   selector: 'ng2',\n *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n * })\n * class Ng2Component {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML = '<ng2></ng2>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n * });\n * ```\n * @param {?} name\n * @return {?}\n */\nupgradeNg1Component(name: string): Type<any> {\n    if (( /** @type {?} */((<any>this.ng1ComponentsToBeUpgraded))).hasOwnProperty(name)) {\n      return this.ng1ComponentsToBeUpgraded[name].type;\n    } else {\n      return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n          .type;\n    }\n  }\n/**\n * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n * Use this instead of `angular.mock.module()` to load the upgrade module into\n * the AngularJS testing injector.\n * \n * ### Example\n * \n * ```\n * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n * \n * // configure the adapter with upgrade/downgrade components and services\n * upgradeAdapter.downgradeNg2Component(MyComponent);\n * \n * let upgradeAdapterRef: UpgradeAdapterRef;\n * let $compile, $rootScope;\n * \n * // We must register the adapter before any calls to `inject()`\n * beforeEach(() => {\n *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n * });\n * \n * beforeEach(inject((_$compile_, _$rootScope_) => {\n *   $compile = _$compile_;\n *   $rootScope = _$rootScope_;\n * }));\n * \n * it(\"says hello\", (done) => {\n *   upgradeAdapterRef.ready(() => {\n *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n *     $rootScope.$apply();\n *     expect(element.html()).toContain(\"Hello World\");\n *     done();\n *   })\n * });\n * \n * ```\n * \n * @param {?=} modules any AngularJS modules that the upgrade module should depend upon\n * @return {?} an {\\@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n * run assertions once the Angular components are ready to test through AngularJS.\n */\nregisterForNg1Tests(modules?: string[]): UpgradeAdapterRef {\n    const /** @type {?} */ windowNgMock = ( /** @type {?} */((window as any)))['angular'].mock;\n    if (!windowNgMock || !windowNgMock.module) {\n      throw new Error('Failed to find \\'angular.mock.module\\'.');\n    }\n    this.declareNg1Module(modules);\n    windowNgMock.module(this.ng1Module.name);\n    const /** @type {?} */ upgrade = new UpgradeAdapterRef();\n    this.ng2BootstrapDeferred.promise.then(\n        (ng1Injector) => { ( /** @type {?} */((<any>upgrade)))._bootstrapDone(this.moduleRef, ng1Injector); }, onError);\n    return upgrade;\n  }\n/**\n * Bootstrap a hybrid AngularJS / Angular application.\n * \n * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n * AngularJS, this bootstrap is asynchronous.\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(MyNg2Module);\n * const module = angular.module('myExample', []);\n * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n * \n * module.directive('ng1', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n * \n * \n * \\@Component({ \n *   selector: 'ng2',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n * })\n * class Ng2 {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n * ```\n * @param {?} element\n * @param {?=} modules\n * @param {?=} config\n * @return {?}\n */\nbootstrap(element: Element, modules?: any[], config?: angular.IAngularBootstrapConfig):\n      UpgradeAdapterRef {\n    this.declareNg1Module(modules);\n\n    const /** @type {?} */ upgrade = new UpgradeAdapterRef();\n\n    // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n    const /** @type {?} */ windowAngular = ( /** @type {?} */((window as any)) /** TODO #???? */)['angular'];\n    windowAngular.resumeBootstrap = undefined;\n\n    this.ngZone.run(() => { angular.bootstrap(element, [this.ng1Module.name], /** @type {?} */(( config))); });\n    const /** @type {?} */ ng1BootstrapPromise = new Promise((resolve) => {\n      if (windowAngular.resumeBootstrap) {\n        const /** @type {?} */ originalResumeBootstrap: () => void = windowAngular.resumeBootstrap;\n        windowAngular.resumeBootstrap = function() {\n          windowAngular.resumeBootstrap = originalResumeBootstrap;\n          windowAngular.resumeBootstrap.apply(this, arguments);\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n    });\n\n    Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(([ng1Injector]) => { /** @type {?} */((\n      angular.element(element).data))(controllerKey(INJECTOR_KEY), /** @type {?} */(( this.moduleRef)).injector); /** @type {?} */((\n      this.moduleRef)).injector.get(NgZone).run(\n          () => { ( /** @type {?} */((<any>upgrade)))._bootstrapDone(this.moduleRef, ng1Injector); });\n    }, onError);\n    return upgrade;\n  }\n/**\n * Allows AngularJS service to be accessible from Angular.\n * \n * \n * ### Example\n * \n * ```\n * class Login { ... }\n * class Server { ... }\n * \n * \\@Injectable() \n * class Example {\n *   constructor(\\@Inject('server') server, login: Login) {\n *     ...\n *   }\n * }\n * \n * const module = angular.module('myExample', []);\n * module.service('server', Server);\n * module.service('login', Login);\n * \n * const adapter = new UpgradeAdapter(MyNg2Module);\n * adapter.upgradeNg1Provider('server');\n * adapter.upgradeNg1Provider('login', {asToken: Login});\n * \n * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n *   const example: Example = ref.ng2Injector.get(Example);\n * });\n * \n * ```\n * @param {?} name\n * @param {?=} options\n * @return {?}\n */\nupgradeNg1Provider(name: string, options?: {asToken: any}) {\n    const /** @type {?} */ token = options && options.asToken || name;\n    this.upgradedProviders.push({\n      provide: token,\n      useFactory: ($injector: angular.IInjectorService) => $injector.get(name),\n      deps: [$INJECTOR]\n    });\n  }\n/**\n * Allows Angular service to be accessible from AngularJS.\n * \n * \n * ### Example\n * \n * ```\n * class Example {\n * }\n * \n * const adapter = new UpgradeAdapter(MyNg2Module);\n * \n * const module = angular.module('myExample', []);\n * module.factory('example', adapter.downgradeNg2Provider(Example));\n * \n * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n *   const example: Example = ref.ng1Injector.get('example');\n * });\n * \n * ```\n * @param {?} token\n * @return {?}\n */\ndowngradeNg2Provider(token: any): Function { return downgradeInjectable(token); }\n/**\n * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n * hybrid application.\n * \n * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n * \n * @param {?=} modules The AngularJS modules that this upgrade module should depend upon.\n * @return {?} The AngularJS upgrade module that is declared by this method\n * \n * ### Example\n * \n * ```\n * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n * upgradeAdapter.declareNg1Module(['heroApp']);\n * ```\n */\nprivate declareNg1Module(modules: string[] = []): angular.IModule {\n    const /** @type {?} */ delayApplyExps: Function[] = [];\n    let /** @type {?} */ original$applyFn: Function;\n    let /** @type {?} */ rootScopePrototype: any;\n    let /** @type {?} */ rootScope: angular.IRootScopeService;\n    const /** @type {?} */ upgradeAdapter = this;\n    const /** @type {?} */ ng1Module = this.ng1Module = angular.module(this.idPrefix, modules);\n    const /** @type {?} */ platformRef = platformBrowserDynamic();\n\n    this.ngZone = new NgZone({enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec')});\n    this.ng2BootstrapDeferred = new Deferred();\n    ng1Module.factory(INJECTOR_KEY, () => /** @type {?} */(( this.moduleRef)).injector.get(Injector))\n        .factory(\n            LAZY_MODULE_REF,\n            [INJECTOR_KEY, (injector: Injector) => ({injector, needsInNgZone: false})])\n        .constant(NG_ZONE_KEY, this.ngZone)\n        .factory(COMPILER_KEY, () => /** @type {?} */(( this.moduleRef)).injector.get(Compiler))\n        .config([\n          '$provide', '$injector',\n          (provide: angular.IProvideService, ng1Injector: angular.IInjectorService) => {\n            provide.decorator($ROOT_SCOPE, [\n              '$delegate',\n              function(rootScopeDelegate: angular.IRootScopeService) {\n                // Capture the root apply so that we can delay first call to $apply until we\n                // bootstrap Angular and then we replay and restore the $apply.\n                rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                if (rootScopePrototype.hasOwnProperty('$apply')) {\n                  original$applyFn = rootScopePrototype.$apply;\n                  rootScopePrototype.$apply = (exp: any) => delayApplyExps.push(exp);\n                } else {\n                  throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                }\n                return rootScope = rootScopeDelegate;\n              }\n            ]);\n            if (ng1Injector.has($$TESTABILITY)) {\n              provide.decorator($$TESTABILITY, [\n                '$delegate',\n                function(testabilityDelegate: angular.ITestabilityService) {\n                  const /** @type {?} */ originalWhenStable: Function = testabilityDelegate.whenStable;\n                  // Cannot use arrow function below because we need the context\n                  const /** @type {?} */ newWhenStable = function(callback: Function) {\n                    originalWhenStable.call(this, function() {\n                      const /** @type {?} */ ng2Testability: Testability = /** @type {?} */((\n                          upgradeAdapter.moduleRef)).injector.get(Testability);\n                      if (ng2Testability.isStable()) {\n                        callback.apply(this, arguments);\n                      } else {\n                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                      }\n                    });\n                  };\n\n                  testabilityDelegate.whenStable = newWhenStable;\n                  return testabilityDelegate;\n                }\n              ]);\n            }\n          }\n        ]);\n\n    ng1Module.run([\n      '$injector', '$rootScope',\n      (ng1Injector: angular.IInjectorService, rootScope: angular.IRootScopeService) => {\n        UpgradeNg1ComponentAdapterBuilder.resolve(this.ng1ComponentsToBeUpgraded, ng1Injector)\n            .then(() => {\n              // At this point we have ng1 injector and we have prepared\n              // ng1 components to be upgraded, we now can bootstrap ng2.\n              const /** @type {?} */ DynamicNgUpgradeModule =\n                  NgModule({\n                    providers: [\n                      {provide: $INJECTOR, useFactory: () => ng1Injector},\n                      {provide: $COMPILE, useFactory: () => ng1Injector.get($COMPILE)},\n                      this.upgradedProviders\n                    ],\n                    imports: [this.ng2AppModule],\n                    entryComponents: this.downgradedComponents\n                  }).Class({\n                    constructor: function DynamicNgUpgradeModule() {},\n                    ngDoBootstrap: function() {}\n                  });\n              ( /** @type {?} */((platformRef as any)))\n                  ._bootstrapModuleWithZone(\n                      DynamicNgUpgradeModule, this.compilerOptions, this.ngZone)\n                  .then((ref: NgModuleRef<any>) => {\n                    this.moduleRef = ref;\n                    this.ngZone.run(() => {\n                      if (rootScopePrototype) {\n                        rootScopePrototype.$apply = original$applyFn;  // restore original $apply\n                        while (delayApplyExps.length) {\n                          rootScope.$apply(delayApplyExps.shift());\n                        }\n                        rootScopePrototype = null;\n                      }\n                    });\n                  })\n                  .then(() => this.ng2BootstrapDeferred.resolve(ng1Injector), onError)\n                  .then(() => {\n                    let /** @type {?} */ subscription =\n                        this.ngZone.onMicrotaskEmpty.subscribe({next: () => rootScope.$digest()});\n                    rootScope.$on('$destroy', () => { subscription.unsubscribe(); });\n                  });\n            })\n            .catch((e) => this.ng2BootstrapDeferred.reject(e));\n      }\n    ]);\n\n    return ng1Module;\n  }\n}\n\nfunction UpgradeAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeAdapter.prototype.idPrefix;\n/** @type {?} */\nUpgradeAdapter.prototype.downgradedComponents;\n/**\n * An internal map of ng1 components which need to up upgraded to ng2.\n * \n * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n * \n * \\@internal\n * @type {?}\n */\nUpgradeAdapter.prototype.ng1ComponentsToBeUpgraded;\n/** @type {?} */\nUpgradeAdapter.prototype.upgradedProviders;\n/** @type {?} */\nUpgradeAdapter.prototype.ngZone;\n/** @type {?} */\nUpgradeAdapter.prototype.ng1Module;\n/** @type {?} */\nUpgradeAdapter.prototype.moduleRef;\n/** @type {?} */\nUpgradeAdapter.prototype.ng2BootstrapDeferred;\n/** @type {?} */\nUpgradeAdapter.prototype.ng2AppModule;\n/** @type {?} */\nUpgradeAdapter.prototype.compilerOptions;\n}\n\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's $compile.\n */\nclass ParentInjectorPromise {\nprivate injector: Injector;\nprivate callbacks: ((injector: Injector) => any)[] = [];\n/**\n * @param {?} element\n */\nconstructor(private element: angular.IAugmentedJQuery) {\n    // store the promise on the element\n    element.data !(controllerKey(INJECTOR_KEY), this);\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nthen(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n/**\n * @param {?} injector\n * @return {?}\n */\nresolve(injector: Injector) {\n    this.injector = injector; /** @type {?} */((\n\n    // reset the element data to point to the real injector\n    this.element.data))(controllerKey(INJECTOR_KEY), injector);\n\n    // clean out the element to prevent memory leaks\n    this.element = /** @type {?} */(( null));\n\n    // run all the queued callbacks\n    this.callbacks.forEach((callback) => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\nfunction ParentInjectorPromise_tsickle_Closure_declarations() {\n/** @type {?} */\nParentInjectorPromise.prototype.injector;\n/** @type {?} */\nParentInjectorPromise.prototype.callbacks;\n/** @type {?} */\nParentInjectorPromise.prototype.element;\n}\n\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n * \n * \\@stable\n */\nexport class UpgradeAdapterRef {\nprivate _readyFn: ((upgradeAdapterRef?: UpgradeAdapterRef) => void)|null = null;\npublic ng1RootScope: angular.IRootScopeService = /** @type {?} */(( null));\npublic ng1Injector: angular.IInjectorService = /** @type {?} */(( null));\npublic ng2ModuleRef: NgModuleRef<any> = /** @type {?} */(( null));\npublic ng2Injector: Injector = /** @type {?} */(( null));\n/**\n * @param {?} ngModuleRef\n * @param {?} ng1Injector\n * @return {?}\n */\nprivate _bootstrapDone(ngModuleRef: NgModuleRef<any>, ng1Injector: angular.IInjectorService) {\n    this.ng2ModuleRef = ngModuleRef;\n    this.ng2Injector = ngModuleRef.injector;\n    this.ng1Injector = ng1Injector;\n    this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n    this._readyFn && this._readyFn(this);\n  }\n/**\n * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n * application has been bootstrapped.\n * \n * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n * require a call to `$apply()`.\n * @param {?} fn\n * @return {?}\n */\npublic ready(fn: (upgradeAdapterRef: UpgradeAdapterRef) => void) { this._readyFn = fn; }\n/**\n * Dispose of running hybrid AngularJS / Angular application.\n * @return {?}\n */\npublic dispose() { /** @type {?} */((\n    this.ng1Injector)).get($ROOT_SCOPE).$destroy(); /** @type {?} */((\n    this.ng2ModuleRef)).destroy();\n  }\n}\n\nfunction UpgradeAdapterRef_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeAdapterRef.prototype._readyFn;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng1RootScope;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng1Injector;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng2ModuleRef;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng2Injector;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the upgrade/dynamic package, allowing\n * Angular 1 and Angular 2+ to run side by side in the same application.\n */\nexport {VERSION} from './src/common/version';\nexport {UpgradeAdapter, UpgradeAdapterRef} from './src/dynamic/upgrade_adapter';\n\n// This file only re-exports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, DoCheck, ElementRef, EventEmitter, Inject, Injector, OnChanges, OnInit, SimpleChange, SimpleChanges, Type} from '@angular/core';\n\nimport * as angular from '../common/angular1';\nimport {$SCOPE} from '../common/constants';\nimport {IBindingDestination, IControllerInstance, UpgradeHelper} from '../common/upgrade_helper';\nimport {isFunction, strictEquals} from '../common/util';\n\n\nconst /** @type {?} */ CAMEL_CASE = /([A-Z])/g;\nconst /** @type {?} */ INITIAL_VALUE = {\n  __UNINITIALIZED__: true\n};\nconst /** @type {?} */ NOT_SUPPORTED: any = 'NOT_SUPPORTED';\nexport class UpgradeNg1ComponentAdapterBuilder {\n  type: Type<any>;\n  inputs: string[] = [];\n  inputsRename: string[] = [];\n  outputs: string[] = [];\n  outputsRename: string[] = [];\n  propertyOutputs: string[] = [];\n  checkProperties: string[] = [];\n  propertyMap: {[name: string]: string} = {};\n  directive: angular.IDirective|null = null;\n  template: string;\n/**\n * @param {?} name\n */\nconstructor(public name: string) {\n    const selector =\n        name.replace(CAMEL_CASE, (all: string, next: string) => '-' + next.toLowerCase());\n    const self = this;\n\n    this.type =\n        Directive({selector: selector, inputs: this.inputsRename, outputs: this.outputsRename})\n            .Class({\n              constructor: [\n                new Inject($SCOPE), Injector, ElementRef,\n                function(scope: angular.IScope, injector: Injector, elementRef: ElementRef) {\n                  const helper = new UpgradeHelper(injector, name, elementRef, this.directive);\n                  return new UpgradeNg1ComponentAdapter(\n                      helper, scope, self.template, self.inputs, self.outputs, self.propertyOutputs,\n                      self.checkProperties, self.propertyMap);\n                }\n              ],\n              ngOnInit: function() { /* needs to be here for ng2 to properly detect it */ },\n              ngOnChanges: function() { /* needs to be here for ng2 to properly detect it */ },\n              ngDoCheck: function() { /* needs to be here for ng2 to properly detect it */ },\n              ngOnDestroy: function() { /* needs to be here for ng2 to properly detect it */ },\n            });\n  }\n/**\n * @return {?}\n */\nextractBindings() {\n    const /** @type {?} */ btcIsObject = typeof /** @type {?} */(( this.directive)).bindToController === 'object';\n    if (btcIsObject && Object.keys( /** @type {?} */((this.directive)).scope).length) {\n      throw new Error(\n          `Binding definitions on scope and controller at the same time are not supported.`);\n    }\n\n    const /** @type {?} */ context = (btcIsObject) ? /** @type {?} */(( this.directive)).bindToController : /** @type {?} */(( this.directive)).scope;\n\n    if (typeof context == 'object') {\n      Object.keys(context).forEach(propName => {\n        const /** @type {?} */ definition = context[propName];\n        const /** @type {?} */ bindingType = definition.charAt(0);\n        const /** @type {?} */ bindingOptions = definition.charAt(1);\n        const /** @type {?} */ attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n\n        // QUESTION: What about `=*`? Ignore? Throw? Support?\n\n        const /** @type {?} */ inputName = `input_${attrName}`;\n        const /** @type {?} */ inputNameRename = `${inputName}: ${attrName}`;\n        const /** @type {?} */ outputName = `output_${attrName}`;\n        const /** @type {?} */ outputNameRename = `${outputName}: ${attrName}`;\n        const /** @type {?} */ outputNameRenameChange = `${outputNameRename}Change`;\n\n        switch (bindingType) {\n          case '@':\n          case '<':\n            this.inputs.push(inputName);\n            this.inputsRename.push(inputNameRename);\n            this.propertyMap[inputName] = propName;\n            break;\n          case '=':\n            this.inputs.push(inputName);\n            this.inputsRename.push(inputNameRename);\n            this.propertyMap[inputName] = propName;\n\n            this.outputs.push(outputName);\n            this.outputsRename.push(outputNameRenameChange);\n            this.propertyMap[outputName] = propName;\n\n            this.checkProperties.push(propName);\n            this.propertyOutputs.push(outputName);\n            break;\n          case '&':\n            this.outputs.push(outputName);\n            this.outputsRename.push(outputNameRename);\n            this.propertyMap[outputName] = propName;\n            break;\n          default:\n            let /** @type {?} */ json = JSON.stringify(context);\n            throw new Error(\n                `Unexpected mapping '${bindingType}' in '${json}' in '${this.name}' directive.`);\n        }\n      });\n    }\n  }\n/**\n * Upgrade ng1 components into Angular.\n * @param {?} exportedComponents\n * @param {?} $injector\n * @return {?}\n */\nstatic resolve(\n      exportedComponents: {[name: string]: UpgradeNg1ComponentAdapterBuilder},\n      $injector: angular.IInjectorService): Promise<string[]> {\n    const /** @type {?} */ promises = Object.keys(exportedComponents).map(name => {\n      const /** @type {?} */ exportedComponent = exportedComponents[name];\n      exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n      exportedComponent.extractBindings();\n\n      return Promise\n          .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n          .then(template => exportedComponent.template = template);\n    });\n\n    return Promise.all(promises);\n  }\n}\n\nfunction UpgradeNg1ComponentAdapterBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.type;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.inputs;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.inputsRename;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.outputs;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.outputsRename;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.propertyOutputs;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.checkProperties;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.propertyMap;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.directive;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.template;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.name;\n}\n\nclass UpgradeNg1ComponentAdapter implements OnInit, OnChanges, DoCheck {\nprivate controllerInstance: IControllerInstance|null = null;\n  destinationObj: IBindingDestination|null = null;\n  checkLastValues: any[] = [];\nprivate directive: angular.IDirective;\n  element: Element;\n  $element: any = null;\n  componentScope: angular.IScope;\n/**\n * @param {?} helper\n * @param {?} scope\n * @param {?} template\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} propOuts\n * @param {?} checkProperties\n * @param {?} propertyMap\n */\nconstructor(\nprivate helper: UpgradeHelper, scope: angular.IScope,\nprivate template: string,\nprivate inputs: string[],\nprivate outputs: string[],\nprivate propOuts: string[],\nprivate checkProperties: string[],\nprivate propertyMap: {[key: string]: string}) {\n    this.directive = helper.directive;\n    this.element = helper.element;\n    this.$element = helper.$element;\n    this.componentScope = scope.$new(!!this.directive.scope);\n\n    const controllerType = this.directive.controller;\n\n    if (this.directive.bindToController && controllerType) {\n      this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n      this.destinationObj = this.controllerInstance;\n    } else {\n      this.destinationObj = this.componentScope;\n    }\n\n    for (let i = 0; i < inputs.length; i++) {\n      (this as any)[inputs[i]] = null;\n    }\n    for (let j = 0; j < outputs.length; j++) {\n      const emitter = (this as any)[outputs[j]] = new EventEmitter<any>();\n      this.setComponentProperty(\n          outputs[j], (emitter => (value: any) => emitter.emit(value))(emitter));\n    }\n    for (let k = 0; k < propOuts.length; k++) {\n      this.checkLastValues.push(INITIAL_VALUE);\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    // Collect contents, insert and compile template\n    const /** @type {?} */ attachChildNodes: angular.ILinkFn|undefined = this.helper.prepareTransclusion();\n    const /** @type {?} */ linkFn = this.helper.compileTemplate(this.template);\n\n    // Instantiate controller (if not already done so)\n    const /** @type {?} */ controllerType = this.directive.controller;\n    const /** @type {?} */ bindToController = this.directive.bindToController;\n    if (controllerType && !bindToController) {\n      this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n    }\n\n    // Require other controllers\n    const /** @type {?} */ requiredControllers =\n        this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n\n    // Hook: $onInit\n    if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n      this.controllerInstance.$onInit();\n    }\n\n    // Linking\n    const /** @type {?} */ link = this.directive.link;\n    const /** @type {?} */ preLink = (typeof link == 'object') && ( /** @type {?} */((link as angular.IDirectivePrePost))).pre;\n    const /** @type {?} */ postLink = (typeof link == 'object') ? ( /** @type {?} */((link as angular.IDirectivePrePost))).post : link;\n    const /** @type {?} */ attrs: angular.IAttributes = NOT_SUPPORTED;\n    const /** @type {?} */ transcludeFn: angular.ITranscludeFunction = NOT_SUPPORTED;\n    if (preLink) {\n      preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    linkFn(this.componentScope, /** @type {?} */(( null)), {parentBoundTranscludeFn: attachChildNodes});\n\n    if (postLink) {\n      postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    // Hook: $postLink\n    if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n      this.controllerInstance.$postLink();\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ ng1Changes: any = {};\n    Object.keys(changes).forEach(name => {\n      const /** @type {?} */ change: SimpleChange = changes[name];\n      this.setComponentProperty(name, change.currentValue);\n      ng1Changes[this.propertyMap[name]] = change;\n    });\n\n    if (isFunction( /** @type {?} */((this.destinationObj)).$onChanges)) { /** @type {?} */(( /** @type {?} */((\n      this.destinationObj)).$onChanges))(ng1Changes);\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    const /** @type {?} */ destinationObj = this.destinationObj;\n    const /** @type {?} */ lastValues = this.checkLastValues;\n    const /** @type {?} */ checkProperties = this.checkProperties;\n    const /** @type {?} */ propOuts = this.propOuts;\n    checkProperties.forEach((propName, i) => {\n      const /** @type {?} */ value = /** @type {?} */(( destinationObj))[propName];\n      const /** @type {?} */ last = lastValues[i];\n      if (!strictEquals(last, value)) {\n        const /** @type {?} */ eventEmitter: EventEmitter<any> = ( /** @type {?} */((this as any)))[propOuts[i]];\n        eventEmitter.emit(lastValues[i] = value);\n      }\n    });\n\n    if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n      this.controllerInstance.$doCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n      this.controllerInstance.$onDestroy();\n    }\n  }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetComponentProperty(name: string, value: any) { /** @type {?} */((\n    this.destinationObj))[this.propertyMap[name]] = value;\n  }\n}\n\nfunction UpgradeNg1ComponentAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.controllerInstance;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.destinationObj;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.checkLastValues;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.directive;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.element;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.$element;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.componentScope;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.helper;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.template;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.inputs;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.outputs;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.propOuts;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.checkProperties;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.propertyMap;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ElementRef, Injector, SimpleChanges} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {$COMPILE, $CONTROLLER, $HTTP_BACKEND, $INJECTOR, $TEMPLATE_CACHE} from './constants';\nimport {controllerKey, directiveNormalize, isFunction} from './util';\n\n\n// Constants\nconst /** @type {?} */ REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n\n// Interfaces\nexport interface IBindingDestination {\n  [key: string]: any;\n  $onChanges?: (changes: SimpleChanges) => void;\n}\n\nexport interface IControllerInstance extends IBindingDestination {\n  $doCheck?: () => void;\n  $onDestroy?: () => void;\n  $onInit?: () => void;\n  $postLink?: () => void;\n}\nexport class UpgradeHelper {\npublic readonly $injector: angular.IInjectorService;\npublic readonly element: Element;\npublic readonly $element: angular.IAugmentedJQuery;\npublic readonly directive: angular.IDirective;\nprivate readonly $compile: angular.ICompileService;\nprivate readonly $controller: angular.IControllerService;\n/**\n * @param {?} injector\n * @param {?} name\n * @param {?} elementRef\n * @param {?=} directive\n */\nconstructor(\nprivate injector: Injector,\nprivate name: string, elementRef: ElementRef,\n      directive?: angular.IDirective) {\n    this.$injector = injector.get($INJECTOR);\n    this.$compile = this.$injector.get($COMPILE);\n    this.$controller = this.$injector.get($CONTROLLER);\n\n    this.element = elementRef.nativeElement;\n    this.$element = angular.element(this.element);\n\n    this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n  }\n/**\n * @param {?} $injector\n * @param {?} name\n * @return {?}\n */\nstatic getDirective($injector: angular.IInjectorService, name: string): angular.IDirective {\n    const /** @type {?} */ directives: angular.IDirective[] = $injector.get(name + 'Directive');\n    if (directives.length > 1) {\n      throw new Error(`Only support single directive definition for: ${name}`);\n    }\n\n    const /** @type {?} */ directive = directives[0];\n\n    // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n    // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n    if (directive.compile && !directive.link) notSupported(name, 'compile');\n    if (directive.replace) notSupported(name, 'replace');\n    if (directive.terminal) notSupported(name, 'terminal');\n\n    return directive;\n  }\n/**\n * @param {?} $injector\n * @param {?} directive\n * @param {?=} fetchRemoteTemplate\n * @return {?}\n */\nstatic getTemplate(\n      $injector: angular.IInjectorService, directive: angular.IDirective,\n      fetchRemoteTemplate = false): string|Promise<string> {\n    if (directive.template !== undefined) {\n      return getOrCall<string>(directive.template);\n    } else if (directive.templateUrl) {\n      const /** @type {?} */ $templateCache = /** @type {?} */(( $injector.get($TEMPLATE_CACHE) as angular.ITemplateCacheService));\n      const /** @type {?} */ url = getOrCall<string>(directive.templateUrl);\n      const /** @type {?} */ template = $templateCache.get(url);\n\n      if (template !== undefined) {\n        return template;\n      } else if (!fetchRemoteTemplate) {\n        throw new Error('loading directive templates asynchronously is not supported');\n      }\n\n      return new Promise((resolve, reject) => {\n        const /** @type {?} */ $httpBackend = /** @type {?} */(( $injector.get($HTTP_BACKEND) as angular.IHttpBackendService));\n        $httpBackend('GET', url, null, (status: number, response: string) => {\n          if (status === 200) {\n            resolve($templateCache.put(url, response));\n          } else {\n            reject(`GET component template from '${url}' returned '${status}: ${response}'`);\n          }\n        });\n      });\n    } else {\n      throw new Error(`Directive '${directive.name}' is not a component, it is missing template.`);\n    }\n  }\n/**\n * @param {?} controllerType\n * @param {?} $scope\n * @return {?}\n */\nbuildController(controllerType: angular.IController, $scope: angular.IScope) {\n    // TODO: Document that we do not pre-assign bindings on the controller instance.\n    // Quoted properties below so that this code can be optimized with Closure Compiler.\n    const /** @type {?} */ locals = {'$scope': $scope, '$element': this.$element};\n    const /** @type {?} */ controller = this.$controller(controllerType, locals, null, this.directive.controllerAs); /** @type {?} */((\n\n    this.$element.data))(controllerKey( /** @type {?} */((this.directive.name))), controller);\n\n    return controller;\n  }\n/**\n * @param {?=} template\n * @return {?}\n */\ncompileTemplate(template?: string): angular.ILinkFn {\n    if (template === undefined) {\n      template = /** @type {?} */(( UpgradeHelper.getTemplate(this.$injector, this.directive) as string));\n    }\n\n    return this.compileHtml(template);\n  }\n/**\n * @return {?}\n */\nprepareTransclusion(): angular.ILinkFn|undefined {\n    const /** @type {?} */ transclude = this.directive.transclude;\n    const /** @type {?} */ contentChildNodes = this.extractChildNodes();\n    let /** @type {?} */ $template = contentChildNodes;\n    let /** @type {?} */ attachChildrenFn: angular.ILinkFn|undefined = (scope, cloneAttach) => /** @type {?} */((\n        cloneAttach))($template, scope);\n\n    if (transclude) {\n      const /** @type {?} */ slots = Object.create(null);\n\n      if (typeof transclude === 'object') {\n        $template = [];\n\n        const /** @type {?} */ slotMap = Object.create(null);\n        const /** @type {?} */ filledSlots = Object.create(null);\n\n        // Parse the element selectors.\n        Object.keys(transclude).forEach(slotName => {\n          let /** @type {?} */ selector = transclude[slotName];\n          const /** @type {?} */ optional = selector.charAt(0) === '?';\n          selector = optional ? selector.substring(1) : selector;\n\n          slotMap[selector] = slotName;\n          slots[slotName] = null;            // `null`: Defined but not yet filled.\n          filledSlots[slotName] = optional;  // Consider optional slots as filled.\n        });\n\n        // Add the matching elements into their slot.\n        contentChildNodes.forEach(node => {\n          const /** @type {?} */ slotName = slotMap[directiveNormalize(node.nodeName.toLowerCase())];\n          if (slotName) {\n            filledSlots[slotName] = true;\n            slots[slotName] = slots[slotName] || [];\n            slots[slotName].push(node);\n          } else {\n            $template.push(node);\n          }\n        });\n\n        // Check for required slots that were not filled.\n        Object.keys(filledSlots).forEach(slotName => {\n          if (!filledSlots[slotName]) {\n            throw new Error(`Required transclusion slot '${slotName}' on directive: ${this.name}`);\n          }\n        });\n\n        Object.keys(slots).filter(slotName => slots[slotName]).forEach(slotName => {\n          const /** @type {?} */ nodes = slots[slotName];\n          slots[slotName] = (scope: angular.IScope, cloneAttach: angular.ICloneAttachFunction) => /** @type {?} */((\n              cloneAttach))(nodes, scope);\n        });\n      }\n\n      // Attach `$$slots` to default slot transclude fn.\n      attachChildrenFn.$$slots = slots;\n\n      // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n      // removes all text content after the first interpolation and updates it later, after\n      // evaluating the expressions. This would result in AngularJS failing to recognize text\n      // nodes that start with an interpolation as transcluded content and use the fallback\n      // content instead.\n      // To avoid this issue, we add a\n      // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n      // to empty text nodes (which can only be a result of Angular removing their initial content).\n      // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n      //       will still fail to be detected by AngularJS v1.6+\n      $template.forEach(node => {\n        if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n          node.nodeValue = '\\u200C';\n        }\n      });\n    }\n\n    return attachChildrenFn;\n  }\n/**\n * @param {?} controllerInstance\n * @return {?}\n */\nresolveAndBindRequiredControllers(controllerInstance: IControllerInstance|null) {\n    const /** @type {?} */ directiveRequire = this.getDirectiveRequire();\n    const /** @type {?} */ requiredControllers = this.resolveRequire(directiveRequire);\n\n    if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n      const /** @type {?} */ requiredControllersMap = /** @type {?} */(( requiredControllers as{[key: string]: IControllerInstance}));\n      Object.keys(requiredControllersMap).forEach(key => {\n        controllerInstance[key] = requiredControllersMap[key];\n      });\n    }\n\n    return requiredControllers;\n  }\n/**\n * @param {?} html\n * @return {?}\n */\nprivate compileHtml(html: string): angular.ILinkFn {\n    this.element.innerHTML = html;\n    return this.$compile(this.element.childNodes);\n  }\n/**\n * @return {?}\n */\nprivate extractChildNodes(): Node[] {\n    const /** @type {?} */ childNodes: Node[] = [];\n    let /** @type {?} */ childNode: Node|null;\n\n    while (childNode = this.element.firstChild) {\n      this.element.removeChild(childNode);\n      childNodes.push(childNode);\n    }\n\n    return childNodes;\n  }\n/**\n * @return {?}\n */\nprivate getDirectiveRequire(): angular.DirectiveRequireProperty {\n    const /** @type {?} */ require = this.directive.require || /** @type {?} */(( (this.directive.controller && this.directive.name)));\n\n    if (isMap(require)) {\n      Object.keys(require).forEach(key => {\n        const /** @type {?} */ value = require[key];\n        const /** @type {?} */ match = /** @type {?} */(( value.match(REQUIRE_PREFIX_RE)));\n        const /** @type {?} */ name = value.substring(match[0].length);\n\n        if (!name) {\n          require[key] = match[0] + key;\n        }\n      });\n    }\n\n    return require;\n  }\n/**\n * @param {?} require\n * @param {?=} controllerInstance\n * @return {?}\n */\nprivate resolveRequire(require: angular.DirectiveRequireProperty, controllerInstance?: any):\n      angular.SingleOrListOrMap<IControllerInstance>|null {\n    if (!require) {\n      return null;\n    } else if (Array.isArray(require)) {\n      return require.map(req => this.resolveRequire(req));\n    } else if (typeof require === 'object') {\n      const /** @type {?} */ value: {[key: string]: IControllerInstance} = {};\n      Object.keys(require).forEach(key => value[key] = /** @type {?} */(( this.resolveRequire(require[key]))));\n      return value;\n    } else if (typeof require === 'string') {\n      const /** @type {?} */ match = /** @type {?} */(( require.match(REQUIRE_PREFIX_RE)));\n      const /** @type {?} */ inheritType = match[1] || match[3];\n\n      const /** @type {?} */ name = require.substring(match[0].length);\n      const /** @type {?} */ isOptional = !!match[2];\n      const /** @type {?} */ searchParents = !!inheritType;\n      const /** @type {?} */ startOnParent = inheritType === '^^';\n\n      const /** @type {?} */ ctrlKey = controllerKey(name);\n      const /** @type {?} */ elem = startOnParent ? /** @type {?} */(( this.$element.parent))() : this.$element;\n      const /** @type {?} */ value = searchParents ? /** @type {?} */(( elem.inheritedData))(ctrlKey) : /** @type {?} */(( elem.data))(ctrlKey);\n\n      if (!value && !isOptional) {\n        throw new Error(\n            `Unable to find required '${require}' in upgraded directive '${this.name}'.`);\n      }\n\n      return value;\n    } else {\n      throw new Error(\n          `Unrecognized 'require' syntax on upgraded directive '${this.name}': ${require}`);\n    }\n  }\n}\n\nfunction UpgradeHelper_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeHelper.prototype.$injector;\n/** @type {?} */\nUpgradeHelper.prototype.element;\n/** @type {?} */\nUpgradeHelper.prototype.$element;\n/** @type {?} */\nUpgradeHelper.prototype.directive;\n/** @type {?} */\nUpgradeHelper.prototype.$compile;\n/** @type {?} */\nUpgradeHelper.prototype.$controller;\n/** @type {?} */\nUpgradeHelper.prototype.injector;\n/** @type {?} */\nUpgradeHelper.prototype.name;\n}\n\n/**\n * @template T\n * @param {?} property\n * @return {?}\n */\nfunction getOrCall<T>(property: T | Function): T {\n  return isFunction(property) ? property() : property;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isMap<T>(value: angular.SingleOrListOrMap<T>): value is {[key: string]: T} {\n  return value && !Array.isArray(value) && typeof value === 'object';\n}\n/**\n * @param {?} name\n * @param {?} feature\n * @return {?}\n */\nfunction notSupported(name: string, feature: string) {\n  throw new Error(`Upgraded directive '${name}' contains unsupported feature: '${feature}'.`);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector} from '@angular/core';\nimport {INJECTOR_KEY} from './constants';\n/**\n * \\@whatItDoes \n * \n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n * \n * Allow an Angular service to be accessible from AngularJS.\n * \n * \\@howToUse \n * \n * First ensure that the service to be downgraded is provided in an {\\@link NgModule}\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n * \n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes-service\"}\n * \n * and that we have included this in our upgrade app {\\@link NgModule}\n * \n * {\\@example upgrade/static/ts/module.ts region=\"ng2-module\"}\n * \n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n * \n * {\\@example upgrade/static/ts/module.ts region=\"downgrade-ng2-heroes-service\"}\n * \n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n * \n * {\\@example upgrade/static/ts/module.ts region=\"example-app\"}\n * \n * \\@description \n * \n * Takes a `token` that identifies a service provided from Angular.\n * \n * Returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n * \n * The factory function provides access to the Angular service that\n * is identified by the `token` parameter.\n * \n * \\@experimental\n * @param {?} token\n * @return {?}\n */\nexport function downgradeInjectable(token: any): Function {\n  const /** @type {?} */ factory = function(i: Injector) { return i.get(token); };\n  ( /** @type {?} */((factory as any)))['$inject'] = [INJECTOR_KEY];\n\n  return factory;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ComponentFactory, ComponentFactoryResolver, Injector, NgZone, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {$COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, LAZY_MODULE_REF, REQUIRE_INJECTOR, REQUIRE_NG_MODEL} from './constants';\nimport {DowngradeComponentAdapter} from './downgrade_component_adapter';\nimport {LazyModuleRef, controllerKey, getComponentName, isFunction} from './util';\n\n\ninterface Thenable<T> {\n  then(callback: (value: T) => any): any;\n}\n\nlet /** @type {?} */ downgradeCount = 0;\n/**\n * \\@whatItDoes \n * \n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n * \n * Allows an Angular component to be used from AngularJS.\n * \n * \\@howToUse \n * \n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n * \n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n * \n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n * \n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n * \n * \\@description \n * \n * A helper function that returns a factory function to be used for registering an\n * AngularJS wrapper directive for \"downgrading\" an Angular component.\n * \n * The parameter contains information about the Component that is being downgraded:\n * \n * * `component: Type<any>`: The type of the Component that will be downgraded\n * \n * \\@experimental\n * @param {?} info\n * @return {?}\n */\nexport function downgradeComponent(info: {\n  component: Type<any>;\n  /** @experimental */\n  propagateDigest?: boolean;\n  /** @deprecated since v4. This parameter is no longer used */\n  inputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  outputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  selectors?: string[];\n}): any /* angular.IInjectable */ {\n  const /** @type {?} */ idPrefix = `NG2_UPGRADE_${downgradeCount++}_`;\n  let /** @type {?} */ idCount = 0;\n\n  const /** @type {?} */ directiveFactory:\n      angular.IAnnotatedFunction = function(\n                                       $compile: angular.ICompileService,\n                                       $injector: angular.IInjectorService,\n                                       $parse: angular.IParseService): angular.IDirective {\n    // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n    // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n    // (except if explicitly escaped, in which case we shouldn't force it back in).\n    // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n    // Angular zone.\n    let /** @type {?} */ needsNgZone = false;\n    let /** @type {?} */ wrapCallback = <T>(cb: () => T) => cb;\n    let /** @type {?} */ ngZone: NgZone;\n\n    return {\n      restrict: 'E',\n      terminal: true,\n      require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n      link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n             required: any[]) => {\n        // We might have to compile the contents asynchronously, because this might have been\n        // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n        // been compiled.\n\n        const /** @type {?} */ ngModel: angular.INgModelController = required[1];\n        let /** @type {?} */ parentInjector: Injector|Thenable<Injector>|undefined = required[0];\n        let /** @type {?} */ ranAsync = false;\n\n        if (!parentInjector) {\n          const /** @type {?} */ lazyModuleRef = /** @type {?} */(( $injector.get(LAZY_MODULE_REF) as LazyModuleRef));\n          needsNgZone = lazyModuleRef.needsNgZone;\n          parentInjector = lazyModuleRef.injector || /** @type {?} */(( lazyModuleRef.promise as Promise<Injector>));\n        }\n\n        const /** @type {?} */ doDowngrade = (injector: Injector) => {\n          const /** @type {?} */ componentFactoryResolver: ComponentFactoryResolver =\n              injector.get(ComponentFactoryResolver);\n          const /** @type {?} */ componentFactory: ComponentFactory<any> = /** @type {?} */((\n              componentFactoryResolver.resolveComponentFactory(info.component)));\n\n          if (!componentFactory) {\n            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n          }\n\n          const /** @type {?} */ id = idPrefix + (idCount++);\n          const /** @type {?} */ injectorPromise = new ParentInjectorPromise(element);\n          const /** @type {?} */ facade = new DowngradeComponentAdapter(\n              id, element, attrs, scope, ngModel, injector, $injector, $compile, $parse,\n              componentFactory, wrapCallback);\n\n          const /** @type {?} */ projectableNodes = facade.compileContents();\n          facade.createComponent(projectableNodes);\n          facade.setupInputs(needsNgZone, info.propagateDigest);\n          facade.setupOutputs();\n          facade.registerCleanup(needsNgZone);\n\n          injectorPromise.resolve(facade.getInjector());\n\n          if (ranAsync) {\n            // If this is run async, it is possible that it is not run inside a\n            // digest and initial input values will not be detected.\n            scope.$evalAsync(() => {});\n          }\n        };\n\n        const /** @type {?} */ downgradeFn = !needsNgZone ? doDowngrade : (injector: Injector) => {\n          if (!ngZone) {\n            ngZone = injector.get(NgZone);\n            wrapCallback = <T>(cb: () => T) => () =>\n                NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n          }\n\n          wrapCallback(() => doDowngrade(injector))();\n        };\n\n        if (isThenable<Injector>(parentInjector)) {\n          parentInjector.then(downgradeFn);\n        } else {\n          downgradeFn(parentInjector);\n        }\n\n        ranAsync = true;\n      }\n    };\n  };\n\n  // bracket-notation because of closure - see #14441\n  directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n  return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nclass ParentInjectorPromise {\nprivate injector: Injector;\nprivate injectorKey: string = controllerKey(INJECTOR_KEY);\nprivate callbacks: ((injector: Injector) => any)[] = [];\n/**\n * @param {?} element\n */\nconstructor(private element: angular.IAugmentedJQuery) {\n    // Store the promise on the element.\n    element.data !(this.injectorKey, this);\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nthen(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n/**\n * @param {?} injector\n * @return {?}\n */\nresolve(injector: Injector) {\n    this.injector = injector; /** @type {?} */((\n\n    // Store the real injector on the element.\n    this.element.data))(this.injectorKey, injector);\n\n    // Release the element to prevent memory leaks.\n    this.element = /** @type {?} */(( null));\n\n    // Run the queued callbacks.\n    this.callbacks.forEach(callback => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\nfunction ParentInjectorPromise_tsickle_Closure_declarations() {\n/** @type {?} */\nParentInjectorPromise.prototype.injector;\n/** @type {?} */\nParentInjectorPromise.prototype.injectorKey;\n/** @type {?} */\nParentInjectorPromise.prototype.callbacks;\n/** @type {?} */\nParentInjectorPromise.prototype.element;\n}\n\n/**\n * @template T\n * @param {?} obj\n * @return {?}\n */\nfunction isThenable<T>(obj: object): obj is Thenable<T> {\n  return isFunction(( /** @type {?} */((obj as any))).then);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ApplicationRef, ChangeDetectorRef, ComponentFactory, ComponentRef, EventEmitter, Injector, OnChanges, ReflectiveInjector, SimpleChange, SimpleChanges, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {PropertyBinding} from './component_info';\nimport {$SCOPE} from './constants';\nimport {getAttributesAsArray, getComponentName, hookupNgModel, strictEquals} from './util';\n\nconst /** @type {?} */ INITIAL_VALUE = {\n  __UNINITIALIZED__: true\n};\nexport class DowngradeComponentAdapter {\nprivate implementsOnChanges = false;\nprivate inputChangeCount: number = 0;\nprivate inputChanges: SimpleChanges = {};\nprivate componentScope: angular.IScope;\nprivate componentRef: ComponentRef<any>;\nprivate component: any;\nprivate changeDetector: ChangeDetectorRef;\nprivate appRef: ApplicationRef;\n/**\n * @param {?} id\n * @param {?} element\n * @param {?} attrs\n * @param {?} scope\n * @param {?} ngModel\n * @param {?} parentInjector\n * @param {?} $injector\n * @param {?} $compile\n * @param {?} $parse\n * @param {?} componentFactory\n * @param {?} wrapCallback\n */\nconstructor(\nprivate id: string,\nprivate element: angular.IAugmentedJQuery,\nprivate attrs: angular.IAttributes,\nprivate scope: angular.IScope,\nprivate ngModel: angular.INgModelController,\nprivate parentInjector: Injector,\nprivate $injector: angular.IInjectorService,\nprivate $compile: angular.ICompileService,\nprivate $parse: angular.IParseService,\nprivate componentFactory: ComponentFactory<any>,\nprivate wrapCallback: <T>(cb: () => T) => () => T) {\n    (this.element[0] as any).id = id;\n    this.componentScope = scope.$new();\n    this.appRef = parentInjector.get(ApplicationRef);\n  }\n/**\n * @return {?}\n */\ncompileContents(): Node[][] {\n    const /** @type {?} */ compiledProjectableNodes: Node[][] = [];\n    const /** @type {?} */ projectableNodes: Node[][] = this.groupProjectableNodes();\n    const /** @type {?} */ linkFns = projectableNodes.map(nodes => this.$compile(nodes)); /** @type {?} */((\n\n    this.element.empty))();\n\n    linkFns.forEach(linkFn => {\n      linkFn(this.scope, (clone: Node[]) => {\n        compiledProjectableNodes.push(clone); /** @type {?} */((\n        this.element.append))(clone);\n      });\n    });\n\n    return compiledProjectableNodes;\n  }\n/**\n * @param {?} projectableNodes\n * @return {?}\n */\ncreateComponent(projectableNodes: Node[][]) {\n    const /** @type {?} */ childInjector = ReflectiveInjector.resolveAndCreate(\n        [{provide: $SCOPE, useValue: this.componentScope}], this.parentInjector);\n\n    this.componentRef =\n        this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n    this.changeDetector = this.componentRef.changeDetectorRef;\n    this.component = this.componentRef.instance;\n\n    hookupNgModel(this.ngModel, this.component);\n  }\n/**\n * @param {?} needsNgZone\n * @param {?=} propagateDigest\n * @return {?}\n */\nsetupInputs(needsNgZone: boolean, propagateDigest = true): void {\n    const /** @type {?} */ attrs = this.attrs;\n    const /** @type {?} */ inputs = this.componentFactory.inputs || [];\n    for (let /** @type {?} */ i = 0; i < inputs.length; i++) {\n      const /** @type {?} */ input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n      let /** @type {?} */ expr: string|null = null;\n\n      if (attrs.hasOwnProperty(input.attr)) {\n        const /** @type {?} */ observeFn = (prop => {\n          let /** @type {?} */ prevValue = INITIAL_VALUE;\n          return (currValue: any) => {\n            // Initially, both `$observe()` and `$watch()` will call this function.\n            if (!strictEquals(prevValue, currValue)) {\n              if (prevValue === INITIAL_VALUE) {\n                prevValue = currValue;\n              }\n\n              this.updateInput(prop, prevValue, currValue);\n              prevValue = currValue;\n            }\n          };\n        })(input.prop);\n        attrs.$observe(input.attr, observeFn);\n\n        // Use `$watch()` (in addition to `$observe()`) in order to initialize the input  in time\n        // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n        // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n        let /** @type {?} */ unwatch: Function|null = this.componentScope.$watch(() => { /** @type {?} */((\n          unwatch))();\n          unwatch = null;\n          observeFn(attrs[input.attr]);\n        });\n\n      } else if (attrs.hasOwnProperty(input.bindAttr)) {\n        expr = attrs[input.bindAttr];\n      } else if (attrs.hasOwnProperty(input.bracketAttr)) {\n        expr = attrs[input.bracketAttr];\n      } else if (attrs.hasOwnProperty(input.bindonAttr)) {\n        expr = attrs[input.bindonAttr];\n      } else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n        expr = attrs[input.bracketParenAttr];\n      }\n      if (expr != null) {\n        const /** @type {?} */ watchFn =\n            (prop => (currValue: any, prevValue: any) =>\n                 this.updateInput(prop, prevValue, currValue))(input.prop);\n        this.componentScope.$watch(expr, watchFn);\n      }\n    }\n\n    // Invoke `ngOnChanges()` and Change Detection (when necessary)\n    const /** @type {?} */ detectChanges = () => this.changeDetector.detectChanges();\n    const /** @type {?} */ prototype = this.componentFactory.componentType.prototype;\n    this.implementsOnChanges = !!(prototype && ( /** @type {?} */((<OnChanges>prototype))).ngOnChanges);\n\n    this.componentScope.$watch(() => this.inputChangeCount, this.wrapCallback(() => {\n      // Invoke `ngOnChanges()`\n      if (this.implementsOnChanges) {\n        const /** @type {?} */ inputChanges = this.inputChanges;\n        this.inputChanges = {};\n        ( /** @type {?} */((<OnChanges>this.component))).ngOnChanges( /** @type {?} */((inputChanges)));\n      }\n\n      // If opted out of propagating digests, invoke change detection\n      // when inputs change\n      if (!propagateDigest) {\n        detectChanges();\n      }\n    }));\n\n    // If not opted out of propagating digests, invoke change detection on every digest\n    if (propagateDigest) {\n      this.componentScope.$watch(this.wrapCallback(detectChanges));\n    }\n\n    // Attach the view so that it will be dirty-checked.\n    if (needsNgZone) {\n      this.appRef.attachView(this.componentRef.hostView);\n    }\n  }\n/**\n * @return {?}\n */\nsetupOutputs() {\n    const /** @type {?} */ attrs = this.attrs;\n    const /** @type {?} */ outputs = this.componentFactory.outputs || [];\n    for (let /** @type {?} */ j = 0; j < outputs.length; j++) {\n      const /** @type {?} */ output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n      let /** @type {?} */ expr: string|null = null;\n      let /** @type {?} */ assignExpr = false;\n\n      const /** @type {?} */ bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n      const /** @type {?} */ bracketParenAttr =\n          `[(${output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8)})]`;\n\n      if (attrs.hasOwnProperty(output.onAttr)) {\n        expr = attrs[output.onAttr];\n      } else if (attrs.hasOwnProperty(output.parenAttr)) {\n        expr = attrs[output.parenAttr];\n      } else if (attrs.hasOwnProperty(bindonAttr)) {\n        expr = attrs[bindonAttr];\n        assignExpr = true;\n      } else if (attrs.hasOwnProperty(bracketParenAttr)) {\n        expr = attrs[bracketParenAttr];\n        assignExpr = true;\n      }\n\n      if (expr != null && assignExpr != null) {\n        const /** @type {?} */ getter = this.$parse(expr);\n        const /** @type {?} */ setter = getter.assign;\n        if (assignExpr && !setter) {\n          throw new Error(`Expression '${expr}' is not assignable!`);\n        }\n        const /** @type {?} */ emitter = /** @type {?} */(( this.component[output.prop] as EventEmitter<any>));\n        if (emitter) {\n          emitter.subscribe({\n            next: assignExpr ? (v: any) => /** @type {?} */(( setter))(this.scope, v) :\n                               (v: any) => getter(this.scope, {'$event': v})\n          });\n        } else {\n          throw new Error(\n              `Missing emitter '${output.prop}' on component '${getComponentName(this.componentFactory.componentType)}'!`);\n        }\n      }\n    }\n  }\n/**\n * @param {?} needsNgZone\n * @return {?}\n */\nregisterCleanup(needsNgZone: boolean) { /** @type {?} */((\n    this.element.on))('$destroy', () => {\n      this.componentScope.$destroy();\n      this.componentRef.destroy();\n      if (needsNgZone) {\n        this.appRef.detachView(this.componentRef.hostView);\n      }\n    });\n  }\n/**\n * @return {?}\n */\ngetInjector(): Injector { return this.componentRef.injector; }\n/**\n * @param {?} prop\n * @param {?} prevValue\n * @param {?} currValue\n * @return {?}\n */\nprivate updateInput(prop: string, prevValue: any, currValue: any) {\n    if (this.implementsOnChanges) {\n      this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n    }\n\n    this.inputChangeCount++;\n    this.component[prop] = currValue;\n  }\n/**\n * @return {?}\n */\ngroupProjectableNodes() {\n    let /** @type {?} */ ngContentSelectors = this.componentFactory.ngContentSelectors;\n    return groupNodesBySelector(ngContentSelectors, /** @type {?} */(( this.element.contents))());\n  }\n}\n\nfunction DowngradeComponentAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nDowngradeComponentAdapter.prototype.implementsOnChanges;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.inputChangeCount;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.inputChanges;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.componentScope;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.componentRef;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.component;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.changeDetector;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.appRef;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.id;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.element;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.attrs;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.scope;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.ngModel;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.parentInjector;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.$injector;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.$compile;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.$parse;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.componentFactory;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.wrapCallback;\n}\n\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n * @param {?} ngContentSelectors\n * @param {?} nodes\n * @return {?}\n */\nexport function groupNodesBySelector(ngContentSelectors: string[], nodes: Node[]): Node[][] {\n  const /** @type {?} */ projectableNodes: Node[][] = [];\n  let /** @type {?} */ wildcardNgContentIndex: number;\n\n  for (let /** @type {?} */ i = 0, /** @type {?} */ ii = ngContentSelectors.length; i < ii; ++i) {\n    projectableNodes[i] = [];\n  }\n\n  for (let /** @type {?} */ j = 0, /** @type {?} */ jj = nodes.length; j < jj; ++j) {\n    const /** @type {?} */ node = nodes[j];\n    const /** @type {?} */ ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n    if (ngContentIndex != null) {\n      projectableNodes[ngContentIndex].push(node);\n    }\n  }\n\n  return projectableNodes;\n}\n/**\n * @param {?} element\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction findMatchingNgContentIndex(element: any, ngContentSelectors: string[]): number|null {\n  const /** @type {?} */ ngContentIndices: number[] = [];\n  let /** @type {?} */ wildcardNgContentIndex: number = -1;\n  for (let /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {\n    const /** @type {?} */ selector = ngContentSelectors[i];\n    if (selector === '*') {\n      wildcardNgContentIndex = i;\n    } else {\n      if (matchesSelector(element, selector)) {\n        ngContentIndices.push(i);\n      }\n    }\n  }\n  ngContentIndices.sort();\n\n  if (wildcardNgContentIndex !== -1) {\n    ngContentIndices.push(wildcardNgContentIndex);\n  }\n  return ngContentIndices.length ? ngContentIndices[0] : null;\n}\n\nlet /** @type {?} */ _matches: (this: any, selector: string) => boolean;\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nfunction matchesSelector(el: any, selector: string): boolean {\n  if (!_matches) {\n    const /** @type {?} */ elProto = /** @type {?} */(( <any>Element.prototype));\n    _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n        elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n  }\n  return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injector, Type} from '@angular/core';\nimport * as angular from './angular1';\n\nconst /** @type {?} */ DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\nconst /** @type {?} */ DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n/**\n * @param {?} e\n * @return {?}\n */\nexport function onError(e: any) {\n  // TODO: (misko): We seem to not have a stack trace here!\n  if (console.error) {\n    console.error(e, e.stack);\n  } else {\n    // tslint:disable-next-line:no-console\n    console.log(e, e.stack);\n  }\n  throw e;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function controllerKey(name: string): string {\n  return '$' + name + 'Controller';\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function directiveNormalize(name: string): string {\n  return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n      .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, (_, letter) => letter.toUpperCase());\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function getAttributesAsArray(node: Node): [string, string][] {\n  const /** @type {?} */ attributes = node.attributes;\n  let /** @type {?} */ asArray: [string, string][] = /** @type {?} */(( undefined));\n  if (attributes) {\n    let /** @type {?} */ attrLen = attributes.length;\n    asArray = new Array(attrLen);\n    for (let /** @type {?} */ i = 0; i < attrLen; i++) {\n      asArray[i] = [attributes[i].nodeName, /** @type {?} */(( attributes[i].nodeValue))];\n    }\n  }\n  return asArray || [];\n}\n/**\n * @param {?} component\n * @return {?}\n */\nexport function getComponentName(component: Type<any>): string {\n  // Return the name of the component or the first line of its stringified version.\n  return ( /** @type {?} */((component as any))).overriddenName || component.name || component.toString().split('\\n')[0];\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\nexport class Deferred<R> {\n  promise: Promise<R>;\n  resolve: (value?: R|PromiseLike<R>) => void;\n  reject: (error?: any) => void;\nconstructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\nfunction Deferred_tsickle_Closure_declarations() {\n/** @type {?} */\nDeferred.prototype.promise;\n/** @type {?} */\nDeferred.prototype.resolve;\n/** @type {?} */\nDeferred.prototype.reject;\n}\n\n\nexport interface LazyModuleRef {\n  // Whether the AngularJS app has been bootstrapped outside the Angular zone\n  // (in which case calls to Angular APIs need to be brought back in).\n  needsNgZone: boolean;\n  injector?: Injector;\n  promise?: Promise<Injector>;\n}\n/**\n * @param {?} component\n * @return {?} Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component: any) {\n  return typeof component.writeValue === 'function' &&\n      typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n * @param {?} ngModel\n * @param {?} component\n * @return {?}\n */\nexport function hookupNgModel(ngModel: angular.INgModelController, component: any) {\n  if (ngModel && supportsNgModel(component)) {\n    ngModel.$render = () => { component.writeValue(ngModel.$viewValue); };\n    component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n    if (typeof component.registerOnTouched === 'function') {\n      component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n    }\n  }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n * @param {?} val1\n * @param {?} val2\n * @return {?}\n */\nexport function strictEquals(val1: any, val2: any): boolean {\n  return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n","\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nexport class PropertyBinding {\n  bracketAttr: string;\n  bracketParenAttr: string;\n  parenAttr: string;\n  onAttr: string;\n  bindAttr: string;\n  bindonAttr: string;\n/**\n * @param {?} prop\n * @param {?} attr\n */\nconstructor(public prop: string,\npublic attr: string) { this.parseBinding(); }\n/**\n * @return {?}\n */\nprivate parseBinding() {\n    this.bracketAttr = `[${this.attr}]`;\n    this.parenAttr = `(${this.attr})`;\n    this.bracketParenAttr = `[(${this.attr})]`;\n    const /** @type {?} */ capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n    this.onAttr = `on${capitalAttr}`;\n    this.bindAttr = `bind${capitalAttr}`;\n    this.bindonAttr = `bindon${capitalAttr}`;\n  }\n}\n\nfunction PropertyBinding_tsickle_Closure_declarations() {\n/** @type {?} */\nPropertyBinding.prototype.bracketAttr;\n/** @type {?} */\nPropertyBinding.prototype.bracketParenAttr;\n/** @type {?} */\nPropertyBinding.prototype.parenAttr;\n/** @type {?} */\nPropertyBinding.prototype.onAttr;\n/** @type {?} */\nPropertyBinding.prototype.bindAttr;\n/** @type {?} */\nPropertyBinding.prototype.bindonAttr;\n/** @type {?} */\nPropertyBinding.prototype.prop;\n/** @type {?} */\nPropertyBinding.prototype.attr;\n}\n\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const $COMPILE = '$compile';\nexport const /** @type {?} */ $CONTROLLER = '$controller';\nexport const /** @type {?} */ $DELEGATE = '$delegate';\nexport const /** @type {?} */ $HTTP_BACKEND = '$httpBackend';\nexport const /** @type {?} */ $INJECTOR = '$injector';\nexport const /** @type {?} */ $INTERVAL = '$interval';\nexport const /** @type {?} */ $PARSE = '$parse';\nexport const /** @type {?} */ $PROVIDE = '$provide';\nexport const /** @type {?} */ $ROOT_SCOPE = '$rootScope';\nexport const /** @type {?} */ $SCOPE = '$scope';\nexport const /** @type {?} */ $TEMPLATE_CACHE = '$templateCache';\nexport const /** @type {?} */ $TEMPLATE_REQUEST = '$templateRequest';\n\nexport const /** @type {?} */ $$TESTABILITY = '$$testability';\n\nexport const /** @type {?} */ COMPILER_KEY = '$$angularCompiler';\nexport const /** @type {?} */ GROUP_PROJECTABLE_NODES_KEY = '$$angularGroupProjectableNodes';\nexport const /** @type {?} */ INJECTOR_KEY = '$$angularInjector';\nexport const /** @type {?} */ LAZY_MODULE_REF = '$$angularLazyModuleRef';\nexport const /** @type {?} */ NG_ZONE_KEY = '$$angularNgZone';\n\nexport const /** @type {?} */ REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nexport const /** @type {?} */ REQUIRE_NG_MODEL = '?ngModel';\n\nexport const /** @type {?} */ UPGRADE_MODULE_NAME = '$$UpgradeModule';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type Ng1Token = string;\n\nexport type Ng1Expression = string | Function;\n\nexport interface IAnnotatedFunction extends Function { $inject?: Ng1Token[]; }\n\nexport type IInjectable = (Ng1Token | Function)[] | IAnnotatedFunction;\n\nexport type SingleOrListOrMap<T> = T | T[] | {[key: string]: T};\n\nexport interface IModule {\n  name: string;\n  requires: (string|IInjectable)[];\n  config(fn: IInjectable): IModule;\n  directive(selector: string, factory: IInjectable): IModule;\n  component(selector: string, component: IComponent): IModule;\n  controller(name: string, type: IInjectable): IModule;\n  factory(key: Ng1Token, factoryFn: IInjectable): IModule;\n  value(key: Ng1Token, value: any): IModule;\n  constant(token: Ng1Token, value: any): IModule;\n  run(a: IInjectable): IModule;\n}\nexport interface ICompileService {\n  (element: Element|NodeList|Node[]|string, transclude?: Function): ILinkFn;\n}\nexport interface ILinkFn {\n  (scope: IScope, cloneAttachFn?: ICloneAttachFunction, options?: ILinkFnOptions): IAugmentedJQuery;\n  $$slots?: {[slotName: string]: ILinkFn};\n}\nexport interface ILinkFnOptions {\n  parentBoundTranscludeFn?: Function;\n  transcludeControllers?: {[key: string]: any};\n  futureParentElement?: Node;\n}\nexport interface IRootScopeService {\n  $new(isolate?: boolean): IScope;\n  $id: string;\n  $parent: IScope;\n  $root: IScope;\n  $watch(exp: Ng1Expression, fn?: (a1?: any, a2?: any) => void): Function;\n  $on(event: string, fn?: (event?: any, ...args: any[]) => void): Function;\n  $destroy(): any;\n  $apply(exp?: Ng1Expression): any;\n  $digest(): any;\n  $evalAsync(exp: Ng1Expression, locals?: any): void;\n  $on(event: string, fn?: (event?: any, ...args: any[]) => void): Function;\n  $$childTail: IScope;\n  $$childHead: IScope;\n  $$nextSibling: IScope;\n  [key: string]: any;\n}\nexport interface IScope extends IRootScopeService {}\n\nexport interface IAngularBootstrapConfig { strictDi?: boolean; }\nexport interface IDirective {\n  compile?: IDirectiveCompileFn;\n  controller?: IController;\n  controllerAs?: string;\n  bindToController?: boolean|{[key: string]: string};\n  link?: IDirectiveLinkFn|IDirectivePrePost;\n  name?: string;\n  priority?: number;\n  replace?: boolean;\n  require?: DirectiveRequireProperty;\n  restrict?: string;\n  scope?: boolean|{[key: string]: string};\n  template?: string|Function;\n  templateUrl?: string|Function;\n  templateNamespace?: string;\n  terminal?: boolean;\n  transclude?: DirectiveTranscludeProperty;\n}\nexport type DirectiveRequireProperty = SingleOrListOrMap<string>;\nexport type DirectiveTranscludeProperty = boolean | 'element' | {[key: string]: string};\nexport interface IDirectiveCompileFn {\n  (templateElement: IAugmentedJQuery, templateAttributes: IAttributes,\n   transclude: ITranscludeFunction): IDirectivePrePost;\n}\nexport interface IDirectivePrePost {\n  pre?: IDirectiveLinkFn;\n  post?: IDirectiveLinkFn;\n}\nexport interface IDirectiveLinkFn {\n  (scope: IScope, instanceElement: IAugmentedJQuery, instanceAttributes: IAttributes,\n   controller: any, transclude: ITranscludeFunction): void;\n}\nexport interface IComponent {\n  bindings?: {[key: string]: string};\n  controller?: string|IInjectable;\n  controllerAs?: string;\n  require?: DirectiveRequireProperty;\n  template?: string|Function;\n  templateUrl?: string|Function;\n  transclude?: DirectiveTranscludeProperty;\n}\nexport interface IAttributes {\n  $observe(attr: string, fn: (v: string) => void): void;\n  [key: string]: any;\n}\nexport interface ITranscludeFunction {\n  // If the scope is provided, then the cloneAttachFn must be as well.\n  (scope: IScope, cloneAttachFn: ICloneAttachFunction): IAugmentedJQuery;\n  // If one argument is provided, then it's assumed to be the cloneAttachFn.\n  (cloneAttachFn?: ICloneAttachFunction): IAugmentedJQuery;\n}\nexport interface ICloneAttachFunction {\n  // Let's hint but not force cloneAttachFn's signature\n  (clonedElement?: IAugmentedJQuery, scope?: IScope): any;\n}\nexport type IAugmentedJQuery = Node[] & {\n  on?: (name: string, fn: () => void) => void;\n  data?: (name: string, value?: any) => any;\n  text?: () => string;\n  inheritedData?: (name: string, value?: any) => any;\n  contents?: () => IAugmentedJQuery;\n  parent?: () => IAugmentedJQuery;\n  empty?: () => void;\n  append?: (content: IAugmentedJQuery | string) => IAugmentedJQuery;\n  controller?: (name: string) => any;\n  isolateScope?: () => IScope;\n  injector?: () => IInjectorService;\n};\nexport interface IProvider { $get: IInjectable; }\nexport interface IProvideService {\n  provider(token: Ng1Token, provider: IProvider): IProvider;\n  factory(token: Ng1Token, factory: IInjectable): IProvider;\n  service(token: Ng1Token, type: IInjectable): IProvider;\n  value(token: Ng1Token, value: any): IProvider;\n  constant(token: Ng1Token, value: any): void;\n  decorator(token: Ng1Token, factory: IInjectable): void;\n}\nexport interface IParseService { (expression: string): ICompiledExpression; }\nexport interface ICompiledExpression {\n  (context: any, locals: any): any;\n  assign?: (context: any, value: any) => any;\n}\nexport interface IHttpBackendService {\n  (method: string, url: string, post?: any, callback?: Function, headers?: any, timeout?: number,\n   withCredentials?: boolean): void;\n}\nexport interface ICacheObject {\n  put<T>(key: string, value?: T): T;\n  get(key: string): any;\n}\nexport interface ITemplateCacheService extends ICacheObject {}\nexport interface ITemplateRequestService {\n  (template: string|any /* TrustedResourceUrl */, ignoreRequestError?: boolean): Promise<string>;\n  totalPendingRequests: number;\n}\nexport type IController = string | IInjectable;\nexport interface IControllerService {\n  (controllerConstructor: IController, locals?: any, later?: any, ident?: any): any;\n  (controllerName: string, locals?: any): any;\n}\n\nexport interface IInjectorService {\n  get(key: string): any;\n  has(key: string): boolean;\n}\n\nexport interface IIntervalService {\n  (func: Function, delay: number, count?: number, invokeApply?: boolean,\n   ...args: any[]): Promise<any>;\n  cancel(promise: Promise<any>): boolean;\n}\n\nexport interface ITestabilityService {\n  findBindings(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  findModels(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  getLocation(): string;\n  setLocation(url: string): void;\n  whenStable(callback: Function): void;\n}\n\nexport interface INgModelController {\n  $render(): void;\n  $isEmpty(value: any): boolean;\n  $setValidity(validationErrorKey: string, isValid: boolean): void;\n  $setPristine(): void;\n  $setDirty(): void;\n  $setUntouched(): void;\n  $setTouched(): void;\n  $rollbackViewValue(): void;\n  $validate(): void;\n  $commitViewValue(): void;\n  $setViewValue(value: any, trigger: string): void;\n\n  $viewValue: any;\n  $modelValue: any;\n  $parsers: Function[];\n  $formatters: Function[];\n  $validators: {[key: string]: Function};\n  $asyncValidators: {[key: string]: Function};\n  $viewChangeListeners: Function[];\n  $error: Object;\n  $pending: Object;\n  $untouched: boolean;\n  $touched: boolean;\n  $pristine: boolean;\n  $dirty: boolean;\n  $valid: boolean;\n  $invalid: boolean;\n  $name: string;\n}\n/**\n * @return {?}\n */\nfunction noNg() {\n  throw new Error('AngularJS v1.x is not loaded!');\n}\n\n\nlet /** @type {?} */ angular: {\n  bootstrap: (e: Element, modules: (string | IInjectable)[], config?: IAngularBootstrapConfig) =>\n                 IInjectorService,\n  module: (prefix: string, dependencies?: string[]) => IModule,\n  element: (e: Element | string) => IAugmentedJQuery,\n  version: {major: number},\n  resumeBootstrap: () => void,\n  getTestability: (e: Element) => ITestabilityService\n} = /** @type {?} */(( <any>{\n  bootstrap: noNg,\n  module: noNg,\n  element: noNg,\n  version: noNg,\n  resumeBootstrap: noNg,\n  getTestability: noNg\n}));\n\ntry {\n  if (window.hasOwnProperty('angular')) {\n    angular = ( /** @type {?} */((<any>window))).angular;\n  }\n} catch ( /** @type {?} */e) {\n  // ignore in CJS mode.\n}\n/**\n * Resets the AngularJS library.\n * \n * Used when angularjs is loaded lazily, and not available on `window`.\n * \n * \\@stable\n * @param {?} ng\n * @return {?}\n */\nexport function setAngularLib(ng: any): void {\n  angular = ng;\n}\n/**\n * Returns the current version of the AngularJS library.\n * \n * \\@stable\n * @return {?}\n */\nexport function getAngularLib(): any {\n  return angular;\n}\n\nexport const /** @type {?} */ bootstrap =\n    (e: Element, modules: (string | IInjectable)[], config?: IAngularBootstrapConfig) =>\n        angular.bootstrap(e, modules, config);\n\nexport const /** @type {?} */ module = (prefix: string, dependencies?: string[]) =>\n    angular.module(prefix, dependencies);\n\nexport const /** @type {?} */ element = (e: Element | string) => angular.element(e);\n\nexport const /** @type {?} */ resumeBootstrap = () => angular.resumeBootstrap();\n\nexport const /** @type {?} */ getTestability = (e: Element) => angular.getTestability(e);\n\nexport const /** @type {?} */ version = angular.version;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * \\@stable\n */\nexport const VERSION = new Version('5.0.0-beta.0-54e0244');\n"],"names":["angular.element"],"mappings":"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"}
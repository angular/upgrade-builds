{"version":3,"file":"downgrade_component.js","sourceRoot":"","sources":["../../../../../../packages/upgrade/src/common/downgrade_component.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactory, ComponentFactoryResolver, Injector, NgZone, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {$COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, LAZY_MODULE_REF, REQUIRE_INJECTOR, REQUIRE_NG_MODEL} from './constants';\nimport {DowngradeComponentAdapter} from './downgrade_component_adapter';\nimport {LazyModuleRef, controllerKey, getComponentName, isFunction} from './util';\n\n\ninterface Thenable<T> {\n  then(callback: (value: T) => any): any;\n}\n\n/**\n * @description\n *\n * A helper function that allows an Angular component to be used from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function to be used for registering\n * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * ### Examples\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * @param info contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n *\n * @returns a factory function that can be used to register the component in an\n * AngularJS module.\n *\n * @experimental\n */\nexport function downgradeComponent(info: {\n  component: Type<any>;\n  /** @experimental */\n  propagateDigest?: boolean;\n  /** @deprecated since v4. This parameter is no longer used */\n  inputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  outputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  selectors?: string[];\n}): any /* angular.IInjectable */ {\n  const directiveFactory:\n      angular.IAnnotatedFunction = function(\n                                       $compile: angular.ICompileService,\n                                       $injector: angular.IInjectorService,\n                                       $parse: angular.IParseService): angular.IDirective {\n    // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n    // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n    // (except if explicitly escaped, in which case we shouldn't force it back in).\n    // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n    // Angular zone.\n    let needsNgZone = false;\n    let wrapCallback = <T>(cb: () => T) => cb;\n    let ngZone: NgZone;\n\n    return {\n      restrict: 'E',\n      terminal: true,\n      require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n      link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n             required: any[]) => {\n        // We might have to compile the contents asynchronously, because this might have been\n        // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n        // been compiled.\n\n        const ngModel: angular.INgModelController = required[1];\n        let parentInjector: Injector|Thenable<Injector>|undefined = required[0];\n        let ranAsync = false;\n\n        if (!parentInjector) {\n          const lazyModuleRef = $injector.get(LAZY_MODULE_REF) as LazyModuleRef;\n          needsNgZone = lazyModuleRef.needsNgZone;\n          parentInjector = lazyModuleRef.injector || lazyModuleRef.promise as Promise<Injector>;\n        }\n\n        const doDowngrade = (injector: Injector) => {\n          const componentFactoryResolver: ComponentFactoryResolver =\n              injector.get(ComponentFactoryResolver);\n          const componentFactory: ComponentFactory<any> =\n              componentFactoryResolver.resolveComponentFactory(info.component) !;\n\n          if (!componentFactory) {\n            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n          }\n\n          const injectorPromise = new ParentInjectorPromise(element);\n          const facade = new DowngradeComponentAdapter(\n              element, attrs, scope, ngModel, injector, $injector, $compile, $parse,\n              componentFactory, wrapCallback);\n\n          const projectableNodes = facade.compileContents();\n          facade.createComponent(projectableNodes);\n          facade.setupInputs(needsNgZone, info.propagateDigest);\n          facade.setupOutputs();\n          facade.registerCleanup();\n\n          injectorPromise.resolve(facade.getInjector());\n\n          if (ranAsync) {\n            // If this is run async, it is possible that it is not run inside a\n            // digest and initial input values will not be detected.\n            scope.$evalAsync(() => {});\n          }\n        };\n\n        const downgradeFn = !needsNgZone ? doDowngrade : (injector: Injector) => {\n          if (!ngZone) {\n            ngZone = injector.get(NgZone);\n            wrapCallback = <T>(cb: () => T) => () =>\n                NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n          }\n\n          wrapCallback(() => doDowngrade(injector))();\n        };\n\n        if (isThenable<Injector>(parentInjector)) {\n          parentInjector.then(downgradeFn);\n        } else {\n          downgradeFn(parentInjector);\n        }\n\n        ranAsync = true;\n      }\n    };\n  };\n\n  // bracket-notation because of closure - see #14441\n  directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n  return directiveFactory;\n}\n\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nclass ParentInjectorPromise {\n  private injector: Injector;\n  private injectorKey: string = controllerKey(INJECTOR_KEY);\n  private callbacks: ((injector: Injector) => any)[] = [];\n\n  constructor(private element: angular.IAugmentedJQuery) {\n    // Store the promise on the element.\n    element.data !(this.injectorKey, this);\n  }\n\n  then(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n\n  resolve(injector: Injector) {\n    this.injector = injector;\n\n    // Store the real injector on the element.\n    this.element.data !(this.injectorKey, injector);\n\n    // Release the element to prevent memory leaks.\n    this.element = null !;\n\n    // Run the queued callbacks.\n    this.callbacks.forEach(callback => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\nfunction isThenable<T>(obj: object): obj is Thenable<T> {\n  return isFunction((obj as any).then);\n}\n"]}
{"version":3,"file":"downgrade_module.js","sourceRoot":"","sources":["../../../../../../../packages/upgrade/static/src/static/downgrade_module.ts"],"names":[],"mappings":";;;;;;;AASA,OAAO,EAAC,eAAe,EAAC,MAAM,2BAA2B,CAAC;AAE1D,OAAO,KAAK,OAAO,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EAAC,SAAS,EAAE,YAAY,EAAE,eAAe,EAAE,mBAAmB,EAAC,MAAM,qBAAqB,CAAC;AAClG,OAAO,EAAgB,UAAU,EAAC,MAAM,gBAAgB,CAAC;AAEzD,OAAO,EAAC,iBAAiB,EAAE,kBAAkB,EAAC,MAAM,sBAAsB,CAAC;AAC3E,OAAO,EAAC,iBAAiB,EAAC,MAAM,QAAQ,CAAC;;AAIzC,MAAM,0BACF,0BAC+D;IACjE,IAAM,gBAAgB,GAAG,mBAAmB,GAAG,OAAO,CAAC;IACvD,IAAM,WAAW,GAAG,UAAU,CAAC,0BAA0B,CAAC,CAAC,CAAC;QACxD,0BAA0B,CAAC,CAAC;QAC5B,UAAC,cAAgC;YAC7B,OAAA,eAAe,CAAC,cAAc,CAAC,CAAC,sBAAsB,CAAC,0BAA0B,CAAC;QAAlF,CAAkF,CAAC;IAE3F,IAAI,QAAkB,CAAC;;IAGvB,OAAO,CAAC,MAAM,CAAC,gBAAgB,EAAE,EAAE,CAAC;SAC/B,OAAO,CACJ,YAAY,EACZ;QACE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACd,MAAM,IAAI,KAAK,CACX,4EAA4E,CAAC,CAAC;SACnF;QACD,MAAM,CAAC,QAAQ,CAAC;KACjB,CAAC;SACL,OAAO,CAAC,eAAe,EAAE;QACxB,SAAS;QACT,UAAC,SAAmC;YAClC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YAC9B,IAAM,MAAM,GAAkB;gBAC5B,WAAW,EAAE,IAAI;gBACjB,OAAO,EAAE,WAAW,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,UAAA,GAAG;oBAC9C,QAAQ,GAAG,MAAM,CAAC,QAAQ,GAAG,IAAI,iBAAiB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;oBACjE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;oBAExB,MAAM,CAAC,QAAQ,CAAC;iBACjB,CAAC;aACH,CAAC;YACF,MAAM,CAAC,MAAM,CAAC;SACf;KACF,CAAC,CAAC;IAEP,MAAM,CAAC,gBAAgB,CAAC;CACzB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, NgModuleFactory, NgModuleRef, StaticProvider} from '@angular/core';\nimport {platformBrowser} from '@angular/platform-browser';\n\nimport * as angular from '../common/angular1';\nimport {$INJECTOR, INJECTOR_KEY, LAZY_MODULE_REF, UPGRADE_MODULE_NAME} from '../common/constants';\nimport {LazyModuleRef, isFunction} from '../common/util';\n\nimport {angular1Providers, setTempInjectorRef} from './angular1_providers';\nimport {NgAdapterInjector} from './util';\n\n\n/** @experimental */\nexport function downgradeModule<T>(\n    moduleFactoryOrBootstrapFn: NgModuleFactory<T>|\n    ((extraProviders: StaticProvider[]) => Promise<NgModuleRef<T>>)): string {\n  const LAZY_MODULE_NAME = UPGRADE_MODULE_NAME + '.lazy';\n  const bootstrapFn = isFunction(moduleFactoryOrBootstrapFn) ?\n      moduleFactoryOrBootstrapFn :\n      (extraProviders: StaticProvider[]) =>\n          platformBrowser(extraProviders).bootstrapModuleFactory(moduleFactoryOrBootstrapFn);\n\n  let injector: Injector;\n\n  // Create an ng1 module to bootstrap.\n  angular.module(LAZY_MODULE_NAME, [])\n      .factory(\n          INJECTOR_KEY,\n          () => {\n            if (!injector) {\n              throw new Error(\n                  'Trying to get the Angular injector before bootstrapping an Angular module.');\n            }\n            return injector;\n          })\n      .factory(LAZY_MODULE_REF, [\n        $INJECTOR,\n        ($injector: angular.IInjectorService) => {\n          setTempInjectorRef($injector);\n          const result: LazyModuleRef = {\n            needsNgZone: true,\n            promise: bootstrapFn(angular1Providers).then(ref => {\n              injector = result.injector = new NgAdapterInjector(ref.injector);\n              injector.get($INJECTOR);\n\n              return injector;\n            })\n          };\n          return result;\n        }\n      ]);\n\n  return LAZY_MODULE_NAME;\n}\n"]}
{"version":3,"file":"static.mjs","sources":["../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/src/common/src/component_info.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/src/common/src/util.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/src/common/src/downgrade_component_adapter.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/src/common/src/promise_util.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/src/common/src/downgrade_component.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/src/common/src/downgrade_injectable.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/src/common/src/security/trusted_types.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/src/common/src/upgrade_helper.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/static/src/angular1_providers.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/static/src/util.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/static/src/upgrade_component.ts","../../../../../k8-fastbuild-ST-199a4f3c4e20/bin/packages/upgrade/static/src/upgrade_module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nexport class PropertyBinding {\n  bracketAttr: string;\n  bracketParenAttr: string;\n  parenAttr: string;\n  onAttr: string;\n  bindAttr: string;\n  bindonAttr: string;\n\n  constructor(\n    public prop: string,\n    public attr: string,\n  ) {\n    this.bracketAttr = `[${this.attr}]`;\n    this.parenAttr = `(${this.attr})`;\n    this.bracketParenAttr = `[(${this.attr})]`;\n    const capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.slice(1);\n    this.onAttr = `on${capitalAttr}`;\n    this.bindAttr = `bind${capitalAttr}`;\n    this.bindonAttr = `bindon${capitalAttr}`;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector, Type, ɵNG_MOD_DEF} from '@angular/core';\n\nimport {\n  element as angularElement,\n  IAugmentedJQuery,\n  IInjectorService,\n  INgModelController,\n  IRootScopeService,\n} from './angular1';\nimport {\n  $ROOT_ELEMENT,\n  $ROOT_SCOPE,\n  DOWNGRADED_MODULE_COUNT_KEY,\n  UPGRADE_APP_TYPE_KEY,\n} from './constants';\n\nconst DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\nconst DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n\nexport function onError(e: any) {\n  // TODO: (misko): We seem to not have a stack trace here!\n  console.error(e, e.stack);\n  throw e;\n}\n\n/**\n * Clean the jqLite/jQuery data on the element and all its descendants.\n * Equivalent to how jqLite/jQuery invoke `cleanData()` on an Element when removed:\n *   https://github.com/angular/angular.js/blob/2e72ea13fa98bebf6ed4b5e3c45eaf5f990ed16f/src/jqLite.js#L349-L355\n *   https://github.com/jquery/jquery/blob/6984d1747623dbc5e87fd6c261a5b6b1628c107c/src/manipulation.js#L182\n *\n * NOTE:\n * `cleanData()` will also invoke the AngularJS `$destroy` DOM event on the element:\n *   https://github.com/angular/angular.js/blob/2e72ea13fa98bebf6ed4b5e3c45eaf5f990ed16f/src/Angular.js#L1932-L1945\n *\n * @param node The DOM node whose data needs to be cleaned.\n */\nexport function cleanData(node: Node): void {\n  angularElement.cleanData([node]);\n  if (isParentNode(node)) {\n    angularElement.cleanData(node.querySelectorAll('*'));\n  }\n}\n\nexport function controllerKey(name: string): string {\n  return '$' + name + 'Controller';\n}\n\n/**\n * Destroy an AngularJS app given the app `$injector`.\n *\n * NOTE: Destroying an app is not officially supported by AngularJS, but try to do our best by\n *       destroying `$rootScope` and clean the jqLite/jQuery data on `$rootElement` and all\n *       descendants.\n *\n * @param $injector The `$injector` of the AngularJS app to destroy.\n */\nexport function destroyApp($injector: IInjectorService): void {\n  const $rootElement: IAugmentedJQuery = $injector.get($ROOT_ELEMENT);\n  const $rootScope: IRootScopeService = $injector.get($ROOT_SCOPE);\n\n  $rootScope.$destroy();\n  cleanData($rootElement[0]);\n}\n\nexport function directiveNormalize(name: string): string {\n  return name\n    .replace(DIRECTIVE_PREFIX_REGEXP, '')\n    .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, (_, letter) => letter.toUpperCase());\n}\n\nexport function getTypeName(type: Type<any>): string {\n  // Return the name of the type or the first line of its stringified version.\n  return (type as any).overriddenName || type.name || type.toString().split('\\n')[0];\n}\n\nexport function getDowngradedModuleCount($injector: IInjectorService): number {\n  return $injector.has(DOWNGRADED_MODULE_COUNT_KEY)\n    ? $injector.get(DOWNGRADED_MODULE_COUNT_KEY)\n    : 0;\n}\n\nexport function getUpgradeAppType($injector: IInjectorService): UpgradeAppType {\n  return $injector.has(UPGRADE_APP_TYPE_KEY)\n    ? $injector.get(UPGRADE_APP_TYPE_KEY)\n    : UpgradeAppType.None;\n}\n\nexport function isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n\nexport function isNgModuleType(value: any): value is Type<unknown> {\n  // NgModule class should have the `ɵmod` static property attached by AOT or JIT compiler.\n  return isFunction(value) && !!value[ɵNG_MOD_DEF];\n}\n\nfunction isParentNode(node: Node | ParentNode): node is ParentNode {\n  return isFunction((node as unknown as ParentNode).querySelectorAll);\n}\n\nexport function validateInjectionKey(\n  $injector: IInjectorService,\n  downgradedModule: string,\n  injectionKey: string,\n  attemptedAction: string,\n): void {\n  const upgradeAppType = getUpgradeAppType($injector);\n  const downgradedModuleCount = getDowngradedModuleCount($injector);\n\n  // Check for common errors.\n  switch (upgradeAppType) {\n    case UpgradeAppType.Dynamic:\n    case UpgradeAppType.Static:\n      if (downgradedModule) {\n        throw new Error(\n          `Error while ${attemptedAction}: 'downgradedModule' unexpectedly specified.\\n` +\n            \"You should not specify a value for 'downgradedModule', unless you are downgrading \" +\n            \"more than one Angular module (via 'downgradeModule()').\",\n        );\n      }\n      break;\n    case UpgradeAppType.Lite:\n      if (!downgradedModule && downgradedModuleCount >= 2) {\n        throw new Error(\n          `Error while ${attemptedAction}: 'downgradedModule' not specified.\\n` +\n            'This application contains more than one downgraded Angular module, thus you need to ' +\n            \"always specify 'downgradedModule' when downgrading components and injectables.\",\n        );\n      }\n\n      if (!$injector.has(injectionKey)) {\n        throw new Error(\n          `Error while ${attemptedAction}: Unable to find the specified downgraded module.\\n` +\n            'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n            'application?',\n        );\n      }\n\n      break;\n    default:\n      throw new Error(\n        `Error while ${attemptedAction}: Not a valid '@angular/upgrade' application.\\n` +\n          'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n          'application?',\n      );\n  }\n}\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  resolve!: (value: R | PromiseLike<R>) => void;\n  reject!: (error?: any) => void;\n\n  constructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\nexport interface LazyModuleRef {\n  injector?: Injector;\n  promise?: Promise<Injector>;\n}\n\nexport const enum UpgradeAppType {\n  // App NOT using `@angular/upgrade`. (This should never happen in an `ngUpgrade` app.)\n  None,\n\n  // App using the deprecated `@angular/upgrade` APIs (a.k.a. dynamic `ngUpgrade`).\n  Dynamic,\n\n  // App using `@angular/upgrade/static` with `UpgradeModule`.\n  Static,\n\n  // App using @angular/upgrade/static` with `downgradeModule()` (a.k.a `ngUpgrade`-lite ).\n  Lite,\n}\n\n/**\n * @return Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component: any) {\n  return (\n    typeof component.writeValue === 'function' && typeof component.registerOnChange === 'function'\n  );\n}\n\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n */\nexport function hookupNgModel(ngModel: INgModelController, component: any) {\n  if (ngModel && supportsNgModel(component)) {\n    ngModel.$render = () => {\n      component.writeValue(ngModel.$viewValue);\n    };\n    component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n    if (typeof component.registerOnTouched === 'function') {\n      component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n    }\n  }\n}\n\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\nexport function strictEquals(val1: any, val2: any): boolean {\n  return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  ApplicationRef,\n  ChangeDetectorRef,\n  ComponentFactory,\n  ComponentRef,\n  type EventEmitter,\n  Injector,\n  OnChanges,\n  SimpleChange,\n  SimpleChanges,\n  StaticProvider,\n  Testability,\n  TestabilityRegistry,\n  type OutputEmitterRef,\n  type ɵInputSignalNode as InputSignalNode,\n  ɵSIGNAL as SIGNAL,\n} from '@angular/core';\n\nimport {\n  IAttributes,\n  IAugmentedJQuery,\n  ICompileService,\n  INgModelController,\n  IParseService,\n  IScope,\n} from './angular1';\nimport {PropertyBinding} from './component_info';\nimport {$SCOPE} from './constants';\nimport {cleanData, getTypeName, hookupNgModel, strictEquals} from './util';\n\nconst INITIAL_VALUE = {\n  __UNINITIALIZED__: true,\n};\n\nexport class DowngradeComponentAdapter {\n  private implementsOnChanges = false;\n  private inputChangeCount: number = 0;\n  private inputChanges: SimpleChanges = {};\n  private componentScope: IScope;\n\n  constructor(\n    private element: IAugmentedJQuery,\n    private attrs: IAttributes,\n    private scope: IScope,\n    private ngModel: INgModelController,\n    private parentInjector: Injector,\n    private $compile: ICompileService,\n    private $parse: IParseService,\n    private componentFactory: ComponentFactory<any>,\n    private wrapCallback: <T>(cb: () => T) => () => T,\n    private readonly unsafelyOverwriteSignalInputs: boolean,\n  ) {\n    this.componentScope = scope.$new();\n  }\n\n  compileContents(): Node[][] {\n    const compiledProjectableNodes: Node[][] = [];\n    const projectableNodes: Node[][] = this.groupProjectableNodes();\n    const linkFns = projectableNodes.map((nodes) => this.$compile(nodes));\n\n    this.element.empty!();\n\n    linkFns.forEach((linkFn) => {\n      linkFn(this.scope, (clone: Node[]) => {\n        compiledProjectableNodes.push(clone);\n        this.element.append!(clone);\n      });\n    });\n\n    return compiledProjectableNodes;\n  }\n\n  createComponentAndSetup(\n    projectableNodes: Node[][],\n    manuallyAttachView = false,\n    propagateDigest = true,\n  ): ComponentRef<any> {\n    const component = this.createComponent(projectableNodes);\n    this.setupInputs(manuallyAttachView, propagateDigest, component);\n    this.setupOutputs(component.componentRef);\n    this.registerCleanup(component.componentRef);\n\n    return component.componentRef;\n  }\n\n  private createComponent(projectableNodes: Node[][]): ComponentInfo {\n    const providers: StaticProvider[] = [{provide: $SCOPE, useValue: this.componentScope}];\n    const childInjector = Injector.create({\n      providers: providers,\n      parent: this.parentInjector,\n      name: 'DowngradeComponentAdapter',\n    });\n\n    const componentRef = this.componentFactory.create(\n      childInjector,\n      projectableNodes,\n      this.element[0],\n    );\n    const viewChangeDetector = componentRef.injector.get(ChangeDetectorRef);\n    const changeDetector = componentRef.changeDetectorRef;\n\n    // testability hook is commonly added during component bootstrap in\n    // packages/core/src/application_ref.bootstrap()\n    // in downgraded application, component creation will take place here as well as adding the\n    // testability hook.\n    const testability = componentRef.injector.get(Testability, null);\n    if (testability) {\n      componentRef.injector\n        .get(TestabilityRegistry)\n        .registerApplication(componentRef.location.nativeElement, testability);\n    }\n\n    hookupNgModel(this.ngModel, componentRef.instance);\n\n    return {viewChangeDetector, componentRef, changeDetector};\n  }\n\n  private setupInputs(\n    manuallyAttachView: boolean,\n    propagateDigest = true,\n    {componentRef, changeDetector, viewChangeDetector}: ComponentInfo,\n  ): void {\n    const attrs = this.attrs;\n    const inputs = this.componentFactory.inputs || [];\n    for (const input of inputs) {\n      const inputBinding = new PropertyBinding(input.propName, input.templateName);\n      let expr: string | null = null;\n\n      if (attrs.hasOwnProperty(inputBinding.attr)) {\n        const observeFn = ((prop, isSignal) => {\n          let prevValue = INITIAL_VALUE;\n          return (currValue: any) => {\n            // Initially, both `$observe()` and `$watch()` will call this function.\n            if (!strictEquals(prevValue, currValue)) {\n              if (prevValue === INITIAL_VALUE) {\n                prevValue = currValue;\n              }\n\n              this.updateInput(componentRef, prop, prevValue, currValue, isSignal);\n              prevValue = currValue;\n            }\n          };\n        })(inputBinding.prop, input.isSignal);\n        attrs.$observe(inputBinding.attr, observeFn);\n\n        // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n        // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n        // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n        let unwatch: Function | null = this.componentScope.$watch(() => {\n          unwatch!();\n          unwatch = null;\n          observeFn(attrs[inputBinding.attr]);\n        });\n      } else if (attrs.hasOwnProperty(inputBinding.bindAttr)) {\n        expr = attrs[inputBinding.bindAttr];\n      } else if (attrs.hasOwnProperty(inputBinding.bracketAttr)) {\n        expr = attrs[inputBinding.bracketAttr];\n      } else if (attrs.hasOwnProperty(inputBinding.bindonAttr)) {\n        expr = attrs[inputBinding.bindonAttr];\n      } else if (attrs.hasOwnProperty(inputBinding.bracketParenAttr)) {\n        expr = attrs[inputBinding.bracketParenAttr];\n      }\n      if (expr != null) {\n        const watchFn = (\n          (prop, isSignal) => (currValue: unknown, prevValue: unknown) =>\n            this.updateInput(componentRef, prop, prevValue, currValue, isSignal)\n        )(inputBinding.prop, input.isSignal);\n        this.componentScope.$watch(expr, watchFn);\n      }\n    }\n\n    // Invoke `ngOnChanges()` and Change Detection (when necessary)\n    const detectChanges = () => changeDetector.detectChanges();\n    const prototype = this.componentFactory.componentType.prototype;\n    this.implementsOnChanges = !!(prototype && (<OnChanges>prototype).ngOnChanges);\n\n    this.componentScope.$watch(\n      () => this.inputChangeCount,\n      this.wrapCallback(() => {\n        // Invoke `ngOnChanges()`\n        if (this.implementsOnChanges) {\n          const inputChanges = this.inputChanges;\n          this.inputChanges = {};\n          (<OnChanges>componentRef.instance).ngOnChanges(inputChanges);\n        }\n\n        viewChangeDetector.markForCheck();\n\n        // If opted out of propagating digests, invoke change detection when inputs change.\n        if (!propagateDigest) {\n          detectChanges();\n        }\n      }),\n    );\n\n    // If not opted out of propagating digests, invoke change detection on every digest\n    if (propagateDigest) {\n      this.componentScope.$watch(this.wrapCallback(detectChanges));\n    }\n\n    // If necessary, attach the view so that it will be dirty-checked.\n    // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n    if (manuallyAttachView || !propagateDigest) {\n      let unwatch: Function | null = this.componentScope.$watch(() => {\n        unwatch!();\n        unwatch = null;\n\n        const appRef = this.parentInjector.get<ApplicationRef>(ApplicationRef);\n        appRef.attachView(componentRef.hostView);\n      });\n    }\n  }\n\n  private setupOutputs(componentRef: ComponentRef<any>) {\n    const attrs = this.attrs;\n    const outputs = this.componentFactory.outputs || [];\n    for (const output of outputs) {\n      const outputBindings = new PropertyBinding(output.propName, output.templateName);\n      const bindonAttr = outputBindings.bindonAttr.substring(\n        0,\n        outputBindings.bindonAttr.length - 6,\n      );\n      const bracketParenAttr = `[(${outputBindings.bracketParenAttr.substring(\n        2,\n        outputBindings.bracketParenAttr.length - 8,\n      )})]`;\n      // order below is important - first update bindings then evaluate expressions\n      if (attrs.hasOwnProperty(bindonAttr)) {\n        this.subscribeToOutput(componentRef, outputBindings, attrs[bindonAttr], true);\n      }\n      if (attrs.hasOwnProperty(bracketParenAttr)) {\n        this.subscribeToOutput(componentRef, outputBindings, attrs[bracketParenAttr], true);\n      }\n      if (attrs.hasOwnProperty(outputBindings.onAttr)) {\n        this.subscribeToOutput(componentRef, outputBindings, attrs[outputBindings.onAttr]);\n      }\n      if (attrs.hasOwnProperty(outputBindings.parenAttr)) {\n        this.subscribeToOutput(componentRef, outputBindings, attrs[outputBindings.parenAttr]);\n      }\n    }\n  }\n\n  private subscribeToOutput(\n    componentRef: ComponentRef<any>,\n    output: PropertyBinding,\n    expr: string,\n    isAssignment: boolean = false,\n  ) {\n    const getter = this.$parse(expr);\n    const setter = getter.assign;\n    if (isAssignment && !setter) {\n      throw new Error(`Expression '${expr}' is not assignable!`);\n    }\n    const emitter = componentRef.instance[output.prop] as EventEmitter<any> | OutputEmitterRef<any>;\n    if (emitter) {\n      const subscription = emitter.subscribe(\n        isAssignment\n          ? (v: any) => setter!(this.scope, v)\n          : (v: any) => getter(this.scope, {'$event': v}),\n      );\n      componentRef.onDestroy(() => subscription.unsubscribe());\n    } else {\n      throw new Error(\n        `Missing emitter '${output.prop}' on component '${getTypeName(\n          this.componentFactory.componentType,\n        )}'!`,\n      );\n    }\n  }\n\n  private registerCleanup(componentRef: ComponentRef<any>) {\n    const testabilityRegistry = componentRef.injector.get(TestabilityRegistry);\n    const destroyComponentRef = this.wrapCallback(() => componentRef.destroy());\n    let destroyed = false;\n\n    this.element.on!('$destroy', () => {\n      // The `$destroy` event may have been triggered by the `cleanData()` call in the\n      // `componentScope` `$destroy` handler below. In that case, we don't want to call\n      // `componentScope.$destroy()` again.\n      if (!destroyed) this.componentScope.$destroy();\n    });\n    this.componentScope.$on('$destroy', () => {\n      if (!destroyed) {\n        destroyed = true;\n        testabilityRegistry.unregisterApplication(componentRef.location.nativeElement);\n\n        // The `componentScope` might be getting destroyed, because an ancestor element is being\n        // removed/destroyed. If that is the case, jqLite/jQuery would normally invoke `cleanData()`\n        // on the removed element and all descendants.\n        //   https://github.com/angular/angular.js/blob/2e72ea13fa98bebf6ed4b5e3c45eaf5f990ed16f/src/jqLite.js#L349-L355\n        //   https://github.com/jquery/jquery/blob/6984d1747623dbc5e87fd6c261a5b6b1628c107c/src/manipulation.js#L182\n        //\n        // Here, however, `destroyComponentRef()` may under some circumstances remove the element\n        // from the DOM and therefore it will no longer be a descendant of the removed element when\n        // `cleanData()` is called. This would result in a memory leak, because the element's data\n        // and event handlers (and all objects directly or indirectly referenced by them) would be\n        // retained.\n        //\n        // To ensure the element is always properly cleaned up, we manually call `cleanData()` on\n        // this element and its descendants before destroying the `ComponentRef`.\n        cleanData(this.element[0]);\n\n        destroyComponentRef();\n      }\n    });\n  }\n\n  private updateInput(\n    componentRef: ComponentRef<any>,\n    prop: string,\n    prevValue: any,\n    currValue: any,\n    isSignal: boolean,\n  ) {\n    if (this.implementsOnChanges) {\n      this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n    }\n\n    this.inputChangeCount++;\n    if (isSignal && !this.unsafelyOverwriteSignalInputs) {\n      const node = componentRef.instance[prop][SIGNAL] as InputSignalNode<unknown, unknown>;\n      node.applyValueToInputSignal(node, currValue);\n    } else {\n      componentRef.instance[prop] = currValue;\n    }\n  }\n\n  private groupProjectableNodes() {\n    let ngContentSelectors = this.componentFactory.ngContentSelectors;\n    return groupNodesBySelector(ngContentSelectors, this.element.contents!());\n  }\n}\n\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n */\nexport function groupNodesBySelector(ngContentSelectors: string[], nodes: Node[]): Node[][] {\n  const projectableNodes: Node[][] = [];\n\n  for (let i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n    projectableNodes[i] = [];\n  }\n\n  for (let j = 0, jj = nodes.length; j < jj; ++j) {\n    const node = nodes[j];\n    const ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n    if (ngContentIndex != null) {\n      projectableNodes[ngContentIndex].push(node);\n    }\n  }\n\n  return projectableNodes;\n}\n\nfunction findMatchingNgContentIndex(element: any, ngContentSelectors: string[]): number | null {\n  const ngContentIndices: number[] = [];\n  let wildcardNgContentIndex: number = -1;\n  for (let i = 0; i < ngContentSelectors.length; i++) {\n    const selector = ngContentSelectors[i];\n    if (selector === '*') {\n      wildcardNgContentIndex = i;\n    } else {\n      if (matchesSelector(element, selector)) {\n        ngContentIndices.push(i);\n      }\n    }\n  }\n  ngContentIndices.sort();\n\n  if (wildcardNgContentIndex !== -1) {\n    ngContentIndices.push(wildcardNgContentIndex);\n  }\n  return ngContentIndices.length ? ngContentIndices[0] : null;\n}\n\nfunction matchesSelector(el: any, selector: string): boolean {\n  const elProto = <any>Element.prototype;\n\n  return el.nodeType === Node.ELEMENT_NODE\n    ? // matches is supported by all browsers from 2014 onwards except non-chromium edge\n      (elProto.matches ?? elProto.msMatchesSelector).call(el, selector)\n    : false;\n}\n\ninterface ComponentInfo {\n  componentRef: ComponentRef<any>;\n  changeDetector: ChangeDetectorRef;\n  viewChangeDetector: ChangeDetectorRef;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {isFunction} from './util';\n\nexport interface Thenable<T> {\n  then(callback: (value: T) => any): any;\n}\n\nexport function isThenable<T>(obj: unknown): obj is Thenable<T> {\n  return !!obj && isFunction((obj as any).then);\n}\n\n/**\n * Synchronous, promise-like object.\n */\nexport class SyncPromise<T> {\n  protected value: T | undefined;\n  private resolved = false;\n  private callbacks: ((value: T) => unknown)[] = [];\n\n  static all<T>(valuesOrPromises: (T | Thenable<T>)[]): SyncPromise<T[]> {\n    const aggrPromise = new SyncPromise<T[]>();\n\n    let resolvedCount = 0;\n    const results: T[] = [];\n    const resolve = (idx: number, value: T) => {\n      results[idx] = value;\n      if (++resolvedCount === valuesOrPromises.length) aggrPromise.resolve(results);\n    };\n\n    valuesOrPromises.forEach((p, idx) => {\n      if (isThenable(p)) {\n        p.then((v) => resolve(idx, v));\n      } else {\n        resolve(idx, p);\n      }\n    });\n\n    return aggrPromise;\n  }\n\n  resolve(value: T): void {\n    // Do nothing, if already resolved.\n    if (this.resolved) return;\n\n    this.value = value;\n    this.resolved = true;\n\n    // Run the queued callbacks.\n    this.callbacks.forEach((callback) => callback(value));\n    this.callbacks.length = 0;\n  }\n\n  then(callback: (value: T) => unknown): void {\n    if (this.resolved) {\n      callback(this.value!);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ComponentFactory, ComponentFactoryResolver, Injector, NgZone, Type} from '@angular/core';\n\nimport {\n  IAnnotatedFunction,\n  IAttributes,\n  IAugmentedJQuery,\n  ICompileService,\n  IDirective,\n  IInjectorService,\n  INgModelController,\n  IParseService,\n  IScope,\n} from './angular1';\nimport {\n  $COMPILE,\n  $INJECTOR,\n  $PARSE,\n  INJECTOR_KEY,\n  LAZY_MODULE_REF,\n  REQUIRE_INJECTOR,\n  REQUIRE_NG_MODEL,\n} from './constants';\nimport {DowngradeComponentAdapter} from './downgrade_component_adapter';\nimport {SyncPromise, Thenable} from './promise_util';\nimport {\n  controllerKey,\n  getDowngradedModuleCount,\n  getTypeName,\n  getUpgradeAppType,\n  LazyModuleRef,\n  UpgradeAppType,\n  validateInjectionKey,\n} from './util';\n\n/**\n * @description\n *\n * A helper function that allows an Angular component to be used from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AOT compilation*\n *\n * This helper function returns a factory function to be used for registering\n * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * @usageNotes\n * ### Examples\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * For more details and examples on downgrading Angular components to AngularJS components please\n * visit the [Upgrade guide](https://angular.io/guide/upgrade#using-angular-components-from-angularjs-code).\n *\n * @param info contains information about the Component that is being downgraded:\n *\n * - `component: Type<any>`: The type of the Component that will be downgraded\n * - `downgradedModule?: string`: The name of the downgraded module (if any) that the component\n *   \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose\n *   corresponding Angular module will be bootstrapped, when the component needs to be instantiated.\n *   <br />\n *   (This option is only necessary when using `downgradeModule()` to downgrade more than one\n *   Angular module.)\n * - `propagateDigest?: boolean`: Whether to perform {@link /api/core/ChangeDetectorRef#detectChanges detectChanges} on the\n * component on every {@link https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest $digest}.\n *   If set to `false`, change detection will still be performed when any of the component's inputs changes.\n *   (Default: true)\n *\n * @returns a factory function that can be used to register the component in an\n * AngularJS module.\n *\n * @publicApi\n */\nexport function downgradeComponent(info: {\n  component: Type<any>;\n  downgradedModule?: string;\n  propagateDigest?: boolean;\n  /** @deprecated since v4. This parameter is no longer used */\n  inputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  outputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  selectors?: string[];\n}): any /* angular.IInjectable */ {\n  const directiveFactory: IAnnotatedFunction = function (\n    $compile: ICompileService,\n    $injector: IInjectorService,\n    $parse: IParseService,\n  ): IDirective {\n    const unsafelyOverwriteSignalInputs =\n      (info as {unsafelyOverwriteSignalInputs?: boolean}).unsafelyOverwriteSignalInputs ?? false;\n    // When using `downgradeModule()`, we need to handle certain things specially. For example:\n    // - We always need to attach the component view to the `ApplicationRef` for it to be\n    //   dirty-checked.\n    // - We need to ensure callbacks to Angular APIs (e.g. change detection) are run inside the\n    //   Angular zone.\n    //   NOTE: This is not needed, when using `UpgradeModule`, because `$digest()` will be run\n    //         inside the Angular zone (except if explicitly escaped, in which case we shouldn't\n    //         force it back in).\n    const isNgUpgradeLite = getUpgradeAppType($injector) === UpgradeAppType.Lite;\n    const wrapCallback: <T>(cb: () => T) => typeof cb = !isNgUpgradeLite\n      ? (cb) => cb\n      : (cb) => () => (NgZone.isInAngularZone() ? cb() : ngZone.run(cb));\n    let ngZone: NgZone;\n\n    // When downgrading multiple modules, special handling is needed wrt injectors.\n    const hasMultipleDowngradedModules = isNgUpgradeLite && getDowngradedModuleCount($injector) > 1;\n\n    return {\n      restrict: 'E',\n      terminal: true,\n      require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n      // Controller needs to be set so that `angular-component-router.js` (from beta Angular 2)\n      // configuration properties can be made available. See:\n      // See G3: javascript/angular2/angular1_router_lib.js\n      // https://github.com/angular/angular.js/blob/47bf11ee94664367a26ed8c91b9b586d3dd420f5/src/ng/compile.js#L1670-L1691.\n      controller: function () {},\n      link: (scope: IScope, element: IAugmentedJQuery, attrs: IAttributes, required: any[]) => {\n        // We might have to compile the contents asynchronously, because this might have been\n        // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n        // been compiled.\n\n        const ngModel: INgModelController = required[1];\n        const parentInjector: Injector | Thenable<Injector> | undefined = required[0];\n        let moduleInjector: Injector | Thenable<Injector> | undefined = undefined;\n        let ranAsync = false;\n\n        if (!parentInjector || hasMultipleDowngradedModules) {\n          const downgradedModule = info.downgradedModule || '';\n          const lazyModuleRefKey = `${LAZY_MODULE_REF}${downgradedModule}`;\n          const attemptedAction = `instantiating component '${getTypeName(info.component)}'`;\n\n          validateInjectionKey($injector, downgradedModule, lazyModuleRefKey, attemptedAction);\n\n          const lazyModuleRef = $injector.get(lazyModuleRefKey) as LazyModuleRef;\n          moduleInjector = lazyModuleRef.injector ?? lazyModuleRef.promise;\n        }\n\n        // Notes:\n        //\n        // There are two injectors: `finalModuleInjector` and `finalParentInjector` (they might be\n        // the same instance, but that is irrelevant):\n        // - `finalModuleInjector` is used to retrieve `ComponentFactoryResolver`, thus it must be\n        //   on the same tree as the `NgModule` that declares this downgraded component.\n        // - `finalParentInjector` is used for all other injection purposes.\n        //   (Note that Angular knows to only traverse the component-tree part of that injector,\n        //   when looking for an injectable and then switch to the module injector.)\n        //\n        // There are basically three cases:\n        // - If there is no parent component (thus no `parentInjector`), we bootstrap the downgraded\n        //   `NgModule` and use its injector as both `finalModuleInjector` and\n        //   `finalParentInjector`.\n        // - If there is a parent component (and thus a `parentInjector`) and we are sure that it\n        //   belongs to the same `NgModule` as this downgraded component (e.g. because there is only\n        //   one downgraded module, we use that `parentInjector` as both `finalModuleInjector` and\n        //   `finalParentInjector`.\n        // - If there is a parent component, but it may belong to a different `NgModule`, then we\n        //   use the `parentInjector` as `finalParentInjector` and this downgraded component's\n        //   declaring `NgModule`'s injector as `finalModuleInjector`.\n        //   Note 1: If the `NgModule` is already bootstrapped, we just get its injector (we don't\n        //           bootstrap again).\n        //   Note 2: It is possible that (while there are multiple downgraded modules) this\n        //           downgraded component and its parent component both belong to the same NgModule.\n        //           In that case, we could have used the `parentInjector` as both\n        //           `finalModuleInjector` and `finalParentInjector`, but (for simplicity) we are\n        //           treating this case as if they belong to different `NgModule`s. That doesn't\n        //           really affect anything, since `parentInjector` has `moduleInjector` as ancestor\n        //           and trying to resolve `ComponentFactoryResolver` from either one will return\n        //           the same instance.\n\n        // If there is a parent component, use its injector as parent injector.\n        // If this is a \"top-level\" Angular component, use the module injector.\n        const finalParentInjector = parentInjector || moduleInjector!;\n\n        // If this is a \"top-level\" Angular component or the parent component may belong to a\n        // different `NgModule`, use the module injector for module-specific dependencies.\n        // If there is a parent component that belongs to the same `NgModule`, use its injector.\n        const finalModuleInjector = moduleInjector || parentInjector!;\n\n        const doDowngrade = (injector: Injector, moduleInjector: Injector) => {\n          // Retrieve `ComponentFactoryResolver` from the injector tied to the `NgModule` this\n          // component belongs to.\n          const componentFactoryResolver: ComponentFactoryResolver =\n            moduleInjector.get(ComponentFactoryResolver);\n          const componentFactory: ComponentFactory<any> =\n            componentFactoryResolver.resolveComponentFactory(info.component)!;\n\n          if (!componentFactory) {\n            throw new Error(`Expecting ComponentFactory for: ${getTypeName(info.component)}`);\n          }\n\n          const injectorPromise = new ParentInjectorPromise(element);\n          const facade = new DowngradeComponentAdapter(\n            element,\n            attrs,\n            scope,\n            ngModel,\n            injector,\n            $compile,\n            $parse,\n            componentFactory,\n            wrapCallback,\n            unsafelyOverwriteSignalInputs,\n          );\n\n          const projectableNodes = facade.compileContents();\n          const componentRef = facade.createComponentAndSetup(\n            projectableNodes,\n            isNgUpgradeLite,\n            info.propagateDigest,\n          );\n\n          injectorPromise.resolve(componentRef.injector);\n\n          if (ranAsync) {\n            // If this is run async, it is possible that it is not run inside a\n            // digest and initial input values will not be detected.\n            scope.$evalAsync(() => {});\n          }\n        };\n\n        const downgradeFn = !isNgUpgradeLite\n          ? doDowngrade\n          : (pInjector: Injector, mInjector: Injector) => {\n              if (!ngZone) {\n                ngZone = pInjector.get(NgZone);\n              }\n\n              wrapCallback(() => doDowngrade(pInjector, mInjector))();\n            };\n\n        // NOTE:\n        // Not using `ParentInjectorPromise.all()` (which is inherited from `SyncPromise`), because\n        // Closure Compiler (or some related tool) complains:\n        // `TypeError: ...$src$downgrade_component_ParentInjectorPromise.all is not a function`\n        SyncPromise.all([finalParentInjector, finalModuleInjector]).then(([pInjector, mInjector]) =>\n          downgradeFn(pInjector, mInjector),\n        );\n\n        ranAsync = true;\n      },\n    };\n  };\n\n  // bracket-notation because of closure - see #14441\n  directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n  return directiveFactory;\n}\n\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's `$compile`.\n */\nclass ParentInjectorPromise extends SyncPromise<Injector> {\n  private injectorKey: string = controllerKey(INJECTOR_KEY);\n\n  constructor(private element: IAugmentedJQuery) {\n    super();\n\n    // Store the promise on the element.\n    element.data!(this.injectorKey, this);\n  }\n\n  override resolve(injector: Injector): void {\n    // Store the real injector on the element.\n    this.element.data!(this.injectorKey, injector);\n\n    // Release the element to prevent memory leaks.\n    this.element = null!;\n\n    // Resolve the promise.\n    super.resolve(injector);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {Injector} from '@angular/core';\n\nimport {IInjectorService} from './angular1';\nimport {$INJECTOR, INJECTOR_KEY} from './constants';\nimport {getTypeName, isFunction, validateInjectionKey} from './util';\n\n/**\n * @description\n *\n * A helper function to allow an Angular service to be accessible from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AOT compilation*\n *\n * This helper function returns a factory function that provides access to the Angular\n * service identified by the `token` parameter.\n *\n * @usageNotes\n * ### Examples\n *\n * First ensure that the service to be downgraded is provided in an `NgModule`\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app `NgModule`\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n *\n * <div class=\"docs-alert docs-alert-important\">\n *\n *   When using `downgradeModule()`, downgraded injectables will not be available until the Angular\n *   module that provides them is instantiated. In order to be safe, you need to ensure that the\n *   downgraded injectables are not used anywhere _outside_ the part of the app where it is\n *   guaranteed that their module has been instantiated.\n *\n *   For example, it is _OK_ to use a downgraded service in an upgraded component that is only used\n *   from a downgraded Angular component provided by the same Angular module as the injectable, but\n *   it is _not OK_ to use it in an AngularJS component that may be used independently of Angular or\n *   use it in a downgraded Angular component from a different module.\n *\n * </div>\n *\n * @param token an `InjectionToken` that identifies a service provided from Angular.\n * @param downgradedModule the name of the downgraded module (if any) that the injectable\n * \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose injector will\n * be used for instantiating the injectable.<br />\n * (This option is only necessary when using `downgradeModule()` to downgrade more than one Angular\n * module.)\n *\n * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n * @publicApi\n */\nexport function downgradeInjectable(token: any, downgradedModule: string = ''): Function {\n  const factory = function ($injector: IInjectorService) {\n    const injectorKey = `${INJECTOR_KEY}${downgradedModule}`;\n    const injectableName = isFunction(token) ? getTypeName(token) : String(token);\n    const attemptedAction = `instantiating injectable '${injectableName}'`;\n\n    validateInjectionKey($injector, downgradedModule, injectorKey, attemptedAction);\n\n    try {\n      const injector: Injector = $injector.get(injectorKey);\n      return injector.get(token);\n    } catch (err) {\n      throw new Error(`Error while ${attemptedAction}: ${(err as Error).message || err}`);\n    }\n  };\n  (factory as any)['$inject'] = [$INJECTOR];\n\n  return factory;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\n/**\n * @fileoverview\n * A module to facilitate use of a Trusted Types policy internally within\n * the upgrade package. It lazily constructs the Trusted Types policy, providing\n * helper utilities for promoting strings to Trusted Types. When Trusted Types\n * are not available, strings are used as a fallback.\n * @security All use of this module is security-sensitive and should go through\n * security review.\n */\n\nimport {TrustedHTML, TrustedTypePolicy, TrustedTypePolicyFactory} from './trusted_types_defs';\n\n/**\n * The Trusted Types policy, or null if Trusted Types are not\n * enabled/supported, or undefined if the policy has not been created yet.\n */\nlet policy: TrustedTypePolicy | null | undefined;\n\n/**\n * Returns the Trusted Types policy, or null if Trusted Types are not\n * enabled/supported. The first call to this function will create the policy.\n */\nfunction getPolicy(): TrustedTypePolicy | null {\n  if (policy === undefined) {\n    policy = null;\n    const windowWithTrustedTypes = window as unknown as {trustedTypes?: TrustedTypePolicyFactory};\n    if (windowWithTrustedTypes.trustedTypes) {\n      try {\n        policy = windowWithTrustedTypes.trustedTypes.createPolicy('angular#unsafe-upgrade', {\n          createHTML: (s: string) => s,\n        });\n      } catch {\n        // trustedTypes.createPolicy throws if called with a name that is\n        // already registered, even in report-only mode. Until the API changes,\n        // catch the error not to break the applications functionally. In such\n        // cases, the code will fall back to using strings.\n      }\n    }\n  }\n  return policy;\n}\n\n/**\n * Unsafely promote a legacy AngularJS template to a TrustedHTML, falling back\n * to strings when Trusted Types are not available.\n * @security This is a security-sensitive function; any use of this function\n * must go through security review. In particular, the template string should\n * always be under full control of the application author, as untrusted input\n * can cause an XSS vulnerability.\n */\nexport function trustedHTMLFromLegacyTemplate(html: string): TrustedHTML | string {\n  return getPolicy()?.createHTML(html) || html;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {ElementRef, Injector, SimpleChanges} from '@angular/core';\n\nimport {\n  DirectiveRequireProperty,\n  element as angularElement,\n  IAugmentedJQuery,\n  ICloneAttachFunction,\n  ICompileService,\n  IController,\n  IControllerService,\n  IDirective,\n  IHttpBackendService,\n  IInjectorService,\n  ILinkFn,\n  IScope,\n  ITemplateCacheService,\n  SingleOrListOrMap,\n} from './angular1';\nimport {$COMPILE, $CONTROLLER, $HTTP_BACKEND, $INJECTOR, $TEMPLATE_CACHE} from './constants';\nimport {cleanData, controllerKey, directiveNormalize, isFunction} from './util';\nimport {TrustedHTML} from './security/trusted_types_defs';\nimport {trustedHTMLFromLegacyTemplate} from './security/trusted_types';\n\n// Constants\nconst REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n\n// Interfaces\nexport interface IBindingDestination {\n  [key: string]: any;\n  $onChanges?: (changes: SimpleChanges) => void;\n}\n\nexport interface IControllerInstance extends IBindingDestination {\n  $doCheck?: () => void;\n  $onDestroy?: () => void;\n  $onInit?: () => void;\n  $postLink?: () => void;\n}\n\n// Classes\nexport class UpgradeHelper {\n  public readonly $injector: IInjectorService;\n  public readonly element: Element;\n  public readonly $element: IAugmentedJQuery;\n  public readonly directive: IDirective;\n\n  private readonly $compile: ICompileService;\n  private readonly $controller: IControllerService;\n\n  constructor(\n    injector: Injector,\n    private name: string,\n    elementRef: ElementRef,\n    directive?: IDirective,\n  ) {\n    this.$injector = injector.get($INJECTOR);\n    this.$compile = this.$injector.get($COMPILE);\n    this.$controller = this.$injector.get($CONTROLLER);\n\n    this.element = elementRef.nativeElement;\n    this.$element = angularElement(this.element);\n\n    this.directive = directive ?? UpgradeHelper.getDirective(this.$injector, name);\n  }\n\n  static getDirective($injector: IInjectorService, name: string): IDirective {\n    const directives: IDirective[] = $injector.get(name + 'Directive');\n    if (directives.length > 1) {\n      throw new Error(`Only support single directive definition for: ${name}`);\n    }\n\n    const directive = directives[0];\n\n    // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n    // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n    if (directive.compile && !directive.link) notSupported(name, 'compile');\n    if (directive.replace) notSupported(name, 'replace');\n    if (directive.terminal) notSupported(name, 'terminal');\n\n    return directive;\n  }\n\n  static getTemplate(\n    $injector: IInjectorService,\n    directive: IDirective,\n    fetchRemoteTemplate = false,\n    $element?: IAugmentedJQuery,\n  ): string | TrustedHTML | Promise<string | TrustedHTML> {\n    if (directive.template !== undefined) {\n      return trustedHTMLFromLegacyTemplate(getOrCall<string>(directive.template, $element));\n    } else if (directive.templateUrl) {\n      const $templateCache = $injector.get($TEMPLATE_CACHE) as ITemplateCacheService;\n      const url = getOrCall<string>(directive.templateUrl, $element);\n      const template = $templateCache.get(url);\n\n      if (template !== undefined) {\n        return trustedHTMLFromLegacyTemplate(template);\n      } else if (!fetchRemoteTemplate) {\n        throw new Error('loading directive templates asynchronously is not supported');\n      }\n\n      return new Promise((resolve, reject) => {\n        const $httpBackend = $injector.get($HTTP_BACKEND) as IHttpBackendService;\n        $httpBackend('GET', url, null, (status: number, response: string) => {\n          if (status === 200) {\n            resolve(trustedHTMLFromLegacyTemplate($templateCache.put(url, response)));\n          } else {\n            reject(`GET component template from '${url}' returned '${status}: ${response}'`);\n          }\n        });\n      });\n    } else {\n      throw new Error(`Directive '${directive.name}' is not a component, it is missing template.`);\n    }\n  }\n\n  buildController(controllerType: IController, $scope: IScope) {\n    // TODO: Document that we do not pre-assign bindings on the controller instance.\n    // Quoted properties below so that this code can be optimized with Closure Compiler.\n    const locals = {'$scope': $scope, '$element': this.$element};\n    const controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n\n    this.$element.data?.(controllerKey(this.directive.name!), controller);\n\n    return controller;\n  }\n\n  compileTemplate(template?: string | TrustedHTML): ILinkFn {\n    if (template === undefined) {\n      template = UpgradeHelper.getTemplate(this.$injector, this.directive, false, this.$element) as\n        | string\n        | TrustedHTML;\n    }\n\n    return this.compileHtml(template);\n  }\n\n  onDestroy($scope: IScope, controllerInstance?: any) {\n    if (controllerInstance && isFunction(controllerInstance.$onDestroy)) {\n      controllerInstance.$onDestroy();\n    }\n    $scope.$destroy();\n    cleanData(this.element);\n  }\n\n  prepareTransclusion(): ILinkFn | undefined {\n    const transclude = this.directive.transclude;\n    const contentChildNodes = this.extractChildNodes();\n    const attachChildrenFn: ILinkFn = (scope, cloneAttachFn) => {\n      // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n      // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n      // there will be no transclusion scope here.\n      // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n      scope = scope || {$destroy: () => undefined};\n      return cloneAttachFn!($template, scope);\n    };\n    let $template = contentChildNodes;\n\n    if (transclude) {\n      const slots = Object.create(null);\n\n      if (typeof transclude === 'object') {\n        $template = [];\n\n        const slotMap = Object.create(null);\n        const filledSlots = Object.create(null);\n\n        // Parse the element selectors.\n        Object.keys(transclude).forEach((slotName) => {\n          let selector = transclude[slotName];\n          const optional = selector.charAt(0) === '?';\n          selector = optional ? selector.substring(1) : selector;\n\n          slotMap[selector] = slotName;\n          slots[slotName] = null; // `null`: Defined but not yet filled.\n          filledSlots[slotName] = optional; // Consider optional slots as filled.\n        });\n\n        // Add the matching elements into their slot.\n        contentChildNodes.forEach((node) => {\n          const slotName = slotMap[directiveNormalize(node.nodeName.toLowerCase())];\n          if (slotName) {\n            filledSlots[slotName] = true;\n            slots[slotName] = slots[slotName] || [];\n            slots[slotName].push(node);\n          } else {\n            $template.push(node);\n          }\n        });\n\n        // Check for required slots that were not filled.\n        Object.keys(filledSlots).forEach((slotName) => {\n          if (!filledSlots[slotName]) {\n            throw new Error(`Required transclusion slot '${slotName}' on directive: ${this.name}`);\n          }\n        });\n\n        Object.keys(slots)\n          .filter((slotName) => slots[slotName])\n          .forEach((slotName) => {\n            const nodes = slots[slotName];\n            slots[slotName] = (scope: IScope, cloneAttach: ICloneAttachFunction) => {\n              return cloneAttach!(nodes, scope);\n            };\n          });\n      }\n\n      // Attach `$$slots` to default slot transclude fn.\n      attachChildrenFn.$$slots = slots;\n\n      // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n      // removes all text content after the first interpolation and updates it later, after\n      // evaluating the expressions. This would result in AngularJS failing to recognize text\n      // nodes that start with an interpolation as transcluded content and use the fallback\n      // content instead.\n      // To avoid this issue, we add a\n      // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n      // to empty text nodes (which can only be a result of Angular removing their initial content).\n      // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n      //       will still fail to be detected by AngularJS v1.6+\n      $template.forEach((node) => {\n        if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n          node.nodeValue = '\\u200C';\n        }\n      });\n    }\n\n    return attachChildrenFn;\n  }\n\n  resolveAndBindRequiredControllers(controllerInstance: IControllerInstance | null) {\n    const directiveRequire = this.getDirectiveRequire();\n    const requiredControllers = this.resolveRequire(directiveRequire);\n\n    if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n      const requiredControllersMap = requiredControllers as {[key: string]: IControllerInstance};\n      Object.keys(requiredControllersMap).forEach((key) => {\n        controllerInstance[key] = requiredControllersMap[key];\n      });\n    }\n\n    return requiredControllers;\n  }\n\n  private compileHtml(html: string | TrustedHTML): ILinkFn {\n    this.element.innerHTML = html;\n    return this.$compile(this.element.childNodes);\n  }\n\n  private extractChildNodes(): Node[] {\n    const childNodes: Node[] = [];\n    let childNode: Node | null;\n\n    while ((childNode = this.element.firstChild)) {\n      (childNode as Element | Comment | Text).remove();\n      childNodes.push(childNode);\n    }\n\n    return childNodes;\n  }\n\n  private getDirectiveRequire(): DirectiveRequireProperty {\n    const require = this.directive.require || (this.directive.controller && this.directive.name)!;\n\n    if (isMap(require)) {\n      Object.entries(require).forEach(([key, value]) => {\n        const match = value.match(REQUIRE_PREFIX_RE)!;\n        const name = value.substring(match[0].length);\n\n        if (!name) {\n          require[key] = match[0] + key;\n        }\n      });\n    }\n\n    return require;\n  }\n\n  private resolveRequire(\n    require: DirectiveRequireProperty,\n  ): SingleOrListOrMap<IControllerInstance> | null {\n    if (!require) {\n      return null;\n    } else if (Array.isArray(require)) {\n      return require.map((req) => this.resolveRequire(req));\n    } else if (typeof require === 'object') {\n      const value: {[key: string]: IControllerInstance} = {};\n      Object.keys(require).forEach((key) => (value[key] = this.resolveRequire(require[key])!));\n      return value;\n    } else if (typeof require === 'string') {\n      const match = require.match(REQUIRE_PREFIX_RE)!;\n      const inheritType = match[1] || match[3];\n\n      const name = require.substring(match[0].length);\n      const isOptional = !!match[2];\n      const searchParents = !!inheritType;\n      const startOnParent = inheritType === '^^';\n\n      const ctrlKey = controllerKey(name);\n      const elem = startOnParent ? this.$element.parent!() : this.$element;\n      const value = searchParents ? elem.inheritedData!(ctrlKey) : elem.data!(ctrlKey);\n\n      if (!value && !isOptional) {\n        throw new Error(\n          `Unable to find required '${require}' in upgraded directive '${this.name}'.`,\n        );\n      }\n\n      return value;\n    } else {\n      throw new Error(\n        `Unrecognized 'require' syntax on upgraded directive '${this.name}': ${require}`,\n      );\n    }\n  }\n}\n\nfunction getOrCall<T>(property: T | Function, ...args: any[]): T {\n  return isFunction(property) ? property(...args) : property;\n}\n\n// NOTE: Only works for `typeof T !== 'object'`.\nfunction isMap<T>(value: SingleOrListOrMap<T>): value is {[key: string]: T} {\n  return value && !Array.isArray(value) && typeof value === 'object';\n}\n\nfunction notSupported(name: string, feature: string) {\n  throw new Error(`Upgraded directive '${name}' contains unsupported feature: '${feature}'.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {IInjectorService} from '../../src/common/src/angular1';\n\n// We have to do a little dance to get the ng1 injector into the module injector.\n// We store the ng1 injector so that the provider in the module injector can access it\n// Then we \"get\" the ng1 injector from the module injector, which triggers the provider to read\n// the stored injector and release the reference to it.\nlet tempInjectorRef: IInjectorService | null = null;\nexport function setTempInjectorRef(injector: IInjectorService) {\n  tempInjectorRef = injector;\n}\nexport function injectorFactory() {\n  if (!tempInjectorRef) {\n    throw new Error('Trying to get the AngularJS injector before it being set.');\n  }\n\n  const injector: IInjectorService = tempInjectorRef;\n  tempInjectorRef = null; // clear the value to prevent memory leaks\n  return injector;\n}\n\nexport function rootScopeFactory(i: IInjectorService) {\n  return i.get('$rootScope');\n}\n\nexport function compileFactory(i: IInjectorService) {\n  return i.get('$compile');\n}\n\nexport function parseFactory(i: IInjectorService) {\n  return i.get('$parse');\n}\n\nexport const angular1Providers = [\n  // We must use exported named functions for the ng2 factories to keep the compiler happy:\n  // > Metadata collected contains an error that will be reported at runtime:\n  // >   Function calls are not supported.\n  // >   Consider replacing the function or lambda with a reference to an exported function\n  {provide: '$injector', useFactory: injectorFactory, deps: []},\n  {provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector']},\n  {provide: '$compile', useFactory: compileFactory, deps: ['$injector']},\n  {provide: '$parse', useFactory: parseFactory, deps: ['$injector']},\n];\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Injector,\n  ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR as NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR,\n} from '@angular/core';\n\nexport class NgAdapterInjector implements Injector {\n  constructor(private modInjector: Injector) {}\n\n  // When Angular locate a service in the component injector tree, the not found value is set to\n  // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module\n  // injector.\n  // AngularJS only supports a single tree and should always check the module injector.\n  get(token: any, notFoundValue?: any): any {\n    if (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n      return notFoundValue;\n    }\n\n    return this.modInjector.get(token, notFoundValue);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Injector,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n} from '@angular/core';\n\nimport {ɵangular1, ɵconstants, ɵupgradeHelper, ɵutil} from '../common';\n\nconst NOT_SUPPORTED: any = 'NOT_SUPPORTED';\nconst INITIAL_VALUE = {\n  __UNINITIALIZED__: true,\n};\n\nclass Bindings {\n  twoWayBoundProperties: string[] = [];\n  twoWayBoundLastValues: any[] = [];\n\n  expressionBoundProperties: string[] = [];\n\n  propertyToOutputMap: {[propName: string]: string} = {};\n}\n\n/**\n * @description\n *\n * A helper class that allows an AngularJS component to be used from Angular.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AOT compilation.*\n *\n * This helper class should be used as a base class for creating Angular directives\n * that wrap AngularJS components that need to be \"upgraded\".\n *\n * @usageNotes\n * ### Examples\n *\n * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n * to be made available in Angular templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero\"}\n *\n * We must create a `Directive` that will make this AngularJS component\n * available inside Angular templates.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\"}\n *\n * In this example you can see that we must derive from the `UpgradeComponent`\n * base class but also provide an {@link Directive `@Directive`} decorator. This is\n * because the AOT compiler requires that this information is statically available at\n * compile time.\n *\n * Note that we must do the following:\n * * specify the directive's selector (`ng1-hero`)\n * * specify all inputs and outputs that the AngularJS component expects\n * * derive from `UpgradeComponent`\n * * call the base class from the constructor, passing\n *   * the AngularJS name of the component (`ng1Hero`)\n *   * the `ElementRef` and `Injector` for the component wrapper\n *\n * @publicApi\n * @extensible\n */\n@Directive()\nexport class UpgradeComponent implements OnInit, OnChanges, DoCheck, OnDestroy {\n  private helper: ɵupgradeHelper.UpgradeHelper;\n\n  private $element: ɵangular1.IAugmentedJQuery;\n  private $componentScope: ɵangular1.IScope;\n\n  private directive: ɵangular1.IDirective;\n  private bindings: Bindings;\n\n  private controllerInstance?: ɵupgradeHelper.IControllerInstance;\n  private bindingDestination?: ɵupgradeHelper.IBindingDestination;\n\n  // We will be instantiating the controller in the `ngOnInit` hook, when the\n  // first `ngOnChanges` will have been already triggered. We store the\n  // `SimpleChanges` and \"play them back\" later.\n  private pendingChanges: SimpleChanges | null = null;\n\n  private unregisterDoCheckWatcher?: Function;\n\n  /**\n   * Create a new `UpgradeComponent` instance. You should not normally need to do this.\n   * Instead you should derive a new class from this one and call the super constructor\n   * from the base class.\n   *\n   * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\" }\n   *\n   * * The `name` parameter should be the name of the AngularJS directive.\n   * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency\n   *   injection into the base class constructor.\n   */\n  constructor(name: string, elementRef: ElementRef, injector: Injector) {\n    this.helper = new ɵupgradeHelper.UpgradeHelper(injector, name, elementRef);\n\n    this.$element = this.helper.$element;\n\n    this.directive = this.helper.directive;\n    this.bindings = this.initializeBindings(this.directive, name);\n\n    // We ask for the AngularJS scope from the Angular injector, since\n    // we will put the new component scope onto the new injector for each component\n    const $parentScope = injector.get(ɵconstants.$SCOPE);\n    // QUESTION 1: Should we create an isolated scope if the scope is only true?\n    // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?\n    this.$componentScope = $parentScope.$new(!!this.directive.scope);\n\n    this.initializeOutputs();\n  }\n\n  /** @docs-private */\n  ngOnInit() {\n    // Collect contents, insert and compile template\n    const attachChildNodes: ɵangular1.ILinkFn | undefined = this.helper.prepareTransclusion();\n    const linkFn = this.helper.compileTemplate();\n\n    // Instantiate controller\n    const controllerType = this.directive.controller;\n    const bindToController = this.directive.bindToController;\n    let controllerInstance = controllerType\n      ? this.helper.buildController(controllerType, this.$componentScope)\n      : undefined;\n    let bindingDestination: ɵupgradeHelper.IBindingDestination;\n\n    if (!bindToController) {\n      bindingDestination = this.$componentScope;\n    } else if (controllerType && controllerInstance) {\n      bindingDestination = controllerInstance;\n    } else {\n      throw new Error(\n        `Upgraded directive '${this.directive.name}' specifies 'bindToController' but no controller.`,\n      );\n    }\n    this.controllerInstance = controllerInstance;\n    this.bindingDestination = bindingDestination;\n\n    // Set up outputs\n    this.bindOutputs(bindingDestination);\n\n    // Require other controllers\n    const requiredControllers = this.helper.resolveAndBindRequiredControllers(controllerInstance);\n\n    // Hook: $onChanges\n    if (this.pendingChanges) {\n      this.forwardChanges(this.pendingChanges, bindingDestination);\n      this.pendingChanges = null;\n    }\n\n    // Hook: $onInit\n    if (this.controllerInstance && ɵutil.isFunction(this.controllerInstance.$onInit)) {\n      this.controllerInstance.$onInit();\n    }\n\n    // Hook: $doCheck\n    if (controllerInstance && ɵutil.isFunction(controllerInstance.$doCheck)) {\n      const callDoCheck = () => controllerInstance?.$doCheck?.();\n\n      this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);\n      callDoCheck();\n    }\n\n    // Linking\n    const link = this.directive.link;\n    const preLink = typeof link == 'object' && link.pre;\n    const postLink = typeof link == 'object' ? link.post : link;\n    const attrs: ɵangular1.IAttributes = NOT_SUPPORTED;\n    const transcludeFn: ɵangular1.ITranscludeFunction = NOT_SUPPORTED;\n    if (preLink) {\n      preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    linkFn(this.$componentScope, null!, {parentBoundTranscludeFn: attachChildNodes});\n\n    if (postLink) {\n      postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    // Hook: $postLink\n    if (this.controllerInstance && ɵutil.isFunction(this.controllerInstance.$postLink)) {\n      this.controllerInstance.$postLink();\n    }\n  }\n\n  /** @docs-private */\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.bindingDestination) {\n      this.pendingChanges = changes;\n    } else {\n      this.forwardChanges(changes, this.bindingDestination);\n    }\n  }\n\n  /** @docs-private */\n  ngDoCheck() {\n    const twoWayBoundProperties = this.bindings.twoWayBoundProperties;\n    const twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;\n    const propertyToOutputMap = this.bindings.propertyToOutputMap;\n\n    twoWayBoundProperties.forEach((propName, idx) => {\n      const newValue = this.bindingDestination?.[propName];\n      const oldValue = twoWayBoundLastValues[idx];\n\n      if (!Object.is(newValue, oldValue)) {\n        const outputName = propertyToOutputMap[propName];\n        const eventEmitter: EventEmitter<any> = (this as any)[outputName];\n\n        eventEmitter.emit(newValue);\n        twoWayBoundLastValues[idx] = newValue;\n      }\n    });\n  }\n\n  /** @docs-private */\n  ngOnDestroy() {\n    if (ɵutil.isFunction(this.unregisterDoCheckWatcher)) {\n      this.unregisterDoCheckWatcher();\n    }\n    this.helper.onDestroy(this.$componentScope, this.controllerInstance);\n  }\n\n  private initializeBindings(directive: ɵangular1.IDirective, name: string) {\n    const btcIsObject = typeof directive.bindToController === 'object';\n    if (btcIsObject && Object.keys(directive.scope!).length) {\n      throw new Error(\n        `Binding definitions on scope and controller at the same time is not supported.`,\n      );\n    }\n\n    const context = btcIsObject ? directive.bindToController : directive.scope;\n    const bindings = new Bindings();\n\n    if (typeof context == 'object') {\n      Object.keys(context).forEach((propName) => {\n        const definition = context[propName];\n        const bindingType = definition.charAt(0);\n\n        // QUESTION: What about `=*`? Ignore? Throw? Support?\n\n        switch (bindingType) {\n          case '@':\n          case '<':\n            // We don't need to do anything special. They will be defined as inputs on the\n            // upgraded component facade and the change propagation will be handled by\n            // `ngOnChanges()`.\n            break;\n          case '=':\n            bindings.twoWayBoundProperties.push(propName);\n            bindings.twoWayBoundLastValues.push(INITIAL_VALUE);\n            bindings.propertyToOutputMap[propName] = propName + 'Change';\n            break;\n          case '&':\n            bindings.expressionBoundProperties.push(propName);\n            bindings.propertyToOutputMap[propName] = propName;\n            break;\n          default:\n            let json = JSON.stringify(context);\n            throw new Error(\n              `Unexpected mapping '${bindingType}' in '${json}' in '${name}' directive.`,\n            );\n        }\n      });\n    }\n\n    return bindings;\n  }\n\n  private initializeOutputs() {\n    // Initialize the outputs for `=` and `&` bindings\n    this.bindings.twoWayBoundProperties\n      .concat(this.bindings.expressionBoundProperties)\n      .forEach((propName) => {\n        const outputName = this.bindings.propertyToOutputMap[propName];\n        (this as any)[outputName] = new EventEmitter();\n      });\n  }\n\n  private bindOutputs(bindingDestination: ɵupgradeHelper.IBindingDestination) {\n    // Bind `&` bindings to the corresponding outputs\n    this.bindings.expressionBoundProperties.forEach((propName) => {\n      const outputName = this.bindings.propertyToOutputMap[propName];\n      const emitter: EventEmitter<any> = (this as any)[outputName];\n\n      bindingDestination[propName] = (value: any) => emitter.emit(value);\n    });\n  }\n\n  private forwardChanges(\n    changes: SimpleChanges,\n    bindingDestination: ɵupgradeHelper.IBindingDestination,\n  ) {\n    // Forward input changes to `bindingDestination`\n    Object.keys(changes).forEach(\n      (propName) => (bindingDestination[propName] = changes[propName].currentValue),\n    );\n\n    if (ɵutil.isFunction(bindingDestination.$onChanges)) {\n      bindingDestination.$onChanges(changes);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.dev/license\n */\n\nimport {\n  Injector,\n  ApplicationRef,\n  NgModule,\n  NgZone,\n  PlatformRef,\n  Testability,\n  ɵNoopNgZone,\n  ɵinternalProvideZoneChangeDetection,\n} from '@angular/core';\n\nimport {ɵangular1, ɵconstants, ɵutil} from '../common';\n\nimport {angular1Providers, setTempInjectorRef} from './angular1_providers';\nimport {NgAdapterInjector} from './util';\n\n/**\n * @description\n *\n * An `NgModule`, which you import to provide AngularJS core services,\n * and has an instance method used to bootstrap the hybrid upgrade application.\n *\n * *Part of the [upgrade/static](api?query=upgrade/static)\n * library for hybrid upgrade apps that support AOT compilation*\n *\n * The `upgrade/static` package contains helpers that allow AngularJS and Angular components\n * to be used together inside a hybrid upgrade application, which supports AOT compilation.\n *\n * Specifically, the classes and functions in the `upgrade/static` module allow the following:\n *\n * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so\n *    that it can be used in an Angular template. See `UpgradeComponent`.\n * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so\n *    that it can be used in an AngularJS template. See `downgradeComponent`.\n * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS\n *    service so that it can be injected into an Angular context. See\n *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.\n * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable\n *    so that it can be injected into an AngularJS context. See `downgradeInjectable`.\n * 5. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * @usageNotes\n *\n * ```ts\n * import {UpgradeModule} from '@angular/upgrade/static';\n * ```\n *\n * See also the {@link UpgradeModule#examples examples} below.\n *\n * ### Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside the Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be \"upgraded\"\" to an Angular component. This is achieved by\n *    defining an Angular directive, which bootstraps the AngularJS component at its location\n *    in the DOM. See `UpgradeComponent`.\n * 6. An Angular component can be \"downgraded\" to an AngularJS component. This is achieved by\n *    defining an AngularJS directive, which bootstraps the Angular component at its location\n *    in the DOM. See `downgradeComponent`.\n * 7. Whenever an \"upgraded\"/\"downgraded\" component is instantiated the host element is owned by\n *    the framework doing the instantiation. The other framework then instantiates and owns the\n *    view for that component.\n *    1. This implies that the component bindings will always follow the semantics of the\n *       instantiation framework.\n *    2. The DOM attributes are parsed by the framework that owns the current template. So\n *       attributes in AngularJS templates must use kebab-case, while AngularJS templates must use\n *       camelCase.\n *    3. However the template binding syntax will always use the Angular style, e.g. square\n *       brackets (`[...]`) for property binding.\n * 8. Angular is bootstrapped first; AngularJS is bootstrapped second. AngularJS always owns the\n *    root component of the application.\n * 9. The new application is running in an Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### The `UpgradeModule` class\n *\n * This class is an `NgModule`, which you import to provide AngularJS core services,\n * and has an instance method used to bootstrap the hybrid upgrade application.\n *\n * * Core AngularJS services<br />\n *   Importing this `NgModule` will add providers for the core\n *   [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.\n *\n * * Bootstrap<br />\n *   The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}\n *   method, which you use to bootstrap the top level AngularJS module onto an element in the\n *   DOM for the hybrid upgrade app.\n *\n *   It also contains properties to access the {@link UpgradeModule#injector root injector}, the\n *   bootstrap `NgZone` and the\n *   [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).\n *\n * ### Examples\n *\n * Import the `UpgradeModule` into your top level Angular {@link NgModule NgModule}.\n *\n * {@example upgrade/static/ts/full/module.ts region='ng2-module'}\n *\n * Then inject `UpgradeModule` into your Angular `NgModule` and use it to bootstrap the top level\n * [AngularJS module](https://docs.angularjs.org/api/ng/type/angular.Module) in the\n * `ngDoBootstrap()` method.\n *\n * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng1'}\n *\n * Finally, kick off the whole process, by bootstrapping your top level Angular `NgModule`.\n *\n * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng2'}\n *\n * ### Upgrading an AngularJS service\n *\n * There is no specific API for upgrading an AngularJS service. Instead you should just follow the\n * following recipe:\n *\n * Let's say you have an AngularJS service:\n *\n * {@example upgrade/static/ts/full/module.ts region=\"ng1-text-formatter-service\"}\n *\n * Then you should define an Angular provider to be included in your `NgModule` `providers`\n * property.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"upgrade-ng1-service\"}\n *\n * Then you can use the \"upgraded\" AngularJS service by injecting it into an Angular component\n * or service.\n *\n * {@example upgrade/static/ts/full/module.ts region=\"use-ng1-upgraded-service\"}\n *\n * @publicApi\n */\n@NgModule({providers: [angular1Providers, ɵinternalProvideZoneChangeDetection({})]})\nexport class UpgradeModule {\n  /**\n   * The AngularJS `$injector` for the upgrade application.\n   */\n  public $injector: any /*angular.IInjectorService*/;\n  /** The Angular Injector **/\n  public injector: Injector;\n  private readonly applicationRef: ApplicationRef;\n\n  constructor(\n    /** The root `Injector` for the upgrade application. */\n    injector: Injector,\n    /** The bootstrap zone for the upgrade application */\n    public ngZone: NgZone,\n    /**\n     * The owning `NgModuleRef`s `PlatformRef` instance.\n     * This is used to tie the lifecycle of the bootstrapped AngularJS apps to that of the Angular\n     * `PlatformRef`.\n     */\n    private platformRef: PlatformRef,\n  ) {\n    this.injector = new NgAdapterInjector(injector);\n    this.applicationRef = this.injector.get(ApplicationRef);\n  }\n\n  /**\n   * Bootstrap an AngularJS application from this NgModule\n   * @param element the element on which to bootstrap the AngularJS application\n   * @param [modules] the AngularJS modules to bootstrap for this application\n   * @param [config] optional extra AngularJS bootstrap configuration\n   * @return The value returned by\n   *     [angular.bootstrap()](https://docs.angularjs.org/api/ng/function/angular.bootstrap).\n   */\n  bootstrap(\n    element: Element,\n    modules: string[] = [],\n    config?: any /*angular.IAngularBootstrapConfig*/,\n  ): any /*ReturnType<typeof angular.bootstrap>*/ {\n    const INIT_MODULE_NAME = ɵconstants.UPGRADE_MODULE_NAME + '.init';\n\n    // Create an ng1 module to bootstrap\n    ɵangular1\n      .module_(INIT_MODULE_NAME, [])\n\n      .constant(ɵconstants.UPGRADE_APP_TYPE_KEY, ɵutil.UpgradeAppType.Static)\n\n      .value(ɵconstants.INJECTOR_KEY, this.injector)\n\n      .factory(ɵconstants.LAZY_MODULE_REF, [\n        ɵconstants.INJECTOR_KEY,\n        (injector: Injector) => ({injector}) as ɵutil.LazyModuleRef,\n      ])\n\n      .config([\n        ɵconstants.$PROVIDE,\n        ɵconstants.$INJECTOR,\n        ($provide: ɵangular1.IProvideService, $injector: ɵangular1.IInjectorService) => {\n          if ($injector.has(ɵconstants.$$TESTABILITY)) {\n            $provide.decorator(ɵconstants.$$TESTABILITY, [\n              ɵconstants.$DELEGATE,\n              (testabilityDelegate: ɵangular1.ITestabilityService) => {\n                const originalWhenStable: Function = testabilityDelegate.whenStable;\n                const injector = this.injector;\n                // Cannot use arrow function below because we need the context\n                const newWhenStable = function (callback: Function) {\n                  originalWhenStable.call(testabilityDelegate, function () {\n                    const ng2Testability: Testability = injector.get(Testability);\n                    if (ng2Testability.isStable()) {\n                      callback();\n                    } else {\n                      ng2Testability.whenStable(newWhenStable.bind(testabilityDelegate, callback));\n                    }\n                  });\n                };\n\n                testabilityDelegate.whenStable = newWhenStable;\n                return testabilityDelegate;\n              },\n            ]);\n          }\n\n          if ($injector.has(ɵconstants.$INTERVAL)) {\n            $provide.decorator(ɵconstants.$INTERVAL, [\n              ɵconstants.$DELEGATE,\n              (intervalDelegate: ɵangular1.IIntervalService) => {\n                // Wrap the $interval service so that setInterval is called outside NgZone,\n                // but the callback is still invoked within it. This is so that $interval\n                // won't block stability, which preserves the behavior from AngularJS.\n                let wrappedInterval = (\n                  fn: Function,\n                  delay: number,\n                  count?: number,\n                  invokeApply?: boolean,\n                  ...pass: any[]\n                ) => {\n                  return this.ngZone.runOutsideAngular(() => {\n                    return intervalDelegate(\n                      (...args: any[]) => {\n                        // Run callback in the next VM turn - $interval calls\n                        // $rootScope.$apply, and running the callback in NgZone will\n                        // cause a '$digest already in progress' error if it's in the\n                        // same vm turn.\n                        setTimeout(() => {\n                          this.ngZone.run(() => fn(...args));\n                        });\n                      },\n                      delay,\n                      count,\n                      invokeApply,\n                      ...pass,\n                    );\n                  });\n                };\n\n                (Object.keys(intervalDelegate) as (keyof ɵangular1.IIntervalService)[]).forEach(\n                  (prop) => ((wrappedInterval as any)[prop] = intervalDelegate[prop]),\n                );\n\n                // the `flush` method will be present when ngMocks is used\n                if (intervalDelegate.hasOwnProperty('flush')) {\n                  (wrappedInterval as any)['flush'] = () => {\n                    (intervalDelegate as any)['flush']();\n                    return wrappedInterval;\n                  };\n                }\n\n                return wrappedInterval;\n              },\n            ]);\n          }\n        },\n      ])\n\n      .run([\n        ɵconstants.$INJECTOR,\n        ($injector: ɵangular1.IInjectorService) => {\n          this.$injector = $injector;\n          const $rootScope = $injector.get('$rootScope');\n\n          // Initialize the ng1 $injector provider\n          setTempInjectorRef($injector);\n          this.injector.get(ɵconstants.$INJECTOR);\n\n          // Put the injector on the DOM, so that it can be \"required\"\n          ɵangular1.element(element).data!(\n            ɵutil.controllerKey(ɵconstants.INJECTOR_KEY),\n            this.injector,\n          );\n\n          // Destroy the AngularJS app once the Angular `PlatformRef` is destroyed.\n          // This does not happen in a typical SPA scenario, but it might be useful for\n          // other use-cases where disposing of an Angular/AngularJS app is necessary\n          // (such as Hot Module Replacement (HMR)).\n          // See https://github.com/angular/angular/issues/39935.\n          this.platformRef.onDestroy(() => ɵutil.destroyApp($injector));\n\n          // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles\n          // We need to do this in the next tick so that we don't prevent the bootup stabilizing\n          setTimeout(() => {\n            const synchronize = () => {\n              this.ngZone.run(() => {\n                if ($rootScope.$$phase) {\n                  if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    console.warn(\n                      'A digest was triggered while one was already in progress. This may mean that something is triggering digests outside the Angular zone.',\n                    );\n                  }\n\n                  $rootScope.$evalAsync();\n                } else {\n                  $rootScope.$digest();\n                }\n              });\n            };\n            const subscription =\n              // We _DO NOT_ usually want to have any code that does one thing for zoneless and another for ZoneJS.\n              // This is only here because there is not enough coverage for hybrid apps anymore so we cannot\n              // be confident that making UpgradeModule work with zoneless is a non-breaking change.\n              this.ngZone instanceof ɵNoopNgZone\n                ? (this.applicationRef as any).afterTick.subscribe(() => synchronize())\n                : this.ngZone.onMicrotaskEmpty.subscribe(() => synchronize());\n            $rootScope.$on('$destroy', () => {\n              subscription.unsubscribe();\n            });\n          }, 0);\n        },\n      ]);\n\n    const upgradeModule = ɵangular1.module_(\n      ɵconstants.UPGRADE_MODULE_NAME,\n      [INIT_MODULE_NAME].concat(modules),\n    );\n\n    // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n    const windowAngular = (window as any)['angular'];\n    windowAngular.resumeBootstrap = undefined;\n\n    // Bootstrap the AngularJS application inside our zone\n    const returnValue = this.ngZone.run(() =>\n      ɵangular1.bootstrap(element, [upgradeModule.name], config),\n    );\n\n    // Patch resumeBootstrap() to run inside the ngZone\n    if (windowAngular.resumeBootstrap) {\n      const originalResumeBootstrap: () => void = windowAngular.resumeBootstrap;\n      const ngZone = this.ngZone;\n      windowAngular.resumeBootstrap = function () {\n        let args = arguments;\n        windowAngular.resumeBootstrap = originalResumeBootstrap;\n        return ngZone.run(() => windowAngular.resumeBootstrap.apply(this, args));\n      };\n    }\n\n    return returnValue;\n  }\n}\n"],"names":["PropertyBinding","prop","onAttr","bindAttr","bindonAttr","constructor","attr","bracketAttr","capitalAttr","console","error","e","stack","controllerKey","name","directiveNormalize","replace","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","_","letter","toUpperCase","getTypeName","type","toString","split","getDowngradedModuleCount","$injector","get","DOWNGRADED_MODULE_COUNT_KEY","getUpgradeAppType","value","isNgModuleType","ɵNG_MOD_DEF","isFunction","node","querySelectorAll","validateInjectionKey","downgradedModule","injectionKey","attemptedAction","upgradeAppType","Error","downgradedModuleCount","has","DowngradeComponentAdapter","ngModel","parentInjector","$compile","$parse","componentFactory","wrapCallback","unsafelyOverwriteSignalInputs","implementsOnChanges","inputChangeCount","inputChanges","componentScope","element","attrs","scope","$new","compileContents","compiledProjectableNodes","projectableNodes","groupProjectableNodes","linkFns","map","nodes","empty","forEach","linkFn","clone","push","append","createComponentAndSetup","manuallyAttachView","propagateDigest","component","componentRef","provide","$SCOPE","useValue","Injector","create","childInjector","injector","ChangeDetectorRef","changeDetectorRef","Testability","testability","TestabilityRegistry","nativeElement","hookupNgModel","instance","changeDetector","setupInputs","viewChangeDetector","inputs","input","inputBinding","propName","templateName","prevValue","INITIAL_VALUE","currValue","strictEquals","updateInput","isSignal","$watch","unwatch","hasOwnProperty","expr","bracketParenAttr","watchFn","detectChanges","componentType","prototype","ngOnChanges","markForCheck","appRef","ApplicationRef","outputs","subscribeToOutput","outputBindings","parenAttr","output","isAssignment","getter","setter","emitter","subscribe","v","onDestroy","subscription","unsubscribe","registerCleanup","testabilityRegistry","destroyComponentRef","destroy","on","destroyed","$destroy","$on","unregisterApplication","location","SyncPromise","resolved","callbacks","all","valuesOrPromises","results","resolve","idx","resolvedCount","length","aggrPromise","p","isThenable","then","callback","isNgUpgradeLite","NgZone","isInAngularZone","cb","ngZone","run","REQUIRE_INJECTOR","REQUIRE_NG_MODEL","required","moduleInjector","undefined","ranAsync","LAZY_MODULE_REF","info","lazyModuleRefKey","finalParentInjector","finalModuleInjector","doDowngrade","componentFactoryResolver","ComponentFactoryResolver","resolveComponentFactory","injectorKey","token","err","message","policy","windowWithTrustedTypes","trustedTypes","createPolicy","UpgradeHelper","directive","$controller","$INJECTOR","$COMPILE","$CONTROLLER","elementRef","$element","angularElement","getDirective","directives","compile","notSupported","terminal","getTemplate","fetchRemoteTemplate","template","trustedHTMLFromLegacyTemplate","getOrCall","templateUrl","$templateCache","$TEMPLATE_CACHE","url","Promise","reject","$httpBackend","$HTTP_BACKEND","status","response","put","buildController","controllerType","$scope","locals","controller","controllerInstance","$onDestroy","cleanData","prepareTransclusion","transclude","extractChildNodes","$template","contentChildNodes","slots","Object","slotMap","filledSlots","selector","slotName","optional","charAt","substring","nodeName","toLowerCase","filter","cloneAttach","$$slots","nodeType","Node","TEXT_NODE","nodeValue","attachChildrenFn","resolveAndBindRequiredControllers","getDirectiveRequire","resolveRequire","directiveRequire","bindToController","isMap","requiredControllersMap","requiredControllers","keys","key","compileHtml","html","tempInjectorRef","rootScopeFactory","i","compileFactory","notFoundValue","NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","bindingDestination","pendingChanges","unregisterDoCheckWatcher","ɵconstants","$componentScope","$parentScope","initializeOutputs","helper","compileTemplate","bindOutputs","forwardChanges","ɵutil","$onInit","$doCheck","callDoCheck","link","preLink","pre","postLink","post","transcludeFn","NOT_SUPPORTED","parentBoundTranscludeFn","attachChildNodes","$postLink","changes","ngDoCheck","twoWayBoundProperties","bindings","twoWayBoundLastValues","propertyToOutputMap","oldValue","is","newValue","eventEmitter","outputName","ɵutil.isFunction","initializeBindings","btcIsObject","context","Bindings","definition","bindingType","applicationRef","platformRef","factory","$provide","decorator","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","call","ng2Testability","isStable","bind","wrappedInterval","fn","delay","count","invokeApply","pass","runOutsideAngular","intervalDelegate","args","setTimeout","setTempInjectorRef","ɵangular1","data","ngDevMode"],"mappings":";;;;;;;;;;;;;AAcA,MAAAA,eAAA,CAAA;EAUWC,IAAA;;;;;EALTC,MAAA;EACAC,QAAA;EAWEC,UAAA;EACAC,WAAAJ,CAAAA,IAAA,EAAAK,IAAA,EAAA;aARO,GAAAL,IAAA;gBADIK,IAAA;QACAC,CAAAA,WAAJ,YAAAD,IAAA,CAAA,CAAA,CAAA;;QAGH;UACAE;IAEJ,IAAAN,CAAAA,MACA,GACA,CAAA,EAAA,EAAeM,WAAA,CAAA,CAAA;IADf,IAAAL,CAAAA,QAAA,GAAa,CAAA,IAAA,EAAAK,WAAA,CAAA,CAAA;IACb,IAAAJ,CAAAA,UAAA,GAAe,CAAA,MAAA,EAAAI,WAAA,CAAA,CAAA;;;;;;;ACFjBC,EAAAA,OAAO,CAAAC,KAAA,CAAAC,CAAA,EAAAA,CAAA,CAAAC,KAAA,CAAA;AAGT,EAAA;;;;;;;;AAqCE,SAAAC,cAAAC,IAAA,EAAA;EACF,OAAA,GAAA,GAAAA,IAAA,GAAA,YAAA;;;;;;;;AAuBA,SAAAC,mBAAAD,IAAA,EAAA;AAEA,EAAA,OAAMA,IAAA,CACJE,OAAA,CAAAC,uBAAkC,MACpCD,OAAA,CAAAE,8BAAA,EAAA,CAAAC,CAAA,EAAAC,MAAA,KAAAA,MAAA,CAAAC,WAAA,EAAA,CAAA;;SAISC,WAAWA,CAAAC,IAAM,EAAA;AAIxB,EAAA,OAAAA,IAAA,mBAAkDA,IAAA,CAAiBT,IAAA,IAAAS,IAAA,CAAAC,QAAA,EAAA,CAAAC,KAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;;AAG/DC,SAAAA,wBAA8BA,CAAAC,SAClC,EAAA;SAKAA,yCAAyC,CAAA,GACzCA,SAAA,CAAAC,GAAA,CAAAC,2BAAA,CAGQ,GAAA,CAAA;;AAEN,SAAAC,iBAAAA,CAAAH,SAAA,EAAA;iFAI4F,CAAA,GACpF,CAAA;;;AAIR,EAAA,OAAA,OAAAI,KAAA,KAAA,UAAA;AAEI;uBAE0FC,CAAAD,KAAA,EAAA;qCAG5F,CAAAE,WAAA,CAAA;;0BAKqF,EAAA;AAC/E,EAAA,OAAAC,UAAA,CAAAC,IAAA,CAAAC,gBACH,CAAA;;AAIL,SAAAC,oBAAAA,CAAAV,SAAA,EAAAW,gBAAA,EAAAC,YAAA,EAAAC,eAAA,EAAA;AACE,EAAA,MAAAC,cAAA,GAAAX,iBAAA,CAAAH,SAAA,CAAA;6BAEmF,GAAAD,wBAAA,CAAAC,SAAA,CAAA;AAIzF,EAAA,QAAAc,cAAA;IAEA;AACE,IAAA,KAAA,CAAA;AAEA,MAAA,IAAMH,gBAAA,EAAA;AAON,QAAA,MAAA,IAAAI,KAAA,CAAAF,CAAAA,YAAAA,EAAAA,eAAA,CACD,8CAAA,CAAA,GAAA,oFAAA;;;AAyBE,IAAA,KAAA,CAAA;MACM,IAAA,CAAAF,gBAA8B,IAAAK,qBAAA,IAAA,CAAA,EAAA;QACrC,MACE,IAAAD,KAAgB,CAEpB,CAAA,YAAA,EAAAF,eAAA,CAEA,qCAAA,CAAA,GAAA,sFAAA;AAGG;AACG,MAAA,IAAA,CAAAb,SAAU,CAAAiB,GAAA,CAAAL,YAAA,CAAA,EAAA;AACd,QAAA,MAAA,IAAAG,KAAA,CAAAF,CAAAA,YAAAA,EAAAA,eAAA,CACE,mDAAA,CAAA,GAAA,+EAAuB,GACrB,cACD,CAAA;;;;AAML,MAAA,MAAA,IAAAE,KAAA,CAAA,CAAA,YAAA,EAAAF,eAAA,CAEA,+CAAA,CAAA,GAAA,gGAEG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzKS,MACAK,yBACA,CAAA;SAUV;OAEe;OACb;EAEAC,OAAA;EAEAC,cAAA;EAEAC,QAAA;EAEIC,MAAA;EAaEC,gBAAA;EACFC,YAAA;EACAC,6BAAA;EACAC,mBAAA,GAAA,KAAA;EAEGC,gBAAA,GAAA,CAAA;EACTC,YAAA,GAAA,EAAA;EAEQC,cAAA;AACNnD,EAAAA,WAAAA,CAAAoD,OAAA,EAAAC,KAAA,EAAAC,KAAA,EAAAb,OAAA,EAAAC,cAAA,EAAAC,QAAA,EAAAC,MAAA,EAAAC,gBAAA,EAAAC,YAAA,EAAAC,6BAAA,EAAA;IACA,IAAAK,CAAAA,OAAA,GAAAA,OAAA;IACW,IAAAC,CAAAA,KAAA,GAAAA,KAAA;IAvBP,IAAAC,CAAAA,KAAA,GAAAA;IACF,IAAAb,CAAAA,OAAE,GAAAA,OAAA;IACF,IAAAC,CAAAA,cAAA,GAAAA,cAAA;IAEF,IAAAC,CAAAA;eAQM,GAAAC,MACF;IADE,IAAAC,CAAAA,gBAAA;IACF,IAAAC,CAAAA,YAAA,GAAaA,YAAA;IACb,IAAAC,CAAAA,6BAAa,GAAAA,6BAAA;AACb,IAAA,IAAA,CAAAI,cAAA,GAAgBG,KAAW,CAAAC,IAAA,EAAA;;AAGjCC,EAAAA,eAAAA,GAAA;AAEQ,IAAA,MAAAC,wBAA0C,GAAA,EAAA;IAChD,MAAAC,gBAAqC,GAArC,IAAA,CAAAC,qBAAuD,EAAA;IACvD,MAAAC,OAAA,GAAAF,gBAAmB,CAAmBG,GAAA,CAAAC,KAAA,IAAA,IAAA,CAAAnB,QAAA,CAAAmB,KAAA,CAAA,CAAA;IAC3B,IAAAV,CAAAA,OAAA,CAAAW,KAAA,EAAA;AAETH,IAAAA,OAAA,CAAAI,OAAA,CAAAC,MAAiC,IAAA;MAClCA,MAAA,CAAA,IAAA,CAAAX,KAAA,EAAAY,KAAA,IAAA;gCAOK,CAAAC,IAAA,CAAAD,KAAA,CAAA;AACN,QAAA,IAAA,CAAAd,OAAA,CAAAgB,MAAA,CAAAF;OAEmE,CAAA;;WAG/CT,wBAAA;;AAGlBY,EAAAA,uBAAAA,CAAAX,gBAAqB,EAAAY,kBAAA,GAAA,KAAA,EAAAC,eAAA,GAAA,IAAA,EAAA;2DACK,CAAA;uCACJ,EAAAA,eAAA,EAAAC,SAAA,CAAA;qBACxB,CAAAA,SAAA,CAAAC,YAAA,CAAA;;IAKF,OAAAD,SAAA,CAAAC,YAAA;AAEQ;kCAON,EAAA;mBAKU,GAAA,CAAA;AAAAC,MAAAA,OAAA,EAAAC,MAAA;AAAoBC,MAAAA,QAAA,EAAAzB,IAAAA,CAAAA;AAAY,KAAA,CAAA;uBAChC,GAAA0B,QAAA,CAAAC,MAAY,CAAA;0BACT;iCACkE;MAErErE,IAAA,EAAA;;IAIA,MAAAgE,YAAA,GAAA5B,IAAAA,CAAAA,gBAAiB,CAAAiC,MAAA,CAAAC,aAAA,EAAArB,gBAAA,EAAA,IAAA,CAAAN,OAAA,CAAA,CAAA,CAAA,CAAA;2CACI,CAAA4B,QAAA,CAAAzD,GAAA,CAAA0D,iBAAA,CAAA;2BACvBR,YAAA,CAAAS,iBAAA;wBAOwFT,YAAA,CAAAO,QAAA,CAAAzD,GAAA,CAAA4D,aACxF,IAAA,CAAA;AAIJ,IAAA,IAAAC,WAAA,EAAA;2BACF,CACE7D,GAAA,CAAA8D,mBAAA,CAAA,0CACF,CAAAC,aAAA,EAAAF,WAAA,CAAA;;AACEG,IAAAA,aAAA,CAAA9C,IAAAA,CAAAA,OAAY,EAAAgC,YAAA,CAAAe,QAAA,CAAA;;wBACd;MAAAf,YAAA;AAAAgB,MAAAA;KAAA;;aACEC,CAAApB,kBAAY,EAAAC,eAAA,GAAA,IAAA,EAAA;IAAAE,YAAA;IAAAgB,cAAA;AAAAE,IAAAA;AAAA,GAAA,EAAA;kBACd,KAAAtC,KAAA;wCAA+B,CAAAuC,MAAC,IAAA,EAAA;IAC9B,KAAA,MAAAC,KAAA,IAAAD,MAAA,EAAA;MAEF,MAAAE,YAAQ,GAAUnG,IAAAA,eAAA,CAAAkG,KAAA,CAAAE,QAAA,EAAAF,KAAA,CAAAG,YAAA,CAAA;;;0BAUK,CAAA,oBACnB;UAMuB,IAAAC,SAAA,GAAAC,eAAA;AACrB,UAAA,OAAwBC,SAAA,IAAA;AAE1B,YAAA,IAAA,CAAAC,YAAK,CAAAH,SAAA,EAAiBE,SAAA,CAAA,EAAA;cACY,IAAAF,SAAA,KAAAC,eAAA,EAAA;AAGlBD,gBAAAA,SAAC,GAAAE,SAAY;AAEoD;cAC/E,IAAgBE,CAAAA,WAAA,CAAA5B,YAAE,EAAA7E,IAAA,EAAAqG,SAAA,EAAAE,SAAA,EAAAG,QAAA,CAAA;AACpBL,cAAAA,SAAe,GAAAE,SAAA;AACjB;;AAI+E,SAAA,EAAA,YAAA,CAAAvG,IAAA,EAAAiG,KAAA,CAAAS,QAAA,CAAA;mCAC/E,gBAAiB,CAAA;mBAMC,GAAAnD,IAAAA,CAAAA,cAAA,CAAAoD,MAAA,CAAA,MAAA;iBACpB,EAAA;AACEC,UAAAA,OAAA;oBACOnD,KAAA,CAAAyC,YAAO,CAAA7F,IAAA,CAAA,CAAA;AAGd,SAAA,CAAA;AAEJ,OAAA,MAAA,IAAAoD,KAAA,CAAAoD,cAAA,CAAAX,YAAA,CAAAhG,QAAA,CAAA,EAAA;AACF4G,QAAAA,IAAA,GAAArD,KAAA,CAAAyC,YAAA,CAAAhG,QAAA,CAAA;AAGEuD,OAAAA,MAAAA,IAAAA,KAAA,CAAWoD,cAAO,CAAAX,YAAA,CAAA5F,WAAA,CAAA,EAAA;AACZ,QAAA,IAAA,GAAAmD,KAAA,CAAAyC,YAAc,CAAA5F;AAElB,OAAA,MAAA,IAAAmD,KAAA,CAAAoD,cAAA,CAAAX,YAAA,CAAA/F,UAAA,CAAA,EAAA;AAAA,QAAA,IAAA,GAAAsD,KAAoB,CAAAyC,YAAO,CAAA/F,UAAA,CAAA;;AAKrB,QAAA,IAAA,GAAAsD,KAAA,CAAAyC,YAAmB,CAAKa,gBAAA,CAAA;;AAK9B,MAAA,IAAAD,IAAA,IAAA,IAAA,EAAA;qBAAU,GAAA,CAAA,CAAA9G,IAAA,EAAA0G,QAAyB,KAAA,CAAGH,SAAA,EAAAF,SAAA,KAAA,IAAA,CAAAI,WAAA,CAAA5B,YAAA,EAAA7E,IAAA,EAAAqG,SAAA,EAAAE,SAAA,EAAAG,QAAA,CAAA,EAAAR,YAAA,CAAAlG,IAAA,EAAAiG,KAAA,CAAAS,QAAA,CAAA;AACpC,QAAA,IAAA,CAAAnD,cAAK,CAAAoD,MAAA,CAAAG,IAAA,EAAAE,OAAkB,CAAA;;;AAGvBC,IAAAA,MAAAA,aAAA,GAAAA,MAAApB,cAAA,CAAAoB,aAAA,EAAA;mBACF,GAAA,IAAA,CAAAhE,gBAAA,CAAAiE,aAAA,CAAAC,SAAA;AACwB,IAAA,IAAA,CAAA,mBAAA,GACtB,CAAAA,EAAAA,SAAA,IAAKA,SAAA,CAAAC,WAA8B,CAAA;AAGnC,IAAA,IAAA,CAAA,cAAA,CAAAT,MAAA,CAAK,MAAA,IAAA,CAAAtD,gBAAkB,OAAAH,YAAA,CAAA,MAAA;;QAKrB,MAAAI,YAAA,QAAAA,YAAA;AAMA,QAAA,IAAA,CAAAA;AACNuB,QAAAA,YAAY,CAAAe,QAAS,CAAAwB,WAAO,CAAA9D,YAAA,CAAA;AAC5B;MAEAyC,kBAAA,CAAAsB,YACM,EAAA;AAIA,MAAA,IAAA,CAAA1C,eAAC,EAAA;QACDsC,aAAA,EAAA;;;QASNtC,eAAA,EAAA;AAGM,MAAA,IAAA,CAAApB,cAAA,CAAAoD,MAAA,CAAAzD,IAAAA,CAAAA,YAAA,CAAA+D,aAAA,CAAA,CAAA;;;;QASJL,OAAA,EAAA;QAAgBA,OAAA,GAAA,IAAA;AAClB,QAAA,MAAAU,MAAA,GAAAxE,IAAAA,CAAAA,cAAA,CAAAnB,GAAA,CAAA4F,cAAA,CAAA;;;;;2BAOgG,EAAA;sBAC9C,CAAA9D,KAAA;wBAE8D,CAAAR,gBAAA,CAAAuE,OAAA,IAAA,EAAA;gCAC1G,EAAA;;;;gBAMAX,cAAA,CAAA1G,UAAA,CAAA,EAAA;YACuFsH,CAAAA,iBAAA,CAAA5C,YAAA,EAAA6C,cAAA,EAAAjE,KAAA,CAAAtD,UAAA,CAAA,EAAA,IAAA,CAAA;;+CAE1E,CAAW,EAAA;QAE1B,IAAA,CAAAsH,iBAAA,CAAA5C,YAAqB,EAAA6C,qBAEzB,CAAAX,gBAAE,CAAA,EAAA,IAAA,CAAA;AAGe;;QAYjB,sBAAsB,CAAAlC,YAAA,EAAA6C,cAAA,EAAAjE,KAAA,CAAAiE,cAAA,CAAAzH,MAAA,CAAA,CAAA;;AAEpB,MAAA,IAAAwD,KAAA,CAAAoD,cAAA,CAAAa,cAAA,CAAAC,SAAA,CAAA,EAAA;QACF,IAAAF,CAAAA,iBAAA,CAAA5C,YAAA,EAAA6C,cAAA,EAAAjE,KAAA,CAAAiE,cAAA,CAAAC,SAAA,CAAA,CAAA;;;;AAGFF,EAAAA,iBAAAA,CAAA5C,YAAA,EAAA+C,MAAA,EAAAd,IAAA,EAAAe,YAAA,GAAA,KAAA,EAAA;UAE6BC,MAAA,GAAA,IAAA,CAAA9E,MAAA,CAAA8D,IAAA,CAAA;UAC3BiB,MAAA,gBAAsB;AACf,IAAA,IAAA,YAAA,IAAA,CAAAA,MAAA,EAAA;MACT,MAAA,IAAAtF,KAAA,CAAA,CAAA,YAAA,EAAAqE,IAAA,CAAA,oBAAA,CAAA,CAAA;AACD;IAED,MAAAkB,OAAA,GAAAnD,YAAA,CAAAe,QAAA,CAAAgC,MAAA,CAAA5H,IAAA,CAAA;AAEG,IAAA,IAAAgI,OAAA,EAAA;MAQD,4BAAiC,CAAAC,SAAA,CAAAJ,YAAA,GAC/BK,KAAaH,MAAK,KAAG,CAAArE,KAAA,EAAAwE,CAAA,CAAA,GACrBA,CAAA,IAAMJ,MAAA,CAAiB,IAAA,CAA0BpE,KAAA,EAAA;QAAA,QAAAwE,EAAAA;AAAA,OAAA,CAAA,CAAA;AACjDrD,MAAAA,YAAkB,CAAAsD,SAAA,CAAAC,MAAAA,YAAU,CAAAC,WAAA,EAAA,CAAA;;MAG9B,MAAA5F,IAAAA,KAAA,CAAAmF,CAAAA,iBAAAA,EAAAA,MAAA,CAAA5H,IAAA,mBAAAqB,WAAA,CAAA,IAAA,CAAA4B,gBAAA,CAAAiE,aAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;;AAMMoB,EAAAA,eAAAA,CAAAzD,YAA+B,EAAA;AAErC0D,IAAAA,MAAAA,sBAAsC1D,YAAA,CAAAO,QAAO,CAAAzD,GAAA,CAAA8D,mBAAO,CAAA;AAClD,IAAA,MAAA+C,mBAAA,GAAAtF,IAAAA,CAAAA,YAAA,CAAA2B,MAAAA,YAAA,CAAA4D,OAAA,EAAA,CAAA;AAAA,IAAA,IAAA,SAAA,GAAA,KAAA;QACA,CAAAjF,OAAI,CAAAkF,EAAQ;AAQd,MAAA,IAAgB,CAAAC,SAAA,EAEU,IAAApF,CAAAA,cAAA,CAAAqF,QAAO,EAAA;AAC/B,KAAA,CAAA;AAEF,IAAA,IAAA,CAAArF,cAAuB,CAAAsF,GAAA,CAAU,UAAA,EAAA,MAAA;AACnC,MAAA,IAAA,CAAAF,SAAA,EAAA;QAEAA,SAAA,GAAA,IAAA;AACEJ,QAAAA,mBAAA,CAAAO,qBAAsC,CAAAjE,YAAA,CAAAkE,QAAA,CAAArD,aAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1W5B,MAAAsD,WAAK,CAAA;;AASbC,EAAAA,QAAA,GAAA;EACEC,SAAA,GAAA,EAAA;AACiD,EAAA,OAAAC,IAAAC,gBAAA,EAAA;;;AAIjD,IAAA,MAAAC,OAAA,GAAc,EAAA;AACZ,IAAA,MAAcC,OAAA,GAAAA,CAAAC,GAAA,EAAAzH,KAAA,KAAA;MAChBuH,OAAA,CAAAE,GAAA,CAAA,GAAAzH,KAAA;UAAO,EAAA0H,aAAA,KAAAJ,gBAAA,CAAAK,MAAA,EAEPC,WAAA,CAAAJ,OAAA,CAAAD,OAAA,CAAA;AACF,KAAA;AAGFD,IAAAA,gBAAA,CAAAhF,OAAA,CAAAuF,CAAAA,CAAA,EAAAJ,GAAA,KAAA;MAEA,IAAAK,UAAgB,CAAAD,CAAA,CAAA,EAAA;QACqBA,CAAA,CAAAE,IAAA,CAAA3B,CAAA,IAAAoB,OAAA,CAAAC,GAAA,EAAArB,CAAA,CAAA,CAAA;;QACToB,OAAA,CAAAC,GAAA,EAAAI,CAAA,CAAA;AAE1B;;WAIAD,WAAK;;UAEP5H,KAAA,EAAA;AAEI,IAAA,IAAA,IAAA,CAAAmH,QAAgC,EAClC;IACE,IAAA,CAAAnH,KAAA,GAAAA,KAAA;oBACK,IAAA;QAGT,CAAAoH,SAAA,CAAA9E,OAAA,CAAA0F,QAAA,IAAAA,QAAA,CAAAhI,KAAA,CAAA,CAAA;IACD,IAAAoH,CAAAA,SAAA,CAAAO,MAAA,GAAA,CAAA;;;;;;;;;;;;;;;yBCuGgG,CAAAM,eAAA,0BAECC,MAAA,CAAAC,eAAA,EAAAC,GAAAA,EAAA,KAAAC,MAAA,CAAAC,GAAA,CAAAF,EAAA,CAAA;;sCAGJ,GAAAH,eAAA,IAAAtI,wBAAA,CAAAC,SAAA,CAAA,GAAA,CAAA;;;gBAGtF,IAA8B;gBAC9B2I,gBAAmF,EAAAC,gBAAA,CAAA;gBAOnF,EAAA,YAA+B,EAAA;kBAE/B,EAAuE9G,OAAA,EAAAC,KAAA,EAAA8G,QAAA,KAAA;;;QAOvE,IAAAC,cAAA,GAAAC,SAAyB;AAEzB,QAAA,IAAAC,WAAyC,KAAA;;;gCAGjC,GAAA,CAAA,EAAAC,eAAA,CAAA,EAAAtI,gBAAA,CAAA,CAAA;+BAKiB,GAAA,CAAA,yBAAA,EAAAhB,WAAA,CAAAuJ,IAAA,CAAAhG,SAAA,CAAA,CAAA,CAAA,CAAA;AACrBxC,UAAAA,oBAAgB,CAAAV,SAA8C,EAAAW,gBAAA,EAAAwI,gBAAA,EAAAtI,eAAA,CAAA;6BAChE,GAAAb,SAAA,CAAAC,GAAA,CAAAkJ,gBAAA,CAAA;AAEAL,UAAAA,cAAA;AAcA;AAmDR,QAAA,MAAAM,mBAAA,GAAAhI,cAAA,IAAA0H,cAAA;AAIE,QAAA,MAAAO,mBAAA,GAAAP,cAAgC,IAAA1H,cAAA;AAGzB,QAAA,MAAAkI,WAAA,GAAAA,CAAA5F,QAAA,EAAAoF,cAAA,KAAA;AAKP,UAAA,MAAAS,wBAAA,GAAAT,cAAA,CAAA7I,GAAA,CAAAuJ,wBAAA,CAAA;UAEA,MAAAjI,gBAAA,GAAAgI,wBAAA,CAAAE,uBAAA,CAAAP,IAAuB,CAAAhG,SAAA,CAAA;AACvB,UAAA,IAAA,CAAA3B,gBAAA,EAAA;AACF,YAAA,MAAA,IAAAR,KAAA,CAAApB,CAAAA,gCAAAA,EAAAA,WAAA,CAAAuJ,IAAA,CAAAhG,SAAA,CAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3MI,IAAA,IAAA;YACFQ,QAAA,GAAA1D,SAAA,CAAAC,GAAA,CAAAyJ,WAAA,CAAA;AACD,MAAA,OAAAhG,QAAA,CAAAzD,GAAA,CAAA0J,KAAA,CAAA;AACA,KAAA,CAED,OAAAC,GAAA,EAAA;MACF,MAAA,IAAA7I,KAAA,CAAAF,CAAAA,YAAAA,EAAAA,eAAA,KAAA+I,GAAA,CAAAC,OAAA,IAAAD,GAAA,CAAA,CAAA,CAAA;;;;;;;;;;UChDM,GAAA,IAAA;;;;AAMNE,QAAAA,MAAA,GAAAC,sBAAA,CAAAC,YAAA,CAAAC,YAAA,CAAA,wBAAA,EAAA;;;;;;;;;;;;;ACAkB,MAEAC,aAAS,CAAA;EAuBvB/K,IAAA;EACEa,SAAA;EAGF8B,OAAA;UAG+F;EAC/FqI,SAAA;;EAoBEC,WAAA;;IACE,IAAoCjL,CAAAA,IAAA,GAAAA,IAAA;AACtC,IAAA,IAAA,CAAAa,SAAA,GAAA0D,QAAA,CAAAzD,GAAA,CAAAoK,SAAA,CAAA;AAAW,IAAA,IAAoB,CAAEhJ,QAAA,GAAA,IAAA,CAAArB,SAAA,CAAAC,GAAA,CAAAqK,QAAA,CAAA;AAC/B,IAAA,IAAA,CAAUF,WAAM,GAAApK,IAAAA,CAAAA,SAAA,CAAAC,GAAA,CAAAsK,WAAA,CAAA;AAGX,IAAA,KAAsBzI,OAAA,GAAA0I,UAAA,CAAAxG,aAAA;AACrB,IAAA,IAAA,CAAAyG,QAA6B,GAAAC,OAAA,CAAA,IAAA,CAAA5I,OAAA,CAAA;IAEjC,IAAAqI,CAAAA,SACE,GAAAA,uCAEM,CAAA,IAAA,CAAAnK,SAAA,EAAAb,IAAA,CAAA;;SAEVwL,YAAEA,CAAA3K,SAAA,EAAAb,IAAA,EAAA;AACJ,IAAA,MAAAyL,UAAE,GAAA5K,SAAA,CAAAC,GAAA,CAAAd,IAAA,GAAA,WAAA,CAAA;QACJyL,UAAA,CAAA7C,MAAA,GAAA,CAAA,EAAA;gBACQhH,KAAA,CAAA,CAAA,8CAAA;;IAIV,MAAeoJ,SAAA,GAA4BS,UAAA,CAAA,CAAA,CAAA;IAIzC,IAAAT,SAAA,CAAAU,OAAmC,IAAAV,CAAAA,cAAe,EAElDW,YAAa,CAAA3L,IAAK,EAAgB,SAAA,CAAA;AAElCgL,IAAAA,IAAAA,SAAA,UACFW,YAAA,CAAA3L,IAAA,EAAA,SAAA,CAAA;AAGE,IAAA,IAAAgL,SAAA,CAAAY,QAAY;AAMZ,IAAA,OAAAZ,SAAA;;AACFa,EAAAA,OAAAA,WAAAA,CAAAhL,SAAA,EAAAmK,SAAA,EAAAc,mBAAA,UAAAR,QAAA,EAAA;AAEA,IAAA,IAASN,SAAe,CAAAe,QAA0B,KAAAnC,SAAA,EAAA;MAAA,OAAAoC,6BAAA,CAAAC,SAAA,CAAAjB,SAAA,CAAAe,QAAA,EAAAT,QAAA,CAAA,CAAA;KAC5C,MAAA,IAAAN,SAAgC,CAAAkB;YAEpCC,cAAA,GAAAtL,SAAA,CAAAC,GAAA,CAAAsL,eAAA,CAAA;;AAGF,MAAA,MAAAL,QAEA,GAAAI,cACqB,CAAArL,GACnB,CAAAuL,GAAA,CAAA;kBAG2F,KAAAzC,SAAA,EAAA;eAC7CoC,6BAAA,CAAAD,QAAA,CAAA;aAC0C,KAAAD,mBAAA,EAAA;cACtF,IAAAlK,KAAA,CAAa,6DAA+B,CAAA;AAC5C;AACF,MAAA,OAAC,IAAA0K,OAAA,CAAA,CAAA7D,OAAA,EAAA8D,MAAA,KAAA;AAGG,QAAA,MAAAC,wBAAY,CAAA1L,GAAA,CAAA2L,aAAA,CAAA;oBACR,CAAAJ,KAAAA,EAAAA,GAAA,EAAAK,IAAAA,EAAAA,CAAAA,MAA2B,EAAAC,QAAA,KAAA;AAEjC,UAAA,IAAAD,MAAA,KAAA,GAAA,EAAA;YAAWjE,OAAA,CAAAuD,6BAAe,CAAAG,cAAA,CAAAS,GAAA,CAAAP,GAAA,EAAAM,QAAA,CAAA,CAAA,CAAA;;AAMOJ,YAAAA,MAAA,CAAA,CAAAF,6BAAAA,EAAAA,GAAA,CAAAK,YAAAA,EAAAA,MAAA,KAAAC,QAAA,CAAA,CAAA,CAAA,CAAA;;AAE7B,SAAA,CAAA;;;qBAIA,CAAA3B,CAAAA,WAAAA,EAAAA,SAAA,CAAAhL,IAAA,CAAA,6CAAA,CAAA,CAAA;;;iBAGF6M,CAAAC,cAAA,EAAAC,MAAA,EAAA;UAGAC,MAAA,GAAA;AAAA,MAAA,QAAA,EAAAD,MAAA;MAAA,UAAAzB,EAAAA,IAAAA,CAAAA;AAAA,KAAA;UACE2B,UAAA,GAAA,IAAA,CAAAhC,WAAc,CAAA6B;;AAEZ,IAAA,OAAAG,UAAA;;;;MAIAlB,QAAA,GAAAhB,aAAA,CAAAc,WAAc,CAAA,IAAM,CAAAhL,SAAA,EAAA,IAAA,CAAAmK,SAAA,EAAA,KAAA,EAAA,IAAA,CAAAM,QAAA,CAAA;;2BAIyB,CAAAS,QAAA,CAAA;;;AAKjD,IAAA,IAAAmB,kBAAE,IAAA9L,UAAA,CAAA8L,kBAAA,CAAAC,UAAA,CAAA,EAAA;AAEFD,MAAAA,kBAAA,CAAAC,UAAiB,EAAA;;;IAMbC,SAAA,CAAA,IAAA,CAAAzK,OAAA,CAAC;AACH;qBAG8C0K,GAAA;AAClD,IAAA,MAAAC,UAAA,GAAA,IAAA,CAAAtC,SAAiB,CAAAsC,UAAU;2BAE4D,QAAAC,iBAAA,EAAA;;mBAOO,IAAA;QAAAxF,QAAA,EAAAA,MAAA6B;AAAA,OAAA;0BACJ,CAAA4D,SAAA,EAAA3K,KAAA,CAAA;;AAE1F2K,IAAAA,IAAAA,SAAA,GAAAC,iBAAA;QACEH,UAAA,EAAA;AACE,MAAA,MAAAI,KAAA,GAAAC,MAAA,CAAAtJ,MAAA,CAAA,IAAA,CAAA;;AAEJmJ,QAAAA,SAAE,GAAA,EAAA;cACJI,OAAA,GAAAD,MAAA,CAAAtJ,MAAA,KAAA,CAAA;AAEA,QAAA,MAAAwJ,WAAA,GAAAF,MAAA,CAAAtJ,MAAA,CAAA,IAAA,CAAA;AAIAsJ,QAAAA;AACM,UAAA,IAAAG,QAAA,GAAAR,UAA0B,CAAAS,QAAA,CAAA;gBAGxBC,QAAA,GAAAF,QAAA,CAAsBG,MAAG,CAAA,CAAA,CAAA,KAAA,GAAA;kBACpB,GAAAD,QAAA,GAAAF,QAAA,CAAAI,SAAA,MAAAJ,QAAA;UAEXF,OAAE,CAAAE,QAAA,CAAA,GAAAC,QAAA;UACJL,KAAA,CAAAK,QAAA,CAAA,GAAA,IAAA;UAGFF,WAAA,CAAAE,QAAA,CAAA,GAAAC,QAAA;AAEQ,SAAA,CAAA;yBAEC,CAAKzK,OAAA,CAAAlC,IAAqB,IAAC;UACpC,MAAA0M,QAAA,GAAAH,OAAA,CAAA3N,kBAAA,CAAAoB,IAAA,CAAA8M,QAAA,CAAAC,WAAA,EAAA,CAAA,CAAA;AAGQ,UAAA,IAAAL,QAAA,EAAA;AACNF,YAAAA,WAA0B,CAAAE,QAAA,CAAA,GAAA,IAAA;AAEnBL,YAAAA,KAAA,CAAAK,QAAU,CAAOL,GAAAA,cAAS,CAAA,IAAA,EAAA;;WAKjC,MAAA;AACFF,YAAAA,SAAA,CAAA9J,IAAA,CAAArC,IAAA,CAAA;AAE2B;;AAIvB,QAAA,MAAA,CAAA,IAAA,CAAAwM,WAAe,CAAA,CAAAtK,OAAA,CAASwK,QAAA,IAAA;;AAChB,YAAA,MAAA,IAAAnM,KAAA,CAAA,CAAA,4BAAA,EAAAmM,QAAA,CAAA,gBAAA,EAAA,IAAA,CAAA/N,IAAA,CAAA,CAAA,CAAA;;;2BAMRqO,MAAA,CAAAN,QAAA,IAAAL,KAAA,CAAAK,QAAA,CAAA,CAAA,CACFxK,OAAA,CAAAwK,QAAA,IAAA;AAEA,UAAA,MAAO1K,KAAA,GAAAqK,KAAO,CAAAK,QAAA,CAAA;AAChB,UAAA,KAAA,CAAAA,QAAA,CAAA,GAAA,CAAAlL,KAAA,EAAAyL,WAAA,KAAA;AAEQ,YAAA,OAAAA,WAAA,CAAAjL,KAAA,EAAAR,KAAA,CAAA;AAGF,WAAA;AAEJ,SAAA,CAAA;;sBAEA,CAAA0L,OAAA,GAAAb,KAAA;MAaEF,SAAA,CAAAjK,OAAA,CAAAlC,IAAA,IAAA;QACA,IAAAA,IAAA,CAAAmN,QAAa,KAAAC,IAAA,CAAAC,SAAA,IAAA,CAAArN,IAAA,CAAAsN,SAAA,EAAA;2BACc,QAAA;AAE3B;;;WAMAC,gBAAA;;AACKC,EAAAA,iCAAAA,CAAA3B,kBAAA,EAAA;AACC,IAAA,MAAA,gBAAA,GAAA,IAAS,CAAA4B,mBAC2C,EAAA;6BAE5D,GAAAC,IAAAA,CAAAA,cAAA,CAAAC,gBAAA,CAAA;AACF9B,IAAAA,IAAAA,kBAAA,SAAAlC,SAAA,CAAAiE,gBAAA,IAAAC,KAAA,CAAAF,gBAAA,CAAA,EAAA;MACD,MAAAG,sBAAA,GAAAC,mBAAA;AAGCzB,MAAAA,MAAO,CAAA0B,IAAA,CAAAF,sBAAW,CAAA5L,CAAAA,OAAA,CAAA+L,GAAA,IAAA;AACpBpC,QAAAA,kBAAA,CAAAoC,GAAA,CAAAH,GAAAA,sBAAA,CAAAG,GAAA,CAAA;AAGS,OAAA,CAAA;AACP;AACF,IAAA,OAAAF,mBAAA;;AAIAG,EAAAA,WAAAA,CAAAC,IAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5TI;;;AAIF,IAAA,MAAA,IAAA5N,KAAA,CAAkE,2DAAA,CAAA;AAClE;EACF,MAAA2C,QAAA,GAAAkL,eAAA;AAEMA,EAAAA,eAA0B,GAAA,IAAA;AAC9B,EAAA,OAAAlL,QAAA;AACF;AAEM,SAAAmL,gBAAwBA,CAAAC,CAAA,EAAA;SAC5BA,CAAA,CAAA7O,GAAA,CAAa,YAAA,CAAA;;AAIb,SAAA8O,cAAsBA,CAAAD,CAAA,EAAA;AACxB,EAAA,OAAAA,CAAA,CAAA7O,GAAA,CAAA,UAAA,CAAA;;;SAK0C6O,CAAA,CAAA7O,GAAA,CAAA,QAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;0BClBH,EAAA;IAAvB,IAAA+O,aAAY,KAAZC,sCAAuB,EAAA;AAAa,MAAA,OAAAD,aAAA;AAEnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECgFCE,kBAAA;EASiFC,cAAA,GAAA,IAAA;EACzEC,wBAAe;;;;;;sBA0BrB,GAAA1L,QAAA,CAAAzD,GAAA,CAAAoP,MAAA,CAAA;IAMA,IAAA,CAAAC,eAAK,GAAAC,YAAqB,CAAAtN,IAAA,CAAA,CAAA,CAAA,IAAA,CAAAkI,SAAA,CAAAnI,KAAA,CAAA;QAE1B,CAAiBwN,iBAAA,EAAA;;aAME;;AAGjB,IAAA,MAAA7M,MAAA,GAAA,IAAA,CAAK8M,MAAA,CAAAC,eAAqB,EAAA;AAI5B,IAAA,MAAAzD,cAAA,GAAA,IAAA,CAAA9B,SAAA,CAAAiC,UAAA;0BAEA,GAAA,IAAA,CAAAjC,SAAA,CAAAiE,gBAAA;QAEiB/B,kBAAA,GAAAJ,cAAA,6CAC0B,EAAAqD,IAAAA,CAAAA,eAAA;AAGzC,IAAA,IAAAJ,kBAAK;;wBAIG,GAAA,IAAA,CAAAI,eAAA;KAEV,MAAA,IAAArD,cAAgB,IAAAI;AAChB6C,MAAAA,uCAA4B;AAE5B,KAAA,MAAA;AAEE,MAAA,MAAA,IAAAnO,KAAA,CAAA,CAAA,oBAAA,EAAa,IAAAoJ,CAAAA,SAAA,CAAAhL,IAAA,CAAA,iDAAA,CAAA,CAAA;;IAGf,IAAA,CAAAkN,kBAAA,GAAAA,kBAAA;AAAA6C,IAAAA,IAAAA,CAAAA,kBAAY,GAAAA,kBAAA;IAGV,IAAA,CAAAS,WAAA,CAAAT,kBAAA,CAAA;6BAGF,GAAAO,IAAAA,CAAAA,MAAA,CAAAzB,iCAAkB,CAAA3B,kBAAA,CAAA;QAGlB,IAAA,CAAA8C,cAAA,EAAA;AACF,MAAA,IAAA,CAAAS,cAAA,CAAA,IAAA,CAAAT,cAAA,EAAAD,kBAAA,CAAA;AAGA,MAAA,IAAA,CAAAC,cAAkC,GAAA,IAAA;AAChC;+BAEO,IAAAU,UAAA,CAAA,IAAA,CAAAxD,kBAAA,CAAAyD,OAAA,CAAA,EAAA;6BAEP,CAAAA,OAAA,EAAA;AACF;AAGSzD,IAAAA,IAAAA,kBAAA,IAAAwD,UAAA,CAAAxD,kBAAA,CAAA0D,QAAA,CAAA,EAAA;AACP,MAAA,MAAAC,WAAA,GAAAA,MAAA3D,kBAAA,EAAA0D,QAAA,IAAA;MAEA,IAAAX,CAAAA;MAEAY,WAAqB,EAAA;;AAKjB,IAAA,MAAAC,IAAA,GAAA,IAAA,CAAA9F,SAAA,CAAA8F,IAAA;IACA,MAAAC,OAAA,kBAAyC,QAAA,IAAaD,IAAA,CAAAE,GAAA;UAEtDC,QAAA,GAAA,OAAAH,IAAa,IAAA,QAAA,GAAAA,IAAA,CAAcI,IAAA,GAAAJ,IAAA;;AAG/BK,IAAAA,MAAAA,YAAE,GAAAC,aAAA;AACJ,IAAA,IAAAL,OAAA,EAAA;MAGAA,OAAW,CAAA,IAAA,CAAAZ,eAAA,EAAA7E,IAAAA,CAAAA,QAAA,EAAA1I,KAAA,EAAAwM,mBAAA,EAAA+B,YAAA,CAAA;;+BAEsB,EAAA,IAAA,EAAA;AAAAE,MAAAA,uBAAE,EAAAC;AAAA,KAAA,CAAA;gBACjC,EAAA;MACAL,QAAK,CAAA,IAAsB,CAAAd,eAAiB,EAAA7E,IAAAA,CAAAA,QAAA,EAAA1I,KAAA,EAAAwM,mBAAA,EAAA+B,YAAA,CAAA;AAC9C;+BAGQ,IAAAT,UAA+C,CAAA,IAAA,CAAAxD,kBAAA,CAAAqE,SAAa,CAAA,EAAA;MAClE,IAAArE,CAAAA,kBAAA,CAAAqE,SAAA,EAAA;;;;gCAYU,EAAA;mCAE+C;AAGnD,KAAA,MAAA;AACA,MAAA,IAAA,CAAAd,cAAA,CAAAe,OAAA,EAAA,IAAA,CAAAzB,kBAAA,CAAA;;;AAKA0B,EAAAA,SAAAA,GAAA;AACE,IAAA,MAAAC,qBAAA,GAAA,IAAA,CAAAC,QAAA,CAAAD,qBAAA;UAAAE,qBAAA,GAAA,IAAA,CAAAD,QAAA,CAAAC,qBAAA;AACAC,IAAAA,MAAAA,mBAAA,GAAS,IAAA,CAAqBF,QAAA,CAAAE,mBAAM;;;AAIpC,MAAA,MAAAC,QAAA,GAAAF,qBAAA,CAAAlJ,GAAA,CAAA;AACA,MAAA,IAAA,CAAAiF,MAAA,CAAAoE,EAAA,CAAAC,QAAA,EAAAF,QAAA,CAAA,EAAA;2BACMD,mBAAA,CAAAvM,QAAA,CAAA;AACR,QAAA,MAAA2M,YAAA,GAAA,IAAA,CAAAC,UAAA,CAAA;yBACM,CAAAF,QAAW,CAAA;6BAInB,CAAAtJ,GAAA,CAAA,GAAAsJ,QAAA;AACF;;;AAOF,EAAA,WAAA,GAAA;AAEG,IAAA,IAAAG,UAAO,CAAI,IAAC,CAAQlC;AACpB,MAAA,IAAA,CAAAA,wBAAqB,EAAA;;AAEnB,IAAA,IAAA,CAAAK,MAAA,CAAAhJ,SAAA,CAAA6I,IAAAA,CAAAA,eAAA,OAAAjD,kBAAA,CAAA;AACH;EAGIkF,kBAAApH,CAAAA,SAAkE,EAAAhL,IAAA,EAAA;qBACvB,GAAA,OAAAgL,SAAA,CAAAiE,gBAAA,KAAA,QAAA;QACjDoD,WAAa,IAAA1E,MAA0B,CAAA0B,IAAA,CAAArE,SAAA,CAAAnI,KAAA,CAAA,CAAA+F,MAAkB,EAAA;sBAC/B,CAAA,8EAAA,CAAA,CAAA;AACxB;IAEA,MAAA0J,OAAA,GAAAD,WAAmB,GAAArH,SAAA,CAAAiE,gBAA2B,GAAAjE,SAAmB,CAACnI,KAAA;IACpE,MAAA8O,QAAA,OAAAY,QAAA,EAAA;AAGoB,IAAA,IAAA,OAAAD,OAEkC,IAAA,QAAA,EAAA;YAEN,CAAAjD,IAAA,CAAAiD,OAAA,CAAA/O,CAAAA,OAAA,CAAA+B,QAAA,IAAA;AAChD,QAAA,MAAAkN,UAAmB,GAAEF,OAAA,CAAAhN,QACV,CAAA;cAGPmN,WACF,GAAAD,UAAA,CAAAvE,MAAA,CAAA,CAAA,CAAA;;;eA3OI,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ECyGL1J,QAAA;EAYEmO,cAAA;;IAZF,IAAA,CAAApJ,MAAA,GAAAA,MAAA;IACH,IAAAqJ,CAAAA,WAAA,GAAAA,WAAA;;;;;;sGA4BcC,CAAAA,OACA,CAAA1C,gCAMM3L,QAAA,KAAA;AAAAA,MAAAA;AAAA,KAAA,CAAA,8BAKN,GAGAsO,QAAA,EAAAhS,SAAA,KAAA;qCACD,CAAA,EAAA;QACFgS,QAAC,CAAAC,SAAA,CAAA5C,aAAA,EAAA,YAIF6C,mBAAA,IAAA;AACE,UAAA,MAAAC,kBAAA,GAAAD,mBAAA,CAAAE,UAAA;gBACC1O,QAAA,QAAAA,QAAA;gBAEC2O,aAAyE,GAAAA,UAAAjK,QAAA,EAAA;8BACH,CAAAkK,IAAA,CAAAJ,mBAAA,EAAA,YAAA;AACtE,cAAA,MAAAK,cAAmB,GAAA7O,QAAA,CAAAzD,GAAA,CAAA4D,WAAA,CAAA;cAOjB,IAAA0O,cAAqC,CAAAC,QAAA,EAAA,EAAA;gBACnCpK,QAAA,EAAA;;yCAIiE,CAAAiK,aAAA,CAAAI,IAAA,CAAAP,mBAAA,EAAA9J,QAAA,CAAA,CAAA;;;;6BAI7D,CAAAgK,UAAA,GAAAC,aAAA;;;;;gDAgBL,kBACE,IAAA;cAMPK,eAAC,GAAAA,CAAAC,EAAA,EAAAC,KAAA,EAAAC,KAAA,EAAAC,WAAA,EAAA,GAAAC,IAAA,KAAA;YACF,OAAC,IAAA,CAAAtK,MAAA,CAAAuK,iBAAA,CAAA,MAAA;cACJ,OAAAC,gBAAA,KAAAC,IAAA,KAAA;AAMDC,gBAAAA,UAAyC,CACxC,MACM;6BAOY,CAAAzK,GAAA,OAAAiK,EACV;AAIiE,iBAAA,CAAA;AAEE,eAAA,EAAA,KAAA,EAAAE,KAAA,EAAAC,WAAA,EAAA,GAAAC,IAAA,CAAA;;;sBAGtEE,gBAAY,CAAA,CAAAvQ,OAAA,CAAApE,IAAA,IAAAoU,eAAA,CAAApU,IAAA,CAAA,GAAA2U,gBAAA,CAAA3U,IAAA,CAAA,CAAA;8BAGqE,CAAA6G,cAAA,QAAA,CAAA,EAAA;AAC3E,YAAA,eAAA,CAAA,OAAA,CAAA,GAAA,MAAA;AACH8N,cAAAA,gBAEF,CACE,OAAA,CAAA,EAAA;;;;AAYN,UAAA,OAAAP,eAAA;;;iCASA,IAAA;;;AAKRU,MAAAA,kBAAA,CAAApT,SAAA,CAAA;AAMA,MAAA,IAAA,CAAA0D,QAAA,CAAAzD,GAAA,CAAAoP,SAAA,CAAA;AAGsDgE,MAAAA,OAAA,CAAAvR,SAAA,EAAAwR,IAAA,CAAAzD,aAAA,CAAAR,YAAA,QAAA3L,QAAA,CAAA;MAWlD,IAAAoO,CAAAA,WAAA,CAAArL,SAAA,CAAA,MAAAoJ,UAAA,CAAA7P,SAAA,CAAgC,CAAA;;;;;AAjN/B,cAAA,IAAA,OAAAuT,SAAA,KAAA,WAAA,IAAAA,SAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
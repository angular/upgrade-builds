{"version":3,"sources":["../../../packages/upgrade/esm5/src/common/angular1.js","../../../packages/upgrade/esm5/src/common/constants.js","../../../packages/upgrade/esm5/src/common/component_info.js","../../../packages/upgrade/esm5/src/common/util.js","../../../packages/upgrade/esm5/src/common/downgrade_component_adapter.js","../../../packages/upgrade/esm5/src/common/downgrade_component.js","../../../packages/upgrade/esm5/src/common/upgrade_helper.js","../../../packages/upgrade/esm5/src/dynamic/upgrade_ng1_adapter.js","../../../packages/upgrade/esm5/src/dynamic/upgrade_adapter.js"],"names":["noNg","Error","angular","bootstrap","module","element","version","undefined","$CONTROLLER","$INJECTOR","this","parseBinding","prototype","bracketAttr","attr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","DIRECTIVE_SPECIAL_CHARS_REGEXP","onError","e","console","error","stack","value","_this","promise","Promise","res","rej","resolve","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$injector","$compile","$parse","componentFactory","wrapCallback","componentScope","$new","compileContents","compiledProjectableNodes","linkFns","groupProjectableNodes","map","nodes","forEach","linkFn","clone","push","createComponent","projectableNodes","providers","provide","$SCOPE","useValue","component","componentRef","instance","testability","injector","get","_angular_core","Testability","supportsNgModel","$render","writeValue","$viewValue","registerOnChange","$setViewValue","bind","setupInputs","needsNgZone","propagateDigest","inputs","i","prop","prevValue","input","PropertyBinding","propName","templateName","observeFn_1","INITIAL_VALUE","currValue","strictEquals","updateInput","unwatch_1","this_1","$watch","hasOwnProperty","bindAttr","bindonAttr","expr","watchFn","length","_loop_1","detectChanges","changeDetector","componentType","ngOnChanges","inputChangeCount","inputChanges","unwatch_2","setupOutputs","j","outputs","output","substring","subscribeToOutput","isAssignment","getter","setter","assign","emitter","subscribe","next","v","$event","registerCleanup","destroyComponentRef","destroy","destroyed","$destroy","$on","TestabilityRegistry","implementsOnChanges","ngContentSelectors","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","_matches","elProto","Element","ngZone","cb","REQUIRE_INJECTOR","REQUIRE_NG_MODEL","required","ranAsync","lazyModuleRef","ComponentFactoryResolver","doDowngrade","ParentInjectorPromise","resolveComponentFactory","info","getComponentName","injectorPromise","ParentInjectorPromise$1","facade","getInjector","$evalAsync","downgradeFn","NgZone","isInAngularZone","run","then","injectorKey","controllerKey","INJECTOR_KEY","callback","UpgradeHelper","name","elementRef","directive","$COMPILE","getDirective","directives","compile","link","notSupported","replace","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","reject","status","response","put","buildController","controllerType","$scope","compileTemplate","compileHtml","prepareTransclusion","attachChildrenFn","cloneAttachFn","$template","contentChildNodes","transclude","slotMap_1","Object","create","filledSlots_1","keys","slotName","optional","slots_1","nodeName","toLowerCase","nodeType","Node","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","controllerInstance","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","isMap","requiredControllersMap_1","key","childNodes","extractChildNodes","childNode","firstChild","require","controller","match","REQUIRE_PREFIX_RE","Array","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","$element","CAMEL_CASE","INITIAL_VALUE$1","UpgradeNg1ComponentAdapterBuilder","inputsRename","outputsRename","propertyOutputs","self","all","UpgradeNg1ComponentAdapter","helper","checkProperties","propertyMap","ngOnInit","ngDoCheck","ngOnDestroy","decorators","type","Injector","args","MyClass","ctorParameters","Inject","ElementRef","extractBindings","btcIsObject","context","definition","bindingType","bindingOptions","attrName","inputName","inputNameRename","outputName","outputNameRename","outputNameRenameChange","json","JSON","stringify","exportedComponents","promises","exportedComponent","getTemplate","propOuts","destinationObj","checkLastValues","EventEmitter","indexOf","setComponentProperty","emit","attachChildNodes","isFunction","$onInit","preLink","pre","postLink","post","parentBoundTranscludeFn","changes","ng1Changes","change","currentValue","lastValues","ng1ComponentsToBeUpgraded","upgradedProviders","modules","windowNgMock","mock","declareNg1Module","element$$1","config","upgrade","UpgradeAdapterRef","windowAngular","resumeBootstrap","ng1Module","ng1BootstrapPromise","originalResumeBootstrap_1","apply","arguments","ng2BootstrapDeferred","_a","ng1Injector","options","token","asToken","original$applyFn","delayApplyExps","upgradeAdapter","idPrefix","platformRef","_angular_platformBrowserDynamic","platformBrowserDynamic","enableLongStackTrace","Zone","Deferred","factory","LAZY_MODULE_REF","Compiler","decorator","rootScopeDelegate","constructor","rootScopePrototype","$apply","exp","originalWhenStable","testabilityDelegate","whenStable","newWhenStable","call","ng2Testability","isStable","ngModule","useFactory","ng2AppModule","DynamicNgUpgradeModule","NgModule","ref","rootScope","shift","subscription","onMicrotaskEmpty","$digest","unsubscribe","catch","_readyFn","_bootstrapDone","ngModuleRef","ng2ModuleRef","fn","dispose"],"mappings":"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","file":"/home/travis/build/angular/angular/dist/packages-dist/upgrade/bundles/upgrade.umd.min.js.map","sourcesContent":["/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\nexport function IAnnotatedFunction() { }\nfunction IAnnotatedFunction_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    IAnnotatedFunction.prototype.$inject;\n}\n/**\n * @record\n */\nexport function IModule() { }\nfunction IModule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IModule.prototype.name;\n    /** @type {?} */\n    IModule.prototype.requires;\n    /** @type {?} */\n    IModule.prototype.config;\n    /** @type {?} */\n    IModule.prototype.directive;\n    /** @type {?} */\n    IModule.prototype.component;\n    /** @type {?} */\n    IModule.prototype.controller;\n    /** @type {?} */\n    IModule.prototype.factory;\n    /** @type {?} */\n    IModule.prototype.value;\n    /** @type {?} */\n    IModule.prototype.constant;\n    /** @type {?} */\n    IModule.prototype.run;\n}\n/**\n * @record\n */\nexport function ICompileService() { }\nfunction ICompileService_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (element: Element|NodeList|Node[]|string, transclude?: Function): ILinkFn;\n    */\n}\n/**\n * @record\n */\nexport function ILinkFn() { }\nfunction ILinkFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (scope: IScope, cloneAttachFn?: ICloneAttachFunction, options?: ILinkFnOptions): IAugmentedJQuery;\n    */\n    /** @type {?|undefined} */\n    ILinkFn.prototype.$$slots;\n}\n/**\n * @record\n */\nexport function ILinkFnOptions() { }\nfunction ILinkFnOptions_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    ILinkFnOptions.prototype.parentBoundTranscludeFn;\n    /** @type {?|undefined} */\n    ILinkFnOptions.prototype.transcludeControllers;\n    /** @type {?|undefined} */\n    ILinkFnOptions.prototype.futureParentElement;\n}\n/**\n * @record\n */\nexport function IRootScopeService() { }\nfunction IRootScopeService_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IRootScopeService.prototype.$new;\n    /** @type {?} */\n    IRootScopeService.prototype.$id;\n    /** @type {?} */\n    IRootScopeService.prototype.$parent;\n    /** @type {?} */\n    IRootScopeService.prototype.$root;\n    /** @type {?} */\n    IRootScopeService.prototype.$watch;\n    /** @type {?} */\n    IRootScopeService.prototype.$on;\n    /** @type {?} */\n    IRootScopeService.prototype.$destroy;\n    /** @type {?} */\n    IRootScopeService.prototype.$apply;\n    /** @type {?} */\n    IRootScopeService.prototype.$digest;\n    /** @type {?} */\n    IRootScopeService.prototype.$evalAsync;\n    /** @type {?} */\n    IRootScopeService.prototype.$on;\n    /** @type {?} */\n    IRootScopeService.prototype.$$childTail;\n    /** @type {?} */\n    IRootScopeService.prototype.$$childHead;\n    /** @type {?} */\n    IRootScopeService.prototype.$$nextSibling;\n    /* TODO: handle strange member:\n    [key: string]: any;\n    */\n}\n/**\n * @record\n */\nexport function IScope() { }\nfunction IScope_tsickle_Closure_declarations() {\n}\n/**\n * @record\n */\nexport function IAngularBootstrapConfig() { }\nfunction IAngularBootstrapConfig_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    IAngularBootstrapConfig.prototype.strictDi;\n}\n/**\n * @record\n */\nexport function IDirective() { }\nfunction IDirective_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    IDirective.prototype.compile;\n    /** @type {?|undefined} */\n    IDirective.prototype.controller;\n    /** @type {?|undefined} */\n    IDirective.prototype.controllerAs;\n    /** @type {?|undefined} */\n    IDirective.prototype.bindToController;\n    /** @type {?|undefined} */\n    IDirective.prototype.link;\n    /** @type {?|undefined} */\n    IDirective.prototype.name;\n    /** @type {?|undefined} */\n    IDirective.prototype.priority;\n    /** @type {?|undefined} */\n    IDirective.prototype.replace;\n    /** @type {?|undefined} */\n    IDirective.prototype.require;\n    /** @type {?|undefined} */\n    IDirective.prototype.restrict;\n    /** @type {?|undefined} */\n    IDirective.prototype.scope;\n    /** @type {?|undefined} */\n    IDirective.prototype.template;\n    /** @type {?|undefined} */\n    IDirective.prototype.templateUrl;\n    /** @type {?|undefined} */\n    IDirective.prototype.templateNamespace;\n    /** @type {?|undefined} */\n    IDirective.prototype.terminal;\n    /** @type {?|undefined} */\n    IDirective.prototype.transclude;\n}\n/**\n * @record\n */\nexport function IDirectiveCompileFn() { }\nfunction IDirectiveCompileFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (templateElement: IAugmentedJQuery, templateAttributes: IAttributes,\n       transclude: ITranscludeFunction): IDirectivePrePost;\n    */\n}\n/**\n * @record\n */\nexport function IDirectivePrePost() { }\nfunction IDirectivePrePost_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    IDirectivePrePost.prototype.pre;\n    /** @type {?|undefined} */\n    IDirectivePrePost.prototype.post;\n}\n/**\n * @record\n */\nexport function IDirectiveLinkFn() { }\nfunction IDirectiveLinkFn_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (scope: IScope, instanceElement: IAugmentedJQuery, instanceAttributes: IAttributes,\n       controller: any, transclude: ITranscludeFunction): void;\n    */\n}\n/**\n * @record\n */\nexport function IComponent() { }\nfunction IComponent_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    IComponent.prototype.bindings;\n    /** @type {?|undefined} */\n    IComponent.prototype.controller;\n    /** @type {?|undefined} */\n    IComponent.prototype.controllerAs;\n    /** @type {?|undefined} */\n    IComponent.prototype.require;\n    /** @type {?|undefined} */\n    IComponent.prototype.template;\n    /** @type {?|undefined} */\n    IComponent.prototype.templateUrl;\n    /** @type {?|undefined} */\n    IComponent.prototype.transclude;\n}\n/**\n * @record\n */\nexport function IAttributes() { }\nfunction IAttributes_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IAttributes.prototype.$observe;\n    /* TODO: handle strange member:\n    [key: string]: any;\n    */\n}\n/**\n * @record\n */\nexport function ITranscludeFunction() { }\nfunction ITranscludeFunction_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (scope: IScope, cloneAttachFn: ICloneAttachFunction): IAugmentedJQuery;\n    */\n    /* TODO: handle strange member:\n    (cloneAttachFn?: ICloneAttachFunction): IAugmentedJQuery;\n    */\n}\n/**\n * @record\n */\nexport function ICloneAttachFunction() { }\nfunction ICloneAttachFunction_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (clonedElement?: IAugmentedJQuery, scope?: IScope): any;\n    */\n}\n/**\n * @record\n */\nexport function IProvider() { }\nfunction IProvider_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IProvider.prototype.$get;\n}\n/**\n * @record\n */\nexport function IProvideService() { }\nfunction IProvideService_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IProvideService.prototype.provider;\n    /** @type {?} */\n    IProvideService.prototype.factory;\n    /** @type {?} */\n    IProvideService.prototype.service;\n    /** @type {?} */\n    IProvideService.prototype.value;\n    /** @type {?} */\n    IProvideService.prototype.constant;\n    /** @type {?} */\n    IProvideService.prototype.decorator;\n}\n/**\n * @record\n */\nexport function IParseService() { }\nfunction IParseService_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (expression: string): ICompiledExpression;\n    */\n}\n/**\n * @record\n */\nexport function ICompiledExpression() { }\nfunction ICompiledExpression_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (context: any, locals: any): any;\n    */\n    /** @type {?|undefined} */\n    ICompiledExpression.prototype.assign;\n}\n/**\n * @record\n */\nexport function IHttpBackendService() { }\nfunction IHttpBackendService_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (method: string, url: string, post?: any, callback?: Function, headers?: any, timeout?: number,\n       withCredentials?: boolean): void;\n    */\n}\n/**\n * @record\n */\nexport function ICacheObject() { }\nfunction ICacheObject_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ICacheObject.prototype.put;\n    /** @type {?} */\n    ICacheObject.prototype.get;\n}\n/**\n * @record\n */\nexport function ITemplateCacheService() { }\nfunction ITemplateCacheService_tsickle_Closure_declarations() {\n}\n/**\n * @record\n */\nexport function ITemplateRequestService() { }\nfunction ITemplateRequestService_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (template: string|any __ TrustedResourceUrl __, ignoreRequestError?: boolean): Promise<string>;\n    */\n    /** @type {?} */\n    ITemplateRequestService.prototype.totalPendingRequests;\n}\n/**\n * @record\n */\nexport function IControllerService() { }\nfunction IControllerService_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (controllerConstructor: IController, locals?: any, later?: any, ident?: any): any;\n    */\n    /* TODO: handle strange member:\n    (controllerName: string, locals?: any): any;\n    */\n}\n/**\n * @record\n */\nexport function IInjectorService() { }\nfunction IInjectorService_tsickle_Closure_declarations() {\n    /** @type {?} */\n    IInjectorService.prototype.get;\n    /** @type {?} */\n    IInjectorService.prototype.has;\n}\n/**\n * @record\n */\nexport function IIntervalService() { }\nfunction IIntervalService_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    (func: Function, delay: number, count?: number, invokeApply?: boolean,\n       ...args: any[]): Promise<any>;\n    */\n    /** @type {?} */\n    IIntervalService.prototype.cancel;\n}\n/**\n * @record\n */\nexport function ITestabilityService() { }\nfunction ITestabilityService_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ITestabilityService.prototype.findBindings;\n    /** @type {?} */\n    ITestabilityService.prototype.findModels;\n    /** @type {?} */\n    ITestabilityService.prototype.getLocation;\n    /** @type {?} */\n    ITestabilityService.prototype.setLocation;\n    /** @type {?} */\n    ITestabilityService.prototype.whenStable;\n}\n/**\n * @record\n */\nexport function INgModelController() { }\nfunction INgModelController_tsickle_Closure_declarations() {\n    /** @type {?} */\n    INgModelController.prototype.$render;\n    /** @type {?} */\n    INgModelController.prototype.$isEmpty;\n    /** @type {?} */\n    INgModelController.prototype.$setValidity;\n    /** @type {?} */\n    INgModelController.prototype.$setPristine;\n    /** @type {?} */\n    INgModelController.prototype.$setDirty;\n    /** @type {?} */\n    INgModelController.prototype.$setUntouched;\n    /** @type {?} */\n    INgModelController.prototype.$setTouched;\n    /** @type {?} */\n    INgModelController.prototype.$rollbackViewValue;\n    /** @type {?} */\n    INgModelController.prototype.$validate;\n    /** @type {?} */\n    INgModelController.prototype.$commitViewValue;\n    /** @type {?} */\n    INgModelController.prototype.$setViewValue;\n    /** @type {?} */\n    INgModelController.prototype.$viewValue;\n    /** @type {?} */\n    INgModelController.prototype.$modelValue;\n    /** @type {?} */\n    INgModelController.prototype.$parsers;\n    /** @type {?} */\n    INgModelController.prototype.$formatters;\n    /** @type {?} */\n    INgModelController.prototype.$validators;\n    /** @type {?} */\n    INgModelController.prototype.$asyncValidators;\n    /** @type {?} */\n    INgModelController.prototype.$viewChangeListeners;\n    /** @type {?} */\n    INgModelController.prototype.$error;\n    /** @type {?} */\n    INgModelController.prototype.$pending;\n    /** @type {?} */\n    INgModelController.prototype.$untouched;\n    /** @type {?} */\n    INgModelController.prototype.$touched;\n    /** @type {?} */\n    INgModelController.prototype.$pristine;\n    /** @type {?} */\n    INgModelController.prototype.$dirty;\n    /** @type {?} */\n    INgModelController.prototype.$valid;\n    /** @type {?} */\n    INgModelController.prototype.$invalid;\n    /** @type {?} */\n    INgModelController.prototype.$name;\n}\n/**\n * @return {?}\n */\nfunction noNg() {\n    throw new Error('AngularJS v1.x is not loaded!');\n}\nvar /** @type {?} */ angular = /** @type {?} */ ({\n    bootstrap: noNg,\n    module: noNg,\n    element: noNg,\n    version: undefined,\n    resumeBootstrap: noNg,\n    getTestability: noNg\n});\ntry {\n    if (window.hasOwnProperty('angular')) {\n        angular = (/** @type {?} */ (window)).angular;\n    }\n}\ncatch (/** @type {?} */ e) {\n    // ignore in CJS mode.\n}\n/**\n * @deprecated Use {\\@link setAngularJSGlobal} instead.\n * @param {?} ng\n * @return {?}\n */\nexport function setAngularLib(ng) {\n    setAngularJSGlobal(ng);\n}\n/**\n * @deprecated Use {\\@link getAngularJSGlobal} instead.\n * @return {?}\n */\nexport function getAngularLib() {\n    return getAngularJSGlobal();\n}\n/**\n * Resets the AngularJS global.\n *\n * Used when AngularJS is loaded lazily, and not available on `window`.\n *\n * \\@stable\n * @param {?} ng\n * @return {?}\n */\nexport function setAngularJSGlobal(ng) {\n    angular = ng;\n    version = ng && ng.version;\n}\n/**\n * Returns the current AngularJS global.\n *\n * \\@stable\n * @return {?}\n */\nexport function getAngularJSGlobal() {\n    return angular;\n}\nexport var /** @type {?} */ bootstrap = function (e, modules, config) {\n    return angular.bootstrap(e, modules, config);\n};\nexport var /** @type {?} */ module = function (prefix, dependencies) {\n    return angular.module(prefix, dependencies);\n};\nexport var /** @type {?} */ element = function (e) { return angular.element(e); };\nexport var /** @type {?} */ resumeBootstrap = function () { return angular.resumeBootstrap(); };\nexport var /** @type {?} */ getTestability = function (e) { return angular.getTestability(e); };\nexport var /** @type {?} */ version = angular.version;\n//# sourceMappingURL=angular1.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport var /** @type {?} */ $COMPILE = '$compile';\nexport var /** @type {?} */ $CONTROLLER = '$controller';\nexport var /** @type {?} */ $DELEGATE = '$delegate';\nexport var /** @type {?} */ $HTTP_BACKEND = '$httpBackend';\nexport var /** @type {?} */ $INJECTOR = '$injector';\nexport var /** @type {?} */ $INTERVAL = '$interval';\nexport var /** @type {?} */ $PARSE = '$parse';\nexport var /** @type {?} */ $PROVIDE = '$provide';\nexport var /** @type {?} */ $ROOT_SCOPE = '$rootScope';\nexport var /** @type {?} */ $SCOPE = '$scope';\nexport var /** @type {?} */ $TEMPLATE_CACHE = '$templateCache';\nexport var /** @type {?} */ $TEMPLATE_REQUEST = '$templateRequest';\nexport var /** @type {?} */ $$TESTABILITY = '$$testability';\nexport var /** @type {?} */ COMPILER_KEY = '$$angularCompiler';\nexport var /** @type {?} */ GROUP_PROJECTABLE_NODES_KEY = '$$angularGroupProjectableNodes';\nexport var /** @type {?} */ INJECTOR_KEY = '$$angularInjector';\nexport var /** @type {?} */ LAZY_MODULE_REF = '$$angularLazyModuleRef';\nexport var /** @type {?} */ NG_ZONE_KEY = '$$angularNgZone';\nexport var /** @type {?} */ REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nexport var /** @type {?} */ REQUIRE_NG_MODEL = '?ngModel';\nexport var /** @type {?} */ UPGRADE_MODULE_NAME = '$$UpgradeModule';\n//# sourceMappingURL=constants.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nvar /**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nPropertyBinding = /** @class */ (function () {\n    function PropertyBinding(prop, attr) {\n        this.prop = prop;\n        this.attr = attr;\n        this.parseBinding();\n    }\n    /**\n     * @return {?}\n     */\n    PropertyBinding.prototype.parseBinding = /**\n     * @return {?}\n     */\n    function () {\n        this.bracketAttr = \"[\" + this.attr + \"]\";\n        this.parenAttr = \"(\" + this.attr + \")\";\n        this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n        var /** @type {?} */ capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n        this.onAttr = \"on\" + capitalAttr;\n        this.bindAttr = \"bind\" + capitalAttr;\n        this.bindonAttr = \"bindon\" + capitalAttr;\n    };\n    return PropertyBinding;\n}());\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nexport { PropertyBinding };\nfunction PropertyBinding_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PropertyBinding.prototype.bracketAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.bracketParenAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.parenAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.onAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.bindAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.bindonAttr;\n    /** @type {?} */\n    PropertyBinding.prototype.prop;\n    /** @type {?} */\n    PropertyBinding.prototype.attr;\n}\n//# sourceMappingURL=component_info.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar /** @type {?} */ DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\nvar /** @type {?} */ DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n/**\n * @param {?} e\n * @return {?}\n */\nexport function onError(e) {\n    // TODO: (misko): We seem to not have a stack trace here!\n    if (console.error) {\n        console.error(e, e.stack);\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.log(e, e.stack);\n    }\n    throw e;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function controllerKey(name) {\n    return '$' + name + 'Controller';\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function directiveNormalize(name) {\n    return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n        .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function getAttributesAsArray(node) {\n    var /** @type {?} */ attributes = node.attributes;\n    var /** @type {?} */ asArray = /** @type {?} */ ((undefined));\n    if (attributes) {\n        var /** @type {?} */ attrLen = attributes.length;\n        asArray = new Array(attrLen);\n        for (var /** @type {?} */ i = 0; i < attrLen; i++) {\n            asArray[i] = [attributes[i].nodeName, /** @type {?} */ ((attributes[i].nodeValue))];\n        }\n    }\n    return asArray || [];\n}\n/**\n * @param {?} component\n * @return {?}\n */\nexport function getComponentName(component) {\n    // Return the name of the component or the first line of its stringified version.\n    return (/** @type {?} */ (component)).overriddenName || component.name || component.toString().split('\\n')[0];\n}\n/**\n * @param {?} value\n * @return {?}\n */\nexport function isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * @template R\n */\nvar /**\n * @template R\n */\nDeferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    return Deferred;\n}());\n/**\n * @template R\n */\nexport { Deferred };\nfunction Deferred_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Deferred.prototype.promise;\n    /** @type {?} */\n    Deferred.prototype.resolve;\n    /** @type {?} */\n    Deferred.prototype.reject;\n}\n/**\n * @record\n */\nexport function LazyModuleRef() { }\nfunction LazyModuleRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    LazyModuleRef.prototype.needsNgZone;\n    /** @type {?|undefined} */\n    LazyModuleRef.prototype.injector;\n    /** @type {?|undefined} */\n    LazyModuleRef.prototype.promise;\n}\n/**\n * @param {?} component\n * @return {?} Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component) {\n    return typeof component.writeValue === 'function' &&\n        typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n * @param {?} ngModel\n * @param {?} component\n * @return {?}\n */\nexport function hookupNgModel(ngModel, component) {\n    if (ngModel && supportsNgModel(component)) {\n        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n        if (typeof component.registerOnTouched === 'function') {\n            component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n        }\n    }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n * @param {?} val1\n * @param {?} val2\n * @return {?}\n */\nexport function strictEquals(val1, val2) {\n    return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n//# sourceMappingURL=util.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef, Injector, SimpleChange, Testability, TestabilityRegistry } from '@angular/core';\nimport { PropertyBinding } from './component_info';\nimport { $SCOPE } from './constants';\nimport { getComponentName, hookupNgModel, strictEquals } from './util';\nvar /** @type {?} */ INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar DowngradeComponentAdapter = /** @class */ (function () {\n    function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n        this.element = element;\n        this.attrs = attrs;\n        this.scope = scope;\n        this.ngModel = ngModel;\n        this.parentInjector = parentInjector;\n        this.$injector = $injector;\n        this.$compile = $compile;\n        this.$parse = $parse;\n        this.componentFactory = componentFactory;\n        this.wrapCallback = wrapCallback;\n        this.implementsOnChanges = false;\n        this.inputChangeCount = 0;\n        this.inputChanges = {};\n        this.componentScope = scope.$new();\n    }\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.compileContents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ compiledProjectableNodes = [];\n        var /** @type {?} */ projectableNodes = this.groupProjectableNodes();\n        var /** @type {?} */ linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); }); /** @type {?} */\n        ((this.element.empty))();\n        linkFns.forEach(function (linkFn) {\n            linkFn(_this.scope, function (clone) {\n                compiledProjectableNodes.push(clone); /** @type {?} */\n                ((_this.element.append))(clone);\n            });\n        });\n        return compiledProjectableNodes;\n    };\n    /**\n     * @param {?} projectableNodes\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.createComponent = /**\n     * @param {?} projectableNodes\n     * @return {?}\n     */\n    function (projectableNodes) {\n        var /** @type {?} */ providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n        var /** @type {?} */ childInjector = Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n        this.componentRef =\n            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n        this.changeDetector = this.componentRef.changeDetectorRef;\n        this.component = this.componentRef.instance;\n        // testability hook is commonly added during component bootstrap in\n        // packages/core/src/application_ref.bootstrap()\n        // in downgraded application, component creation will take place here as well as adding the\n        // testability hook.\n        var /** @type {?} */ testability = this.componentRef.injector.get(Testability, null);\n        if (testability) {\n            this.componentRef.injector.get(TestabilityRegistry)\n                .registerApplication(this.componentRef.location.nativeElement, testability);\n        }\n        hookupNgModel(this.ngModel, this.component);\n    };\n    /**\n     * @param {?} needsNgZone\n     * @param {?=} propagateDigest\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.setupInputs = /**\n     * @param {?} needsNgZone\n     * @param {?=} propagateDigest\n     * @return {?}\n     */\n    function (needsNgZone, propagateDigest) {\n        var _this = this;\n        if (propagateDigest === void 0) { propagateDigest = true; }\n        var /** @type {?} */ attrs = this.attrs;\n        var /** @type {?} */ inputs = this.componentFactory.inputs || [];\n        var _loop_1 = function (i) {\n            var /** @type {?} */ input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n            var /** @type {?} */ expr = null;\n            if (attrs.hasOwnProperty(input.attr)) {\n                var /** @type {?} */ observeFn_1 = (function (prop) {\n                    var /** @type {?} */ prevValue = INITIAL_VALUE;\n                    return function (currValue) {\n                        // Initially, both `$observe()` and `$watch()` will call this function.\n                        if (!strictEquals(prevValue, currValue)) {\n                            if (prevValue === INITIAL_VALUE) {\n                                prevValue = currValue;\n                            }\n                            _this.updateInput(prop, prevValue, currValue);\n                            prevValue = currValue;\n                        }\n                    };\n                })(input.prop);\n                attrs.$observe(input.attr, observeFn_1);\n                // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                var /** @type {?} */ unwatch_1 = this_1.componentScope.$watch(function () {\n                    /** @type {?} */ ((unwatch_1))();\n                    unwatch_1 = null;\n                    observeFn_1(attrs[input.attr]);\n                });\n            }\n            else if (attrs.hasOwnProperty(input.bindAttr)) {\n                expr = attrs[input.bindAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                expr = attrs[input.bracketAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                expr = attrs[input.bindonAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                expr = attrs[input.bracketParenAttr];\n            }\n            if (expr != null) {\n                var /** @type {?} */ watchFn = (function (prop) {\n                    return function (currValue, prevValue) {\n                        return _this.updateInput(prop, prevValue, currValue);\n                    };\n                })(input.prop);\n                this_1.componentScope.$watch(expr, watchFn);\n            }\n        };\n        var this_1 = this;\n        for (var /** @type {?} */ i = 0; i < inputs.length; i++) {\n            _loop_1(i);\n        }\n        // Invoke `ngOnChanges()` and Change Detection (when necessary)\n        var /** @type {?} */ detectChanges = function () { return _this.changeDetector.detectChanges(); };\n        var /** @type {?} */ prototype = this.componentFactory.componentType.prototype;\n        this.implementsOnChanges = !!(prototype && (/** @type {?} */ (prototype)).ngOnChanges);\n        this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n            // Invoke `ngOnChanges()`\n            if (_this.implementsOnChanges) {\n                var /** @type {?} */ inputChanges = _this.inputChanges;\n                _this.inputChanges = {};\n                (/** @type {?} */ (_this.component)).ngOnChanges(/** @type {?} */ ((inputChanges)));\n            }\n            // If opted out of propagating digests, invoke change detection when inputs change.\n            if (!propagateDigest) {\n                detectChanges();\n            }\n        }));\n        // If not opted out of propagating digests, invoke change detection on every digest\n        if (propagateDigest) {\n            this.componentScope.$watch(this.wrapCallback(detectChanges));\n        }\n        // If necessary, attach the view so that it will be dirty-checked.\n        // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n        if (needsNgZone || !propagateDigest) {\n            var /** @type {?} */ unwatch_2 = this.componentScope.$watch(function () {\n                /** @type {?} */ ((unwatch_2))();\n                unwatch_2 = null;\n                var /** @type {?} */ appRef = _this.parentInjector.get(ApplicationRef);\n                appRef.attachView(_this.componentRef.hostView);\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.setupOutputs = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ attrs = this.attrs;\n        var /** @type {?} */ outputs = this.componentFactory.outputs || [];\n        for (var /** @type {?} */ j = 0; j < outputs.length; j++) {\n            var /** @type {?} */ output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n            var /** @type {?} */ bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n            var /** @type {?} */ bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n            // order below is important - first update bindings then evaluate expressions\n            if (attrs.hasOwnProperty(bindonAttr)) {\n                this.subscribeToOutput(output, attrs[bindonAttr], true);\n            }\n            if (attrs.hasOwnProperty(bracketParenAttr)) {\n                this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n            }\n            if (attrs.hasOwnProperty(output.onAttr)) {\n                this.subscribeToOutput(output, attrs[output.onAttr]);\n            }\n            if (attrs.hasOwnProperty(output.parenAttr)) {\n                this.subscribeToOutput(output, attrs[output.parenAttr]);\n            }\n        }\n    };\n    /**\n     * @param {?} output\n     * @param {?} expr\n     * @param {?=} isAssignment\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.subscribeToOutput = /**\n     * @param {?} output\n     * @param {?} expr\n     * @param {?=} isAssignment\n     * @return {?}\n     */\n    function (output, expr, isAssignment) {\n        var _this = this;\n        if (isAssignment === void 0) { isAssignment = false; }\n        var /** @type {?} */ getter = this.$parse(expr);\n        var /** @type {?} */ setter = getter.assign;\n        if (isAssignment && !setter) {\n            throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n        }\n        var /** @type {?} */ emitter = /** @type {?} */ (this.component[output.prop]);\n        if (emitter) {\n            emitter.subscribe({\n                next: isAssignment ? function (v) { return ((setter))(_this.scope, v); } :\n                    function (v) { return getter(_this.scope, { '$event': v }); }\n            });\n        }\n        else {\n            throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this.componentFactory.componentType) + \"'!\");\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.registerCleanup = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n        var /** @type {?} */ destroyed = false; /** @type {?} */\n        ((this.element.on))('$destroy', function () { return _this.componentScope.$destroy(); });\n        this.componentScope.$on('$destroy', function () {\n            if (!destroyed) {\n                destroyed = true;\n                _this.componentRef.injector.get(TestabilityRegistry)\n                    .unregisterApplication(_this.componentRef.location.nativeElement);\n                destroyComponentRef();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.getInjector = /**\n     * @return {?}\n     */\n    function () { return this.componentRef.injector; };\n    /**\n     * @param {?} prop\n     * @param {?} prevValue\n     * @param {?} currValue\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.updateInput = /**\n     * @param {?} prop\n     * @param {?} prevValue\n     * @param {?} currValue\n     * @return {?}\n     */\n    function (prop, prevValue, currValue) {\n        if (this.implementsOnChanges) {\n            this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n        }\n        this.inputChangeCount++;\n        this.component[prop] = currValue;\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.groupProjectableNodes = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ ngContentSelectors = this.componentFactory.ngContentSelectors;\n        return groupNodesBySelector(ngContentSelectors, /** @type {?} */ ((this.element.contents))());\n    };\n    return DowngradeComponentAdapter;\n}());\nexport { DowngradeComponentAdapter };\nfunction DowngradeComponentAdapter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.implementsOnChanges;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.inputChangeCount;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.inputChanges;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.componentScope;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.componentRef;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.component;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.changeDetector;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.element;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.attrs;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.scope;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.ngModel;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.parentInjector;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.$injector;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.$compile;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.$parse;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.componentFactory;\n    /** @type {?} */\n    DowngradeComponentAdapter.prototype.wrapCallback;\n}\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n * @param {?} ngContentSelectors\n * @param {?} nodes\n * @return {?}\n */\nexport function groupNodesBySelector(ngContentSelectors, nodes) {\n    var /** @type {?} */ projectableNodes = [];\n    var /** @type {?} */ wildcardNgContentIndex;\n    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = ngContentSelectors.length; i < ii; ++i) {\n        projectableNodes[i] = [];\n    }\n    for (var /** @type {?} */ j = 0, /** @type {?} */ jj = nodes.length; j < jj; ++j) {\n        var /** @type {?} */ node = nodes[j];\n        var /** @type {?} */ ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n        if (ngContentIndex != null) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\n/**\n * @param {?} element\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction findMatchingNgContentIndex(element, ngContentSelectors) {\n    var /** @type {?} */ ngContentIndices = [];\n    var /** @type {?} */ wildcardNgContentIndex = -1;\n    for (var /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {\n        var /** @type {?} */ selector = ngContentSelectors[i];\n        if (selector === '*') {\n            wildcardNgContentIndex = i;\n        }\n        else {\n            if (matchesSelector(element, selector)) {\n                ngContentIndices.push(i);\n            }\n        }\n    }\n    ngContentIndices.sort();\n    if (wildcardNgContentIndex !== -1) {\n        ngContentIndices.push(wildcardNgContentIndex);\n    }\n    return ngContentIndices.length ? ngContentIndices[0] : null;\n}\nvar /** @type {?} */ _matches;\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nfunction matchesSelector(el, selector) {\n    if (!_matches) {\n        var /** @type {?} */ elProto = /** @type {?} */ (Element.prototype);\n        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    }\n    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n//# sourceMappingURL=downgrade_component_adapter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ComponentFactoryResolver, NgZone } from '@angular/core';\nimport { $COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, LAZY_MODULE_REF, REQUIRE_INJECTOR, REQUIRE_NG_MODEL } from './constants';\nimport { DowngradeComponentAdapter } from './downgrade_component_adapter';\nimport { controllerKey, getComponentName, isFunction } from './util';\n/**\n * @record\n * @template T\n */\nfunction Thenable() { }\nfunction Thenable_tsickle_Closure_declarations() {\n    /** @type {?} */\n    Thenable.prototype.then;\n}\n/**\n * \\@whatItDoes\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows an Angular component to be used from AngularJS.\n *\n * \\@howToUse\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * \\@description\n *\n * A helper function that returns a factory function to be used for registering an\n * AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * The parameter contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n *\n * \\@experimental\n * @param {?} info\n * @return {?}\n */\nexport function downgradeComponent(info) {\n    var /** @type {?} */ directiveFactory = function ($compile, $injector, $parse) {\n        // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n        // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n        // (except if explicitly escaped, in which case we shouldn't force it back in).\n        // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n        // Angular zone.\n        var /** @type {?} */ needsNgZone = false;\n        var /** @type {?} */ wrapCallback = function (cb) { return cb; };\n        var /** @type {?} */ ngZone;\n        return {\n            restrict: 'E',\n            terminal: true,\n            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n            link: function (scope, element, attrs, required) {\n                // We might have to compile the contents asynchronously, because this might have been\n                // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                // been compiled.\n                var /** @type {?} */ ngModel = required[1];\n                var /** @type {?} */ parentInjector = required[0];\n                var /** @type {?} */ ranAsync = false;\n                if (!parentInjector) {\n                    var /** @type {?} */ lazyModuleRef = /** @type {?} */ ($injector.get(LAZY_MODULE_REF));\n                    needsNgZone = lazyModuleRef.needsNgZone;\n                    parentInjector = lazyModuleRef.injector || /** @type {?} */ (lazyModuleRef.promise);\n                }\n                var /** @type {?} */ doDowngrade = function (injector) {\n                    var /** @type {?} */ componentFactoryResolver = injector.get(ComponentFactoryResolver);\n                    var /** @type {?} */ componentFactory = /** @type {?} */ ((componentFactoryResolver.resolveComponentFactory(info.component)));\n                    if (!componentFactory) {\n                        throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                    }\n                    var /** @type {?} */ injectorPromise = new ParentInjectorPromise(element);\n                    var /** @type {?} */ facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                    var /** @type {?} */ projectableNodes = facade.compileContents();\n                    facade.createComponent(projectableNodes);\n                    facade.setupInputs(needsNgZone, info.propagateDigest);\n                    facade.setupOutputs();\n                    facade.registerCleanup();\n                    injectorPromise.resolve(facade.getInjector());\n                    if (ranAsync) {\n                        // If this is run async, it is possible that it is not run inside a\n                        // digest and initial input values will not be detected.\n                        scope.$evalAsync(function () { });\n                    }\n                };\n                var /** @type {?} */ downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                    if (!ngZone) {\n                        ngZone = injector.get(NgZone);\n                        wrapCallback = function (cb) {\n                            return function () {\n                                return NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                            };\n                        };\n                    }\n                    wrapCallback(function () { return doDowngrade(injector); })();\n                };\n                if (isThenable(parentInjector)) {\n                    parentInjector.then(downgradeFn);\n                }\n                else {\n                    downgradeFn(parentInjector);\n                }\n                ranAsync = true;\n            }\n        };\n    };\n    // bracket-notation because of closure - see #14441\n    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n    return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nvar /**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nParentInjectorPromise = /** @class */ (function () {\n    function ParentInjectorPromise(element) {\n        this.element = element;\n        this.injectorKey = controllerKey(INJECTOR_KEY);\n        this.callbacks = [];\n        /** @type {?} */ ((\n        // Store the promise on the element.\n        element.data))(this.injectorKey, this);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.then = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (this.injector) {\n            callback(this.injector);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    /**\n     * @param {?} injector\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.resolve = /**\n     * @param {?} injector\n     * @return {?}\n     */\n    function (injector) {\n        this.injector = injector; /** @type {?} */\n        ((\n        // Store the real injector on the element.\n        this.element.data))(this.injectorKey, injector);\n        // Release the element to prevent memory leaks.\n        this.element = /** @type {?} */ ((null));\n        // Run the queued callbacks.\n        this.callbacks.forEach(function (callback) { return callback(injector); });\n        this.callbacks.length = 0;\n    };\n    return ParentInjectorPromise;\n}());\nfunction ParentInjectorPromise_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParentInjectorPromise.prototype.injector;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.injectorKey;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.callbacks;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.element;\n}\n/**\n * @template T\n * @param {?} obj\n * @return {?}\n */\nfunction isThenable(obj) {\n    return isFunction((/** @type {?} */ (obj)).then);\n}\n//# sourceMappingURL=downgrade_component.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as angular from './angular1';\nimport { $COMPILE, $CONTROLLER, $HTTP_BACKEND, $INJECTOR, $TEMPLATE_CACHE } from './constants';\nimport { controllerKey, directiveNormalize, isFunction } from './util';\n// Constants\nvar /** @type {?} */ REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n/**\n * @record\n */\nexport function IBindingDestination() { }\nfunction IBindingDestination_tsickle_Closure_declarations() {\n    /* TODO: handle strange member:\n    [key: string]: any;\n    */\n    /** @type {?|undefined} */\n    IBindingDestination.prototype.$onChanges;\n}\n/**\n * @record\n */\nexport function IControllerInstance() { }\nfunction IControllerInstance_tsickle_Closure_declarations() {\n    /** @type {?|undefined} */\n    IControllerInstance.prototype.$doCheck;\n    /** @type {?|undefined} */\n    IControllerInstance.prototype.$onDestroy;\n    /** @type {?|undefined} */\n    IControllerInstance.prototype.$onInit;\n    /** @type {?|undefined} */\n    IControllerInstance.prototype.$postLink;\n}\nvar UpgradeHelper = /** @class */ (function () {\n    function UpgradeHelper(injector, name, elementRef, directive) {\n        this.injector = injector;\n        this.name = name;\n        this.$injector = injector.get($INJECTOR);\n        this.$compile = this.$injector.get($COMPILE);\n        this.$controller = this.$injector.get($CONTROLLER);\n        this.element = elementRef.nativeElement;\n        this.$element = angular.element(this.element);\n        this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n    }\n    /**\n     * @param {?} $injector\n     * @param {?} name\n     * @return {?}\n     */\n    UpgradeHelper.getDirective = /**\n     * @param {?} $injector\n     * @param {?} name\n     * @return {?}\n     */\n    function ($injector, name) {\n        var /** @type {?} */ directives = $injector.get(name + 'Directive');\n        if (directives.length > 1) {\n            throw new Error(\"Only support single directive definition for: \" + name);\n        }\n        var /** @type {?} */ directive = directives[0];\n        // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n        // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n        if (directive.compile && !directive.link)\n            notSupported(name, 'compile');\n        if (directive.replace)\n            notSupported(name, 'replace');\n        if (directive.terminal)\n            notSupported(name, 'terminal');\n        return directive;\n    };\n    /**\n     * @param {?} $injector\n     * @param {?} directive\n     * @param {?=} fetchRemoteTemplate\n     * @return {?}\n     */\n    UpgradeHelper.getTemplate = /**\n     * @param {?} $injector\n     * @param {?} directive\n     * @param {?=} fetchRemoteTemplate\n     * @return {?}\n     */\n    function ($injector, directive, fetchRemoteTemplate) {\n        if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n        if (directive.template !== undefined) {\n            return getOrCall(directive.template);\n        }\n        else if (directive.templateUrl) {\n            var /** @type {?} */ $templateCache_1 = /** @type {?} */ ($injector.get($TEMPLATE_CACHE));\n            var /** @type {?} */ url_1 = getOrCall(directive.templateUrl);\n            var /** @type {?} */ template = $templateCache_1.get(url_1);\n            if (template !== undefined) {\n                return template;\n            }\n            else if (!fetchRemoteTemplate) {\n                throw new Error('loading directive templates asynchronously is not supported');\n            }\n            return new Promise(function (resolve, reject) {\n                var /** @type {?} */ $httpBackend = /** @type {?} */ ($injector.get($HTTP_BACKEND));\n                $httpBackend('GET', url_1, null, function (status, response) {\n                    if (status === 200) {\n                        resolve($templateCache_1.put(url_1, response));\n                    }\n                    else {\n                        reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                    }\n                });\n            });\n        }\n        else {\n            throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n        }\n    };\n    /**\n     * @param {?} controllerType\n     * @param {?} $scope\n     * @return {?}\n     */\n    UpgradeHelper.prototype.buildController = /**\n     * @param {?} controllerType\n     * @param {?} $scope\n     * @return {?}\n     */\n    function (controllerType, $scope) {\n        // TODO: Document that we do not pre-assign bindings on the controller instance.\n        // Quoted properties below so that this code can be optimized with Closure Compiler.\n        var /** @type {?} */ locals = { '$scope': $scope, '$element': this.$element };\n        var /** @type {?} */ controller = this.$controller(controllerType, locals, null, this.directive.controllerAs); /** @type {?} */\n        ((this.$element.data))(controllerKey(/** @type {?} */ ((this.directive.name))), controller);\n        return controller;\n    };\n    /**\n     * @param {?=} template\n     * @return {?}\n     */\n    UpgradeHelper.prototype.compileTemplate = /**\n     * @param {?=} template\n     * @return {?}\n     */\n    function (template) {\n        if (template === undefined) {\n            template = /** @type {?} */ (UpgradeHelper.getTemplate(this.$injector, this.directive));\n        }\n        return this.compileHtml(template);\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.prepareTransclusion = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ transclude = this.directive.transclude;\n        var /** @type {?} */ contentChildNodes = this.extractChildNodes();\n        var /** @type {?} */ attachChildrenFn = function (scope, cloneAttachFn) {\n            // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n            // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n            // there will be no transclusion scope here.\n            // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n            scope = scope || { $destroy: function () { return undefined; } };\n            return /** @type {?} */ ((cloneAttachFn))($template, scope);\n        };\n        var /** @type {?} */ $template = contentChildNodes;\n        if (transclude) {\n            var /** @type {?} */ slots_1 = Object.create(null);\n            if (typeof transclude === 'object') {\n                $template = [];\n                var /** @type {?} */ slotMap_1 = Object.create(null);\n                var /** @type {?} */ filledSlots_1 = Object.create(null);\n                // Parse the element selectors.\n                Object.keys(transclude).forEach(function (slotName) {\n                    var /** @type {?} */ selector = transclude[slotName];\n                    var /** @type {?} */ optional = selector.charAt(0) === '?';\n                    selector = optional ? selector.substring(1) : selector;\n                    slotMap_1[selector] = slotName;\n                    slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                    filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                });\n                // Add the matching elements into their slot.\n                contentChildNodes.forEach(function (node) {\n                    var /** @type {?} */ slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                    if (slotName) {\n                        filledSlots_1[slotName] = true;\n                        slots_1[slotName] = slots_1[slotName] || [];\n                        slots_1[slotName].push(node);\n                    }\n                    else {\n                        $template.push(node);\n                    }\n                });\n                // Check for required slots that were not filled.\n                Object.keys(filledSlots_1).forEach(function (slotName) {\n                    if (!filledSlots_1[slotName]) {\n                        throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                    }\n                });\n                Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                    var /** @type {?} */ nodes = slots_1[slotName];\n                    slots_1[slotName] = function (scope, cloneAttach) { return ((cloneAttach))(nodes, scope); };\n                });\n            }\n            // Attach `$$slots` to default slot transclude fn.\n            attachChildrenFn.$$slots = slots_1;\n            // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n            // removes all text content after the first interpolation and updates it later, after\n            // evaluating the expressions. This would result in AngularJS failing to recognize text\n            // nodes that start with an interpolation as transcluded content and use the fallback\n            // content instead.\n            // To avoid this issue, we add a\n            // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n            // to empty text nodes (which can only be a result of Angular removing their initial content).\n            // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n            //       will still fail to be detected by AngularJS v1.6+\n            $template.forEach(function (node) {\n                if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                    node.nodeValue = '\\u200C';\n                }\n            });\n        }\n        return attachChildrenFn;\n    };\n    /**\n     * @param {?} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.resolveAndBindRequiredControllers = /**\n     * @param {?} controllerInstance\n     * @return {?}\n     */\n    function (controllerInstance) {\n        var /** @type {?} */ directiveRequire = this.getDirectiveRequire();\n        var /** @type {?} */ requiredControllers = this.resolveRequire(directiveRequire);\n        if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n            var /** @type {?} */ requiredControllersMap_1 = /** @type {?} */ (requiredControllers);\n            Object.keys(requiredControllersMap_1).forEach(function (key) {\n                controllerInstance[key] = requiredControllersMap_1[key];\n            });\n        }\n        return requiredControllers;\n    };\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    UpgradeHelper.prototype.compileHtml = /**\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        this.element.innerHTML = html;\n        return this.$compile(this.element.childNodes);\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.extractChildNodes = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ childNodes = [];\n        var /** @type {?} */ childNode;\n        while (childNode = this.element.firstChild) {\n            this.element.removeChild(childNode);\n            childNodes.push(childNode);\n        }\n        return childNodes;\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.getDirectiveRequire = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ require = this.directive.require || /** @type {?} */ (((this.directive.controller && this.directive.name)));\n        if (isMap(require)) {\n            Object.keys(require).forEach(function (key) {\n                var /** @type {?} */ value = require[key];\n                var /** @type {?} */ match = /** @type {?} */ ((value.match(REQUIRE_PREFIX_RE)));\n                var /** @type {?} */ name = value.substring(match[0].length);\n                if (!name) {\n                    require[key] = match[0] + key;\n                }\n            });\n        }\n        return require;\n    };\n    /**\n     * @param {?} require\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.resolveRequire = /**\n     * @param {?} require\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    function (require, controllerInstance) {\n        var _this = this;\n        if (!require) {\n            return null;\n        }\n        else if (Array.isArray(require)) {\n            return require.map(function (req) { return _this.resolveRequire(req); });\n        }\n        else if (typeof require === 'object') {\n            var /** @type {?} */ value_1 = {};\n            Object.keys(require).forEach(function (key) { return value_1[key] = /** @type {?} */ ((_this.resolveRequire(require[key]))); });\n            return value_1;\n        }\n        else if (typeof require === 'string') {\n            var /** @type {?} */ match = /** @type {?} */ ((require.match(REQUIRE_PREFIX_RE)));\n            var /** @type {?} */ inheritType = match[1] || match[3];\n            var /** @type {?} */ name_1 = require.substring(match[0].length);\n            var /** @type {?} */ isOptional = !!match[2];\n            var /** @type {?} */ searchParents = !!inheritType;\n            var /** @type {?} */ startOnParent = inheritType === '^^';\n            var /** @type {?} */ ctrlKey = controllerKey(name_1);\n            var /** @type {?} */ elem = startOnParent ? /** @type {?} */ ((this.$element.parent))() : this.$element;\n            var /** @type {?} */ value = searchParents ? /** @type {?} */ ((elem.inheritedData))(ctrlKey) : /** @type {?} */ ((elem.data))(ctrlKey);\n            if (!value && !isOptional) {\n                throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n            }\n            return value;\n        }\n        else {\n            throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n        }\n    };\n    return UpgradeHelper;\n}());\nexport { UpgradeHelper };\nfunction UpgradeHelper_tsickle_Closure_declarations() {\n    /** @type {?} */\n    UpgradeHelper.prototype.$injector;\n    /** @type {?} */\n    UpgradeHelper.prototype.element;\n    /** @type {?} */\n    UpgradeHelper.prototype.$element;\n    /** @type {?} */\n    UpgradeHelper.prototype.directive;\n    /** @type {?} */\n    UpgradeHelper.prototype.$compile;\n    /** @type {?} */\n    UpgradeHelper.prototype.$controller;\n    /** @type {?} */\n    UpgradeHelper.prototype.injector;\n    /** @type {?} */\n    UpgradeHelper.prototype.name;\n}\n/**\n * @template T\n * @param {?} property\n * @return {?}\n */\nfunction getOrCall(property) {\n    return isFunction(property) ? property() : property;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isMap(value) {\n    return value && !Array.isArray(value) && typeof value === 'object';\n}\n/**\n * @param {?} name\n * @param {?} feature\n * @return {?}\n */\nfunction notSupported(name, feature) {\n    throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n}\n//# sourceMappingURL=upgrade_helper.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directive, ElementRef, EventEmitter, Inject, Injector } from '@angular/core';\nimport * as angular from '../common/angular1';\nimport { $SCOPE } from '../common/constants';\nimport { UpgradeHelper } from '../common/upgrade_helper';\nimport { isFunction, strictEquals } from '../common/util';\nvar /** @type {?} */ CAMEL_CASE = /([A-Z])/g;\nvar /** @type {?} */ INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar /** @type {?} */ NOT_SUPPORTED = 'NOT_SUPPORTED';\nvar UpgradeNg1ComponentAdapterBuilder = /** @class */ (function () {\n    function UpgradeNg1ComponentAdapterBuilder(name) {\n        this.name = name;\n        this.inputs = [];\n        this.inputsRename = [];\n        this.outputs = [];\n        this.outputsRename = [];\n        this.propertyOutputs = [];\n        this.checkProperties = [];\n        this.propertyMap = {};\n        this.directive = null;\n        var /** @type {?} */ selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });\n        var /** @type {?} */ self = this;\n        // Note: There is a bug in TS 2.4 that prevents us from\n        // inlining this into @Directive\n        // TODO(tbosch): find or file a bug against TypeScript for this.\n        var /** @type {?} */ directive = { selector: selector, inputs: this.inputsRename, outputs: this.outputsRename };\n        var MyClass = /** @class */ (function () {\n            function MyClass(scope, injector, elementRef) {\n                var /** @type {?} */ helper = new UpgradeHelper(injector, name, elementRef, this.directive);\n                return /** @type {?} */ (new UpgradeNg1ComponentAdapter(helper, scope, self.template, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap));\n            }\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnInit = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnChanges = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngDoCheck = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnDestroy = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            MyClass.decorators = [\n                { type: Directive, args: [directive,] },\n            ];\n            /** @nocollapse */\n            MyClass.ctorParameters = function () { return [\n                { type: undefined, decorators: [{ type: Inject, args: [$SCOPE,] },] },\n                { type: Injector, },\n                { type: ElementRef, },\n            ]; };\n            return MyClass;\n        }());\n        function MyClass_tsickle_Closure_declarations() {\n            /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n            MyClass.decorators;\n            /**\n             * @nocollapse\n             * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n             */\n            MyClass.ctorParameters;\n            /** @type {?} */\n            MyClass.prototype.directive;\n        }\n        this.type = MyClass;\n    }\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ btcIsObject = typeof /** @type {?} */ ((this.directive)).bindToController === 'object';\n        if (btcIsObject && Object.keys(/** @type {?} */ ((/** @type {?} */ ((this.directive)).scope))).length) {\n            throw new Error(\"Binding definitions on scope and controller at the same time are not supported.\");\n        }\n        var /** @type {?} */ context = (btcIsObject) ? /** @type {?} */ ((this.directive)).bindToController : /** @type {?} */ ((this.directive)).scope;\n        if (typeof context == 'object') {\n            Object.keys(context).forEach(function (propName) {\n                var /** @type {?} */ definition = context[propName];\n                var /** @type {?} */ bindingType = definition.charAt(0);\n                var /** @type {?} */ bindingOptions = definition.charAt(1);\n                var /** @type {?} */ attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n                // QUESTION: What about `=*`? Ignore? Throw? Support?\n                var /** @type {?} */ inputName = \"input_\" + attrName;\n                var /** @type {?} */ inputNameRename = inputName + \": \" + attrName;\n                var /** @type {?} */ outputName = \"output_\" + attrName;\n                var /** @type {?} */ outputNameRename = outputName + \": \" + attrName;\n                var /** @type {?} */ outputNameRenameChange = outputNameRename + \"Change\";\n                switch (bindingType) {\n                    case '@':\n                    case '<':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        break;\n                    case '=':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRenameChange);\n                        _this.propertyMap[outputName] = propName;\n                        _this.checkProperties.push(propName);\n                        _this.propertyOutputs.push(outputName);\n                        break;\n                    case '&':\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRename);\n                        _this.propertyMap[outputName] = propName;\n                        break;\n                    default:\n                        var /** @type {?} */ json = JSON.stringify(context);\n                        throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                }\n            });\n        }\n    };\n    /**\n     * Upgrade ng1 components into Angular.\n     */\n    /**\n     * Upgrade ng1 components into Angular.\n     * @param {?} exportedComponents\n     * @param {?} $injector\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapterBuilder.resolve = /**\n     * Upgrade ng1 components into Angular.\n     * @param {?} exportedComponents\n     * @param {?} $injector\n     * @return {?}\n     */\n    function (exportedComponents, $injector) {\n        var /** @type {?} */ promises = Object.keys(exportedComponents).map(function (name) {\n            var /** @type {?} */ exportedComponent = exportedComponents[name];\n            exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n            exportedComponent.extractBindings();\n            return Promise\n                .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n                .then(function (template) { return exportedComponent.template = template; });\n        });\n        return Promise.all(promises);\n    };\n    return UpgradeNg1ComponentAdapterBuilder;\n}());\nexport { UpgradeNg1ComponentAdapterBuilder };\nfunction UpgradeNg1ComponentAdapterBuilder_tsickle_Closure_declarations() {\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.type;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.inputs;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.inputsRename;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.outputs;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.outputsRename;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.propertyOutputs;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.checkProperties;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.propertyMap;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.directive;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.template;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapterBuilder.prototype.name;\n}\nvar UpgradeNg1ComponentAdapter = /** @class */ (function () {\n    function UpgradeNg1ComponentAdapter(helper, scope, template, inputs, outputs, propOuts, checkProperties, propertyMap) {\n        this.helper = helper;\n        this.template = template;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.propOuts = propOuts;\n        this.checkProperties = checkProperties;\n        this.propertyMap = propertyMap;\n        this.controllerInstance = null;\n        this.destinationObj = null;\n        this.checkLastValues = [];\n        this.$element = null;\n        this.directive = helper.directive;\n        this.element = helper.element;\n        this.$element = helper.$element;\n        this.componentScope = scope.$new(!!this.directive.scope);\n        var /** @type {?} */ controllerType = this.directive.controller;\n        if (this.directive.bindToController && controllerType) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n            this.destinationObj = this.controllerInstance;\n        }\n        else {\n            this.destinationObj = this.componentScope;\n        }\n        for (var /** @type {?} */ i = 0; i < inputs.length; i++) {\n            (/** @type {?} */ (this))[inputs[i]] = null;\n        }\n        for (var /** @type {?} */ j = 0; j < outputs.length; j++) {\n            var /** @type {?} */ emitter = (/** @type {?} */ (this))[outputs[j]] = new EventEmitter();\n            if (this.propOuts.indexOf(outputs[j]) === -1) {\n                this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.emit(value); }; })(emitter));\n            }\n        }\n        for (var /** @type {?} */ k = 0; k < propOuts.length; k++) {\n            this.checkLastValues.push(INITIAL_VALUE);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        // Collect contents, insert and compile template\n        var /** @type {?} */ attachChildNodes = this.helper.prepareTransclusion();\n        var /** @type {?} */ linkFn = this.helper.compileTemplate(this.template);\n        // Instantiate controller (if not already done so)\n        var /** @type {?} */ controllerType = this.directive.controller;\n        var /** @type {?} */ bindToController = this.directive.bindToController;\n        if (controllerType && !bindToController) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n        }\n        // Require other controllers\n        var /** @type {?} */ requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n        // Hook: $onInit\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n            this.controllerInstance.$onInit();\n        }\n        // Linking\n        var /** @type {?} */ link = this.directive.link;\n        var /** @type {?} */ preLink = (typeof link == 'object') && (/** @type {?} */ (link)).pre;\n        var /** @type {?} */ postLink = (typeof link == 'object') ? (/** @type {?} */ (link)).post : link;\n        var /** @type {?} */ attrs = NOT_SUPPORTED;\n        var /** @type {?} */ transcludeFn = NOT_SUPPORTED;\n        if (preLink) {\n            preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        linkFn(this.componentScope, /** @type {?} */ ((null)), { parentBoundTranscludeFn: attachChildNodes });\n        if (postLink) {\n            postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        // Hook: $postLink\n        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n            this.controllerInstance.$postLink();\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        var _this = this;\n        var /** @type {?} */ ng1Changes = {};\n        Object.keys(changes).forEach(function (name) {\n            var /** @type {?} */ change = changes[name];\n            _this.setComponentProperty(name, change.currentValue);\n            ng1Changes[_this.propertyMap[name]] = change;\n        });\n        if (isFunction(/** @type {?} */ ((this.destinationObj)).$onChanges)) {\n            /** @type {?} */ ((/** @type {?} */ ((this.destinationObj)).$onChanges))(ng1Changes);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ destinationObj = this.destinationObj;\n        var /** @type {?} */ lastValues = this.checkLastValues;\n        var /** @type {?} */ checkProperties = this.checkProperties;\n        var /** @type {?} */ propOuts = this.propOuts;\n        checkProperties.forEach(function (propName, i) {\n            var /** @type {?} */ value = /** @type {?} */ ((destinationObj))[propName];\n            var /** @type {?} */ last = lastValues[i];\n            if (!strictEquals(last, value)) {\n                var /** @type {?} */ eventEmitter = (/** @type {?} */ (_this))[propOuts[i]];\n                eventEmitter.emit(lastValues[i] = value);\n            }\n        });\n        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n            this.controllerInstance.$doCheck();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n            this.controllerInstance.$onDestroy();\n        }\n        this.componentScope.$destroy();\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.setComponentProperty = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        /** @type {?} */ ((this.destinationObj))[this.propertyMap[name]] = value;\n    };\n    return UpgradeNg1ComponentAdapter;\n}());\nfunction UpgradeNg1ComponentAdapter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.controllerInstance;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.destinationObj;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.checkLastValues;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.directive;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.element;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.$element;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.componentScope;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.helper;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.template;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.inputs;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.outputs;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.propOuts;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.checkProperties;\n    /** @type {?} */\n    UpgradeNg1ComponentAdapter.prototype.propertyMap;\n}\n//# sourceMappingURL=upgrade_ng1_adapter.js.map","/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Compiler, Injector, NgModule, NgZone, Testability } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport * as angular from '../common/angular1';\nimport { $$TESTABILITY, $COMPILE, $INJECTOR, $ROOT_SCOPE, COMPILER_KEY, INJECTOR_KEY, LAZY_MODULE_REF, NG_ZONE_KEY } from '../common/constants';\nimport { downgradeComponent } from '../common/downgrade_component';\nimport { downgradeInjectable } from '../common/downgrade_injectable';\nimport { Deferred, controllerKey, onError } from '../common/util';\nimport { UpgradeNg1ComponentAdapterBuilder } from './upgrade_ng1_adapter';\nvar /** @type {?} */ upgradeCount = 0;\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * ## Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * \\@Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * \\@NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nvar /**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * ## Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * \\@Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * \\@NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nUpgradeAdapter = /** @class */ (function () {\n    function UpgradeAdapter(ng2AppModule, compilerOptions) {\n        this.ng2AppModule = ng2AppModule;\n        this.compilerOptions = compilerOptions;\n        this.idPrefix = \"NG2_UPGRADE_\" + upgradeCount++ + \"_\";\n        this.downgradedComponents = [];\n        /**\n         * An internal map of ng1 components which need to up upgraded to ng2.\n         *\n         * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n         * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n         *\n         * \\@internal\n         */\n        this.ng1ComponentsToBeUpgraded = {};\n        this.upgradedProviders = [];\n        this.moduleRef = null;\n        if (!ng2AppModule) {\n            throw new Error('UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n        }\n    }\n    /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from @angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * @Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     *   @Input() salutation: string;\n     *   @Input() name: string;\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     */\n    /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from \\@angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * \\@Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     *   \\@Input() salutation: string;\n     *   \\@Input() name: string;\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} component\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.downgradeNg2Component = /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from \\@angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * \\@Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     *   \\@Input() salutation: string;\n     *   \\@Input() name: string;\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        this.downgradedComponents.push(component);\n        return downgradeComponent({ component: component });\n    };\n    /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * @Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     */\n    /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} name\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.upgradeNg1Component = /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if ((/** @type {?} */ (this.ng1ComponentsToBeUpgraded)).hasOwnProperty(name)) {\n            return this.ng1ComponentsToBeUpgraded[name].type;\n        }\n        else {\n            return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n                .type;\n        }\n    };\n    /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param modules any AngularJS modules that the upgrade module should depend upon\n     * @returns an {@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param {?=} modules any AngularJS modules that the upgrade module should depend upon\n     * @return {?} an {\\@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    UpgradeAdapter.prototype.registerForNg1Tests = /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param {?=} modules any AngularJS modules that the upgrade module should depend upon\n     * @return {?} an {\\@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    function (modules) {\n        var _this = this;\n        var /** @type {?} */ windowNgMock = (/** @type {?} */ (window))['angular'].mock;\n        if (!windowNgMock || !windowNgMock.module) {\n            throw new Error('Failed to find \\'angular.mock.module\\'.');\n        }\n        this.declareNg1Module(modules);\n        windowNgMock.module(this.ng1Module.name);\n        var /** @type {?} */ upgrade = new UpgradeAdapterRef();\n        this.ng2BootstrapDeferred.promise.then(function (ng1Injector) { (/** @type {?} */ (upgrade))._bootstrapDone(_this.moduleRef, ng1Injector); }, onError);\n        return upgrade;\n    };\n    /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * @Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     */\n    /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     * @param {?} element\n     * @param {?=} modules\n     * @param {?=} config\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.bootstrap = /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     * @param {?} element\n     * @param {?=} modules\n     * @param {?=} config\n     * @return {?}\n     */\n    function (element, modules, config) {\n        var _this = this;\n        this.declareNg1Module(modules);\n        var /** @type {?} */ upgrade = new UpgradeAdapterRef();\n        // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n        var /** @type {?} */ windowAngular = (/** @type {?} */ (window /** TODO #???? */) /** TODO #???? */)['angular'];\n        windowAngular.resumeBootstrap = undefined;\n        this.ngZone.run(function () { angular.bootstrap(element, [_this.ng1Module.name], /** @type {?} */ ((config))); });\n        var /** @type {?} */ ng1BootstrapPromise = new Promise(function (resolve) {\n            if (windowAngular.resumeBootstrap) {\n                var /** @type {?} */ originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                windowAngular.resumeBootstrap = function () {\n                    windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                    windowAngular.resumeBootstrap.apply(this, arguments);\n                    resolve();\n                };\n            }\n            else {\n                resolve();\n            }\n        });\n        Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(function (_a) {\n            var ng1Injector = _a[0];\n            /** @type {?} */ ((angular.element(element).data))(controllerKey(INJECTOR_KEY), /** @type {?} */ ((_this.moduleRef)).injector); /** @type {?} */\n            ((_this.moduleRef)).injector.get(NgZone).run(function () { (/** @type {?} */ (upgrade))._bootstrapDone(_this.moduleRef, ng1Injector); });\n        }, onError);\n        return upgrade;\n    };\n    /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * @Injectable()\n     * class Example {\n     *   constructor(@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     */\n    /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * \\@Injectable()\n     * class Example {\n     *   constructor(\\@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     * @param {?} name\n     * @param {?=} options\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.upgradeNg1Provider = /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * \\@Injectable()\n     * class Example {\n     *   constructor(\\@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     * @param {?} name\n     * @param {?=} options\n     * @return {?}\n     */\n    function (name, options) {\n        var /** @type {?} */ token = options && options.asToken || name;\n        this.upgradedProviders.push({\n            provide: token,\n            useFactory: function ($injector) { return $injector.get(name); },\n            deps: [$INJECTOR]\n        });\n    };\n    /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     */\n    /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     * @param {?} token\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.downgradeNg2Provider = /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) { return downgradeInjectable(token); };\n    /**\n     * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n     * hybrid application.\n     *\n     * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n     *\n     * @param {?=} modules The AngularJS modules that this upgrade module should depend upon.\n     * @return {?} The AngularJS upgrade module that is declared by this method\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     * upgradeAdapter.declareNg1Module(['heroApp']);\n     * ```\n     */\n    UpgradeAdapter.prototype.declareNg1Module = /**\n     * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n     * hybrid application.\n     *\n     * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n     *\n     * @param {?=} modules The AngularJS modules that this upgrade module should depend upon.\n     * @return {?} The AngularJS upgrade module that is declared by this method\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     * upgradeAdapter.declareNg1Module(['heroApp']);\n     * ```\n     */\n    function (modules) {\n        var _this = this;\n        if (modules === void 0) { modules = []; }\n        var /** @type {?} */ delayApplyExps = [];\n        var /** @type {?} */ original$applyFn;\n        var /** @type {?} */ rootScopePrototype;\n        var /** @type {?} */ rootScope;\n        var /** @type {?} */ upgradeAdapter = this;\n        var /** @type {?} */ ng1Module = this.ng1Module = angular.module(this.idPrefix, modules);\n        var /** @type {?} */ platformRef = platformBrowserDynamic();\n        this.ngZone = new NgZone({ enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec') });\n        this.ng2BootstrapDeferred = new Deferred();\n        ng1Module.factory(INJECTOR_KEY, function () { return ((_this.moduleRef)).injector.get(Injector); })\n            .factory(LAZY_MODULE_REF, [\n            INJECTOR_KEY,\n            function (injector) { return (/** @type {?} */ ({ injector: injector, needsNgZone: false })); }\n        ])\n            .constant(NG_ZONE_KEY, this.ngZone)\n            .factory(COMPILER_KEY, function () { return ((_this.moduleRef)).injector.get(Compiler); })\n            .config([\n            '$provide', '$injector',\n            function (provide, ng1Injector) {\n                provide.decorator($ROOT_SCOPE, [\n                    '$delegate',\n                    function (rootScopeDelegate) {\n                        // Capture the root apply so that we can delay first call to $apply until we\n                        // bootstrap Angular and then we replay and restore the $apply.\n                        rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                        if (rootScopePrototype.hasOwnProperty('$apply')) {\n                            original$applyFn = rootScopePrototype.$apply;\n                            rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };\n                        }\n                        else {\n                            throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                        }\n                        return rootScope = rootScopeDelegate;\n                    }\n                ]);\n                if (ng1Injector.has($$TESTABILITY)) {\n                    provide.decorator($$TESTABILITY, [\n                        '$delegate',\n                        function (testabilityDelegate) {\n                            var /** @type {?} */ originalWhenStable = testabilityDelegate.whenStable;\n                            // Cannot use arrow function below because we need the context\n                            var /** @type {?} */ newWhenStable = function (callback) {\n                                originalWhenStable.call(this, function () {\n                                    var /** @type {?} */ ng2Testability = /** @type {?} */ ((upgradeAdapter.moduleRef)).injector.get(Testability);\n                                    if (ng2Testability.isStable()) {\n                                        callback.apply(this, arguments);\n                                    }\n                                    else {\n                                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                                    }\n                                });\n                            };\n                            testabilityDelegate.whenStable = newWhenStable;\n                            return testabilityDelegate;\n                        }\n                    ]);\n                }\n            }\n        ]);\n        ng1Module.run([\n            '$injector', '$rootScope',\n            function (ng1Injector, rootScope) {\n                UpgradeNg1ComponentAdapterBuilder.resolve(_this.ng1ComponentsToBeUpgraded, ng1Injector)\n                    .then(function () {\n                    // Note: There is a bug in TS 2.4 that prevents us from\n                    // inlining this into @NgModule\n                    // TODO(tbosch): find or file a bug against TypeScript for this.\n                    var /** @type {?} */ ngModule = {\n                        providers: [\n                            { provide: $INJECTOR, useFactory: function () { return ng1Injector; } },\n                            { provide: $COMPILE, useFactory: function () { return ng1Injector.get($COMPILE); } },\n                            _this.upgradedProviders\n                        ],\n                        imports: [_this.ng2AppModule],\n                        entryComponents: _this.downgradedComponents\n                    };\n                    var DynamicNgUpgradeModule = /** @class */ (function () {\n                        function DynamicNgUpgradeModule() {\n                        }\n                        /**\n                         * @return {?}\n                         */\n                        DynamicNgUpgradeModule.prototype.ngDoBootstrap = /**\n                         * @return {?}\n                         */\n                        function () { };\n                        DynamicNgUpgradeModule.decorators = [\n                            { type: NgModule, args: [ngModule,] },\n                        ];\n                        /** @nocollapse */\n                        DynamicNgUpgradeModule.ctorParameters = function () { return []; };\n                        return DynamicNgUpgradeModule;\n                    }());\n                    function DynamicNgUpgradeModule_tsickle_Closure_declarations() {\n                        /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */\n                        DynamicNgUpgradeModule.decorators;\n                        /**\n                         * @nocollapse\n                         * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}\n                         */\n                        DynamicNgUpgradeModule.ctorParameters;\n                    }\n                    platformRef\n                        .bootstrapModule(DynamicNgUpgradeModule, [/** @type {?} */ ((_this.compilerOptions)), { ngZone: _this.ngZone }])\n                        .then(function (ref) {\n                        _this.moduleRef = ref;\n                        _this.ngZone.run(function () {\n                            if (rootScopePrototype) {\n                                rootScopePrototype.$apply = original$applyFn; // restore original $apply\n                                while (delayApplyExps.length) {\n                                    rootScope.$apply(delayApplyExps.shift());\n                                }\n                                rootScopePrototype = null;\n                            }\n                        });\n                    })\n                        .then(function () { return _this.ng2BootstrapDeferred.resolve(ng1Injector); }, onError)\n                        .then(function () {\n                        var /** @type {?} */ subscription = _this.ngZone.onMicrotaskEmpty.subscribe({ next: function () { return rootScope.$digest(); } });\n                        rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                    });\n                })\n                    .catch(function (e) { return _this.ng2BootstrapDeferred.reject(e); });\n            }\n        ]);\n        return ng1Module;\n    };\n    return UpgradeAdapter;\n}());\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * ## Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * \\@Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * \\@NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nexport { UpgradeAdapter };\nfunction UpgradeAdapter_tsickle_Closure_declarations() {\n    /** @type {?} */\n    UpgradeAdapter.prototype.idPrefix;\n    /** @type {?} */\n    UpgradeAdapter.prototype.downgradedComponents;\n    /**\n     * An internal map of ng1 components which need to up upgraded to ng2.\n     *\n     * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n     * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n     *\n     * \\@internal\n     * @type {?}\n     */\n    UpgradeAdapter.prototype.ng1ComponentsToBeUpgraded;\n    /** @type {?} */\n    UpgradeAdapter.prototype.upgradedProviders;\n    /** @type {?} */\n    UpgradeAdapter.prototype.ngZone;\n    /** @type {?} */\n    UpgradeAdapter.prototype.ng1Module;\n    /** @type {?} */\n    UpgradeAdapter.prototype.moduleRef;\n    /** @type {?} */\n    UpgradeAdapter.prototype.ng2BootstrapDeferred;\n    /** @type {?} */\n    UpgradeAdapter.prototype.ng2AppModule;\n    /** @type {?} */\n    UpgradeAdapter.prototype.compilerOptions;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's $compile.\n */\nvar /**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's $compile.\n */\nParentInjectorPromise = /** @class */ (function () {\n    function ParentInjectorPromise(element) {\n        this.element = element;\n        this.callbacks = [];\n        /** @type {?} */ ((\n        // store the promise on the element\n        element.data))(controllerKey(INJECTOR_KEY), this);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.then = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (this.injector) {\n            callback(this.injector);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    /**\n     * @param {?} injector\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.resolve = /**\n     * @param {?} injector\n     * @return {?}\n     */\n    function (injector) {\n        this.injector = injector; /** @type {?} */\n        ((\n        // reset the element data to point to the real injector\n        this.element.data))(controllerKey(INJECTOR_KEY), injector);\n        // clean out the element to prevent memory leaks\n        this.element = /** @type {?} */ ((null));\n        // run all the queued callbacks\n        this.callbacks.forEach(function (callback) { return callback(injector); });\n        this.callbacks.length = 0;\n    };\n    return ParentInjectorPromise;\n}());\nfunction ParentInjectorPromise_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ParentInjectorPromise.prototype.injector;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.callbacks;\n    /** @type {?} */\n    ParentInjectorPromise.prototype.element;\n}\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nvar /**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nUpgradeAdapterRef = /** @class */ (function () {\n    function UpgradeAdapterRef() {\n        this._readyFn = null;\n        this.ng1RootScope = /** @type {?} */ ((null));\n        this.ng1Injector = /** @type {?} */ ((null));\n        this.ng2ModuleRef = /** @type {?} */ ((null));\n        this.ng2Injector = /** @type {?} */ ((null));\n    }\n    /**\n     * @param {?} ngModuleRef\n     * @param {?} ng1Injector\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype._bootstrapDone = /**\n     * @param {?} ngModuleRef\n     * @param {?} ng1Injector\n     * @return {?}\n     */\n    function (ngModuleRef, ng1Injector) {\n        this.ng2ModuleRef = ngModuleRef;\n        this.ng2Injector = ngModuleRef.injector;\n        this.ng1Injector = ng1Injector;\n        this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n        this._readyFn && this._readyFn(this);\n    };\n    /**\n     * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n     * application has been bootstrapped.\n     *\n     * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n     * require a call to `$apply()`.\n     * @param {?} fn\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype.ready = /**\n     * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n     * application has been bootstrapped.\n     *\n     * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n     * require a call to `$apply()`.\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._readyFn = fn; };\n    /**\n     * Dispose of running hybrid AngularJS / Angular application.\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype.dispose = /**\n     * Dispose of running hybrid AngularJS / Angular application.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */ ((this.ng1Injector)).get($ROOT_SCOPE).$destroy(); /** @type {?} */\n        ((this.ng2ModuleRef)).destroy();\n    };\n    return UpgradeAdapterRef;\n}());\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nexport { UpgradeAdapterRef };\nfunction UpgradeAdapterRef_tsickle_Closure_declarations() {\n    /** @type {?} */\n    UpgradeAdapterRef.prototype._readyFn;\n    /** @type {?} */\n    UpgradeAdapterRef.prototype.ng1RootScope;\n    /** @type {?} */\n    UpgradeAdapterRef.prototype.ng1Injector;\n    /** @type {?} */\n    UpgradeAdapterRef.prototype.ng2ModuleRef;\n    /** @type {?} */\n    UpgradeAdapterRef.prototype.ng2Injector;\n}\n//# sourceMappingURL=upgrade_adapter.js.map"]}
{"version":3,"sources":["packages/upgrade/upgrade.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","upgrade","core","platformBrowserDynamic","this","VERSION","Version","noNg","Error","angular","bootstrap","element","version","undefined","resumeBootstrap","getTestability","window","hasOwnProperty","e","$COMPILE","$CONTROLLER","$INJECTOR","$SCOPE","INJECTOR_KEY","REQUIRE_INJECTOR","PropertyBinding","prop","attr","parseBinding","prototype","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","bindAttr","bindonAttr","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","onError","console","error","stack","log","controllerKey","name","getComponentName","component","overriddenName","toString","split","isFunction","value","Deferred","_this","promise","Promise","res","rej","resolve","reject","strictEquals","val1","val2","_matches","INITIAL_VALUE","__UNINITIALIZED__","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$injector","$compile","$parse","componentFactory","wrapCallback","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compileContents","compiledProjectableNodes","linkFns","groupProjectableNodes","map","nodes","empty","forEach","linkFn","clone","push","append","createComponent","projectableNodes","childInjector","Injector","create","providers","provide","useValue","parent","componentRef","viewChangeDetector","injector","get","ChangeDetectorRef","changeDetector","changeDetectorRef","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","hookupNgModel","supportsNgModel","writeValue","registerOnChange","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","setupInputs","needsNgZone","propagateDigest","inputs","_loop_1","i","prevValue","input","propName","templateName","expr","observeFn_1","currValue","updateInput","$observe","unwatch_1","this_1","$watch","watchFn","length","detectChanges","componentType","ngOnChanges","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","setupOutputs","outputs","j","output","substring","subscribeToOutput","isAssignment","getter","setter","assign","emitter","subscribe","next","v","$event","registerCleanup","destroyComponentRef","destroy","destroyed","on","$destroy","$on","unregisterApplication","getInjector","SimpleChange","groupNodesBySelector","ngContentSelectors","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","contents","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","call","ParentInjectorPromise$1","ParentInjectorPromise","injectorKey","callbacks","data","then","callback","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","link","notSupported","replace","terminal","getTemplate","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","$httpBackend","status","response","put","buildController","controllerType","$scope","controller","controllerAs","compileTemplate","compileHtml","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","attachChildrenFn","cloneAttachFn","$template","slots_1","Object","slotMap_1","filledSlots_1","keys","slotName","optional","directiveNormalize","_","letter","nodeName","toLowerCase","filter","cloneAttach","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","controllerInstance","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","isMap","requiredControllersMap_1","key","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","Array","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","inheritedData","property","feature","CAMEL_CASE","INITIAL_VALUE$1","UpgradeNg1ComponentAdapterBuilder","inputsRename","outputsRename","propertyOutputs","checkProperties","propertyMap","self","all","MyClass","helper","UpgradeNg1ComponentAdapter","ngOnInit","ngDoCheck","ngOnDestroy","decorators","type","Directive","args","ctorParameters","Inject","ElementRef","extractBindings","btcIsObject","context","definition","bindingType","bindingOptions","attrName","inputName","inputNameRename","outputName","outputNameRename","outputNameRenameChange","json","JSON","stringify","exportedComponents","promises","exportedComponent","propOuts","destinationObj","checkLastValues","EventEmitter","indexOf","setComponentProperty","emit","k","attachChildNodes","$onInit","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ng1Changes","change","currentValue","$onChanges","lastValues","$doCheck","$onDestroy","upgradeCount","UpgradeAdapter","ng2AppModule","compilerOptions","idPrefix","downgradedComponents","ng1ComponentsToBeUpgraded","upgradedProviders","moduleRef","downgradeNg2Component","downgradeComponent","info","directiveFactory","ngZone","cb","restrict","required","ranAsync","lazyModuleRef","doDowngrade","ComponentFactoryResolver","resolveComponentFactory","injectorPromise","facade","$evalAsync","downgradeFn","NgZone","isInAngularZone","run","isThenable","obj","upgradeNg1Component","registerForNg1Tests","modules","windowNgMock","mock","declareNg1Module","ng1Module","UpgradeAdapterRef","ng2BootstrapDeferred","ng1Injector","_bootstrapDone","element$$1","config","windowAngular","ng1BootstrapPromise","originalResumeBootstrap_1","r","apply","arguments","_a","__read","o","n","m","Symbol","iterator","ar","done","upgradeNg1Provider","options","asToken","useFactory","deps","downgradeNg2Provider","token","downgradeInjectable","original$applyFn","rootScopePrototype","delayApplyExps","upgradeAdapter","platformRef","enableLongStackTrace","Zone","constant","Compiler","decorator","rootScopeDelegate","constructor","$apply","exp","has","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","rootScope","ngModule","imports","entryComponents","DynamicNgUpgradeModule","ngDoBootstrap","NgModule","bootstrapModule","ref","shift","subscription","onMicrotaskEmpty","$digest","unsubscribe","catch","_readyFn","ng1RootScope","ng2ModuleRef","ng2Injector","ngModuleRef","ready","fn","dispose","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.0.4\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser-dynamic')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/upgrade', ['exports', '@angular/core', '@angular/platform-browser-dynamic'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.upgrade = {}),global.ng.core,global.ng.platformBrowserDynamic));\n}(this, (function (exports,core,platformBrowserDynamic) { 'use strict';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\nvar VERSION = new core.Version('6.0.4');\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction noNg() {\n    throw new Error('AngularJS v1.x is not loaded!');\n}\nvar angular = {\n    bootstrap: noNg,\n    module: noNg,\n    element: noNg,\n    version: undefined,\n    resumeBootstrap: noNg,\n    getTestability: noNg\n};\ntry {\n    if (window.hasOwnProperty('angular')) {\n        angular = window.angular;\n    }\n}\ncatch (e) {\n    // ignore in CJS mode.\n}\n/**\n * @deprecated Use `setAngularJSGlobal` instead.\n */\n\n/**\n * @deprecated Use `getAngularJSGlobal` instead.\n */\n\n/**\n * Resets the AngularJS global.\n *\n * Used when AngularJS is loaded lazily, and not available on `window`.\n *\n *\n */\n\n/**\n * Returns the current AngularJS global.\n *\n *\n */\n\nvar bootstrap = function (e, modules, config) {\n    return angular.bootstrap(e, modules, config);\n};\nvar module$1 = function (prefix, dependencies) {\n    return angular.module(prefix, dependencies);\n};\nvar element = function (e) { return angular.element(e); };\n\n\nvar version = angular.version;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar $COMPILE = '$compile';\nvar $CONTROLLER = '$controller';\n\nvar $HTTP_BACKEND = '$httpBackend';\nvar $INJECTOR = '$injector';\n\nvar $PARSE = '$parse';\n\nvar $ROOT_SCOPE = '$rootScope';\nvar $SCOPE = '$scope';\nvar $TEMPLATE_CACHE = '$templateCache';\n\nvar $$TESTABILITY = '$$testability';\nvar COMPILER_KEY = '$$angularCompiler';\n\nvar INJECTOR_KEY = '$$angularInjector';\nvar LAZY_MODULE_REF = '$$angularLazyModuleRef';\nvar NG_ZONE_KEY = '$$angularNgZone';\nvar REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nvar REQUIRE_NG_MODEL = '?ngModel';\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nvar PropertyBinding = /** @class */ (function () {\n    function PropertyBinding(prop, attr) {\n        this.prop = prop;\n        this.attr = attr;\n        this.parseBinding();\n    }\n    PropertyBinding.prototype.parseBinding = function () {\n        this.bracketAttr = \"[\" + this.attr + \"]\";\n        this.parenAttr = \"(\" + this.attr + \")\";\n        this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n        var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n        this.onAttr = \"on\" + capitalAttr;\n        this.bindAttr = \"bind\" + capitalAttr;\n        this.bindonAttr = \"bindon\" + capitalAttr;\n    };\n    return PropertyBinding;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\nvar DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\nfunction onError(e) {\n    // TODO: (misko): We seem to not have a stack trace here!\n    if (console.error) {\n        console.error(e, e.stack);\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.log(e, e.stack);\n    }\n    throw e;\n}\nfunction controllerKey(name) {\n    return '$' + name + 'Controller';\n}\nfunction directiveNormalize(name) {\n    return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n        .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n}\n\nfunction getComponentName(component) {\n    // Return the name of the component or the first line of its stringified version.\n    return component.overriddenName || component.name || component.toString().split('\\n')[0];\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    return Deferred;\n}());\n/**\n * @return Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component) {\n    return typeof component.writeValue === 'function' &&\n        typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n */\nfunction hookupNgModel(ngModel, component) {\n    if (ngModel && supportsNgModel(component)) {\n        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n        if (typeof component.registerOnTouched === 'function') {\n            component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n        }\n    }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n */\nfunction strictEquals(val1, val2) {\n    return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar DowngradeComponentAdapter = /** @class */ (function () {\n    function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n        this.element = element;\n        this.attrs = attrs;\n        this.scope = scope;\n        this.ngModel = ngModel;\n        this.parentInjector = parentInjector;\n        this.$injector = $injector;\n        this.$compile = $compile;\n        this.$parse = $parse;\n        this.componentFactory = componentFactory;\n        this.wrapCallback = wrapCallback;\n        this.implementsOnChanges = false;\n        this.inputChangeCount = 0;\n        this.inputChanges = {};\n        this.componentScope = scope.$new();\n    }\n    DowngradeComponentAdapter.prototype.compileContents = function () {\n        var _this = this;\n        var compiledProjectableNodes = [];\n        var projectableNodes = this.groupProjectableNodes();\n        var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n        this.element.empty();\n        linkFns.forEach(function (linkFn) {\n            linkFn(_this.scope, function (clone) {\n                compiledProjectableNodes.push(clone);\n                _this.element.append(clone);\n            });\n        });\n        return compiledProjectableNodes;\n    };\n    DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n        var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n        var childInjector = core.Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n        this.componentRef =\n            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n        this.viewChangeDetector = this.componentRef.injector.get(core.ChangeDetectorRef);\n        this.changeDetector = this.componentRef.changeDetectorRef;\n        this.component = this.componentRef.instance;\n        // testability hook is commonly added during component bootstrap in\n        // packages/core/src/application_ref.bootstrap()\n        // in downgraded application, component creation will take place here as well as adding the\n        // testability hook.\n        var testability = this.componentRef.injector.get(core.Testability, null);\n        if (testability) {\n            this.componentRef.injector.get(core.TestabilityRegistry)\n                .registerApplication(this.componentRef.location.nativeElement, testability);\n        }\n        hookupNgModel(this.ngModel, this.component);\n    };\n    DowngradeComponentAdapter.prototype.setupInputs = function (needsNgZone, propagateDigest) {\n        var _this = this;\n        if (propagateDigest === void 0) { propagateDigest = true; }\n        var attrs = this.attrs;\n        var inputs = this.componentFactory.inputs || [];\n        var _loop_1 = function (i) {\n            var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n            var expr = null;\n            if (attrs.hasOwnProperty(input.attr)) {\n                var observeFn_1 = (function (prop) {\n                    var prevValue = INITIAL_VALUE;\n                    return function (currValue) {\n                        // Initially, both `$observe()` and `$watch()` will call this function.\n                        if (!strictEquals(prevValue, currValue)) {\n                            if (prevValue === INITIAL_VALUE) {\n                                prevValue = currValue;\n                            }\n                            _this.updateInput(prop, prevValue, currValue);\n                            prevValue = currValue;\n                        }\n                    };\n                })(input.prop);\n                attrs.$observe(input.attr, observeFn_1);\n                // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                var unwatch_1 = this_1.componentScope.$watch(function () {\n                    unwatch_1();\n                    unwatch_1 = null;\n                    observeFn_1(attrs[input.attr]);\n                });\n            }\n            else if (attrs.hasOwnProperty(input.bindAttr)) {\n                expr = attrs[input.bindAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                expr = attrs[input.bracketAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                expr = attrs[input.bindonAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                expr = attrs[input.bracketParenAttr];\n            }\n            if (expr != null) {\n                var watchFn = (function (prop) { return function (currValue, prevValue) {\n                    return _this.updateInput(prop, prevValue, currValue);\n                }; })(input.prop);\n                this_1.componentScope.$watch(expr, watchFn);\n            }\n        };\n        var this_1 = this;\n        for (var i = 0; i < inputs.length; i++) {\n            _loop_1(i);\n        }\n        // Invoke `ngOnChanges()` and Change Detection (when necessary)\n        var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n        var prototype = this.componentFactory.componentType.prototype;\n        this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n        this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n            // Invoke `ngOnChanges()`\n            if (_this.implementsOnChanges) {\n                var inputChanges = _this.inputChanges;\n                _this.inputChanges = {};\n                _this.component.ngOnChanges(inputChanges);\n            }\n            _this.viewChangeDetector.markForCheck();\n            // If opted out of propagating digests, invoke change detection when inputs change.\n            if (!propagateDigest) {\n                detectChanges();\n            }\n        }));\n        // If not opted out of propagating digests, invoke change detection on every digest\n        if (propagateDigest) {\n            this.componentScope.$watch(this.wrapCallback(detectChanges));\n        }\n        // If necessary, attach the view so that it will be dirty-checked.\n        // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n        if (needsNgZone || !propagateDigest) {\n            var unwatch_2 = this.componentScope.$watch(function () {\n                unwatch_2();\n                unwatch_2 = null;\n                var appRef = _this.parentInjector.get(core.ApplicationRef);\n                appRef.attachView(_this.componentRef.hostView);\n            });\n        }\n    };\n    DowngradeComponentAdapter.prototype.setupOutputs = function () {\n        var attrs = this.attrs;\n        var outputs = this.componentFactory.outputs || [];\n        for (var j = 0; j < outputs.length; j++) {\n            var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n            var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n            var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n            // order below is important - first update bindings then evaluate expressions\n            if (attrs.hasOwnProperty(bindonAttr)) {\n                this.subscribeToOutput(output, attrs[bindonAttr], true);\n            }\n            if (attrs.hasOwnProperty(bracketParenAttr)) {\n                this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n            }\n            if (attrs.hasOwnProperty(output.onAttr)) {\n                this.subscribeToOutput(output, attrs[output.onAttr]);\n            }\n            if (attrs.hasOwnProperty(output.parenAttr)) {\n                this.subscribeToOutput(output, attrs[output.parenAttr]);\n            }\n        }\n    };\n    DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {\n        var _this = this;\n        if (isAssignment === void 0) { isAssignment = false; }\n        var getter = this.$parse(expr);\n        var setter = getter.assign;\n        if (isAssignment && !setter) {\n            throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n        }\n        var emitter = this.component[output.prop];\n        if (emitter) {\n            emitter.subscribe({\n                next: isAssignment ? function (v) { return setter(_this.scope, v); } :\n                    function (v) { return getter(_this.scope, { '$event': v }); }\n            });\n        }\n        else {\n            throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this.componentFactory.componentType) + \"'!\");\n        }\n    };\n    DowngradeComponentAdapter.prototype.registerCleanup = function () {\n        var _this = this;\n        var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n        var destroyed = false;\n        this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });\n        this.componentScope.$on('$destroy', function () {\n            if (!destroyed) {\n                destroyed = true;\n                _this.componentRef.injector.get(core.TestabilityRegistry)\n                    .unregisterApplication(_this.componentRef.location.nativeElement);\n                destroyComponentRef();\n            }\n        });\n    };\n    DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n    DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n        if (this.implementsOnChanges) {\n            this.inputChanges[prop] = new core.SimpleChange(prevValue, currValue, prevValue === currValue);\n        }\n        this.inputChangeCount++;\n        this.component[prop] = currValue;\n    };\n    DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n        var ngContentSelectors = this.componentFactory.ngContentSelectors;\n        return groupNodesBySelector(ngContentSelectors, this.element.contents());\n    };\n    return DowngradeComponentAdapter;\n}());\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n */\nfunction groupNodesBySelector(ngContentSelectors, nodes) {\n    var projectableNodes = [];\n    for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n        projectableNodes[i] = [];\n    }\n    for (var j = 0, jj = nodes.length; j < jj; ++j) {\n        var node = nodes[j];\n        var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n        if (ngContentIndex != null) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\nfunction findMatchingNgContentIndex(element, ngContentSelectors) {\n    var ngContentIndices = [];\n    var wildcardNgContentIndex = -1;\n    for (var i = 0; i < ngContentSelectors.length; i++) {\n        var selector = ngContentSelectors[i];\n        if (selector === '*') {\n            wildcardNgContentIndex = i;\n        }\n        else {\n            if (matchesSelector(element, selector)) {\n                ngContentIndices.push(i);\n            }\n        }\n    }\n    ngContentIndices.sort();\n    if (wildcardNgContentIndex !== -1) {\n        ngContentIndices.push(wildcardNgContentIndex);\n    }\n    return ngContentIndices.length ? ngContentIndices[0] : null;\n}\nvar _matches;\nfunction matchesSelector(el, selector) {\n    if (!_matches) {\n        var elProto = Element.prototype;\n        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    }\n    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * A helper function that allows an Angular component to be used from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function to be used for registering\n * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * ### Examples\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * @param info contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n *\n * @returns a factory function that can be used to register the component in an\n * AngularJS module.\n *\n * @experimental\n */\nfunction downgradeComponent(info) {\n    var directiveFactory = function ($compile, $injector, $parse) {\n        // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n        // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n        // (except if explicitly escaped, in which case we shouldn't force it back in).\n        // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n        // Angular zone.\n        var needsNgZone = false;\n        var wrapCallback = function (cb) { return cb; };\n        var ngZone;\n        return {\n            restrict: 'E',\n            terminal: true,\n            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n            link: function (scope, element, attrs, required) {\n                // We might have to compile the contents asynchronously, because this might have been\n                // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                // been compiled.\n                var ngModel = required[1];\n                var parentInjector = required[0];\n                var ranAsync = false;\n                if (!parentInjector) {\n                    var lazyModuleRef = $injector.get(LAZY_MODULE_REF);\n                    needsNgZone = lazyModuleRef.needsNgZone;\n                    parentInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                }\n                var doDowngrade = function (injector) {\n                    var componentFactoryResolver = injector.get(core.ComponentFactoryResolver);\n                    var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);\n                    if (!componentFactory) {\n                        throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                    }\n                    var injectorPromise = new ParentInjectorPromise$1(element);\n                    var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                    var projectableNodes = facade.compileContents();\n                    facade.createComponent(projectableNodes);\n                    facade.setupInputs(needsNgZone, info.propagateDigest);\n                    facade.setupOutputs();\n                    facade.registerCleanup();\n                    injectorPromise.resolve(facade.getInjector());\n                    if (ranAsync) {\n                        // If this is run async, it is possible that it is not run inside a\n                        // digest and initial input values will not be detected.\n                        scope.$evalAsync(function () { });\n                    }\n                };\n                var downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                    if (!ngZone) {\n                        ngZone = injector.get(core.NgZone);\n                        wrapCallback = function (cb) { return function () {\n                            return core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                        }; };\n                    }\n                    wrapCallback(function () { return doDowngrade(injector); })();\n                };\n                if (isThenable(parentInjector)) {\n                    parentInjector.then(downgradeFn);\n                }\n                else {\n                    downgradeFn(parentInjector);\n                }\n                ranAsync = true;\n            }\n        };\n    };\n    // bracket-notation because of closure - see #14441\n    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n    return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nvar ParentInjectorPromise$1 = /** @class */ (function () {\n    function ParentInjectorPromise(element) {\n        this.element = element;\n        this.injectorKey = controllerKey(INJECTOR_KEY);\n        this.callbacks = [];\n        // Store the promise on the element.\n        element.data(this.injectorKey, this);\n    }\n    ParentInjectorPromise.prototype.then = function (callback) {\n        if (this.injector) {\n            callback(this.injector);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    ParentInjectorPromise.prototype.resolve = function (injector) {\n        this.injector = injector;\n        // Store the real injector on the element.\n        this.element.data(this.injectorKey, injector);\n        // Release the element to prevent memory leaks.\n        this.element = null;\n        // Run the queued callbacks.\n        this.callbacks.forEach(function (callback) { return callback(injector); });\n        this.callbacks.length = 0;\n    };\n    return ParentInjectorPromise;\n}());\nfunction isThenable(obj) {\n    return isFunction(obj.then);\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @description\n *\n * A helper function to allow an Angular service to be accessible from AngularJS.\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * This helper function returns a factory function that provides access to the Angular\n * service identified by the `token` parameter.\n *\n * ### Examples\n *\n * First ensure that the service to be downgraded is provided in an `NgModule`\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app `NgModule`\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {@example upgrade/static/ts/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {@example upgrade/static/ts/module.ts region=\"example-app\"}\n *\n * @param token an `InjectionToken` that identifies a service provided from Angular.\n *\n * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n * @experimental\n */\nfunction downgradeInjectable(token) {\n    var factory = function (i) { return i.get(token); };\n    factory['$inject'] = [INJECTOR_KEY];\n    return factory;\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Constants\nvar REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n// Classes\nvar UpgradeHelper = /** @class */ (function () {\n    function UpgradeHelper(injector, name, elementRef, directive) {\n        this.injector = injector;\n        this.name = name;\n        this.$injector = injector.get($INJECTOR);\n        this.$compile = this.$injector.get($COMPILE);\n        this.$controller = this.$injector.get($CONTROLLER);\n        this.element = elementRef.nativeElement;\n        this.$element = element(this.element);\n        this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n    }\n    UpgradeHelper.getDirective = function ($injector, name) {\n        var directives = $injector.get(name + 'Directive');\n        if (directives.length > 1) {\n            throw new Error(\"Only support single directive definition for: \" + name);\n        }\n        var directive = directives[0];\n        // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n        // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n        if (directive.compile && !directive.link)\n            notSupported(name, 'compile');\n        if (directive.replace)\n            notSupported(name, 'replace');\n        if (directive.terminal)\n            notSupported(name, 'terminal');\n        return directive;\n    };\n    UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate) {\n        if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n        if (directive.template !== undefined) {\n            return getOrCall(directive.template);\n        }\n        else if (directive.templateUrl) {\n            var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n            var url_1 = getOrCall(directive.templateUrl);\n            var template = $templateCache_1.get(url_1);\n            if (template !== undefined) {\n                return template;\n            }\n            else if (!fetchRemoteTemplate) {\n                throw new Error('loading directive templates asynchronously is not supported');\n            }\n            return new Promise(function (resolve, reject) {\n                var $httpBackend = $injector.get($HTTP_BACKEND);\n                $httpBackend('GET', url_1, null, function (status, response) {\n                    if (status === 200) {\n                        resolve($templateCache_1.put(url_1, response));\n                    }\n                    else {\n                        reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                    }\n                });\n            });\n        }\n        else {\n            throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n        }\n    };\n    UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n        // TODO: Document that we do not pre-assign bindings on the controller instance.\n        // Quoted properties below so that this code can be optimized with Closure Compiler.\n        var locals = { '$scope': $scope, '$element': this.$element };\n        var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n        this.$element.data(controllerKey(this.directive.name), controller);\n        return controller;\n    };\n    UpgradeHelper.prototype.compileTemplate = function (template) {\n        if (template === undefined) {\n            template = UpgradeHelper.getTemplate(this.$injector, this.directive);\n        }\n        return this.compileHtml(template);\n    };\n    UpgradeHelper.prototype.prepareTransclusion = function () {\n        var _this = this;\n        var transclude = this.directive.transclude;\n        var contentChildNodes = this.extractChildNodes();\n        var attachChildrenFn = function (scope, cloneAttachFn) {\n            // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n            // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n            // there will be no transclusion scope here.\n            // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n            scope = scope || { $destroy: function () { return undefined; } };\n            return cloneAttachFn($template, scope);\n        };\n        var $template = contentChildNodes;\n        if (transclude) {\n            var slots_1 = Object.create(null);\n            if (typeof transclude === 'object') {\n                $template = [];\n                var slotMap_1 = Object.create(null);\n                var filledSlots_1 = Object.create(null);\n                // Parse the element selectors.\n                Object.keys(transclude).forEach(function (slotName) {\n                    var selector = transclude[slotName];\n                    var optional = selector.charAt(0) === '?';\n                    selector = optional ? selector.substring(1) : selector;\n                    slotMap_1[selector] = slotName;\n                    slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                    filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                });\n                // Add the matching elements into their slot.\n                contentChildNodes.forEach(function (node) {\n                    var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                    if (slotName) {\n                        filledSlots_1[slotName] = true;\n                        slots_1[slotName] = slots_1[slotName] || [];\n                        slots_1[slotName].push(node);\n                    }\n                    else {\n                        $template.push(node);\n                    }\n                });\n                // Check for required slots that were not filled.\n                Object.keys(filledSlots_1).forEach(function (slotName) {\n                    if (!filledSlots_1[slotName]) {\n                        throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                    }\n                });\n                Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                    var nodes = slots_1[slotName];\n                    slots_1[slotName] = function (scope, cloneAttach) {\n                        return cloneAttach(nodes, scope);\n                    };\n                });\n            }\n            // Attach `$$slots` to default slot transclude fn.\n            attachChildrenFn.$$slots = slots_1;\n            // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n            // removes all text content after the first interpolation and updates it later, after\n            // evaluating the expressions. This would result in AngularJS failing to recognize text\n            // nodes that start with an interpolation as transcluded content and use the fallback\n            // content instead.\n            // To avoid this issue, we add a\n            // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n            // to empty text nodes (which can only be a result of Angular removing their initial content).\n            // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n            //       will still fail to be detected by AngularJS v1.6+\n            $template.forEach(function (node) {\n                if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                    node.nodeValue = '\\u200C';\n                }\n            });\n        }\n        return attachChildrenFn;\n    };\n    UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n        var directiveRequire = this.getDirectiveRequire();\n        var requiredControllers = this.resolveRequire(directiveRequire);\n        if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n            var requiredControllersMap_1 = requiredControllers;\n            Object.keys(requiredControllersMap_1).forEach(function (key) {\n                controllerInstance[key] = requiredControllersMap_1[key];\n            });\n        }\n        return requiredControllers;\n    };\n    UpgradeHelper.prototype.compileHtml = function (html) {\n        this.element.innerHTML = html;\n        return this.$compile(this.element.childNodes);\n    };\n    UpgradeHelper.prototype.extractChildNodes = function () {\n        var childNodes = [];\n        var childNode;\n        while (childNode = this.element.firstChild) {\n            this.element.removeChild(childNode);\n            childNodes.push(childNode);\n        }\n        return childNodes;\n    };\n    UpgradeHelper.prototype.getDirectiveRequire = function () {\n        var require = this.directive.require || (this.directive.controller && this.directive.name);\n        if (isMap(require)) {\n            Object.keys(require).forEach(function (key) {\n                var value = require[key];\n                var match = value.match(REQUIRE_PREFIX_RE);\n                var name = value.substring(match[0].length);\n                if (!name) {\n                    require[key] = match[0] + key;\n                }\n            });\n        }\n        return require;\n    };\n    UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n        var _this = this;\n        if (!require) {\n            return null;\n        }\n        else if (Array.isArray(require)) {\n            return require.map(function (req) { return _this.resolveRequire(req); });\n        }\n        else if (typeof require === 'object') {\n            var value_1 = {};\n            Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(require[key]); });\n            return value_1;\n        }\n        else if (typeof require === 'string') {\n            var match = require.match(REQUIRE_PREFIX_RE);\n            var inheritType = match[1] || match[3];\n            var name_1 = require.substring(match[0].length);\n            var isOptional = !!match[2];\n            var searchParents = !!inheritType;\n            var startOnParent = inheritType === '^^';\n            var ctrlKey = controllerKey(name_1);\n            var elem = startOnParent ? this.$element.parent() : this.$element;\n            var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n            if (!value && !isOptional) {\n                throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n            }\n            return value;\n        }\n        else {\n            throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n        }\n    };\n    return UpgradeHelper;\n}());\nfunction getOrCall(property) {\n    return isFunction(property) ? property() : property;\n}\n// NOTE: Only works for `typeof T !== 'object'`.\nfunction isMap(value) {\n    return value && !Array.isArray(value) && typeof value === 'object';\n}\nfunction notSupported(name, feature) {\n    throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n}\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CAMEL_CASE = /([A-Z])/g;\nvar INITIAL_VALUE$1 = {\n    __UNINITIALIZED__: true\n};\nvar NOT_SUPPORTED = 'NOT_SUPPORTED';\nvar UpgradeNg1ComponentAdapterBuilder = /** @class */ (function () {\n    function UpgradeNg1ComponentAdapterBuilder(name) {\n        this.name = name;\n        this.inputs = [];\n        this.inputsRename = [];\n        this.outputs = [];\n        this.outputsRename = [];\n        this.propertyOutputs = [];\n        this.checkProperties = [];\n        this.propertyMap = {};\n        this.directive = null;\n        var selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });\n        var self = this;\n        // Note: There is a bug in TS 2.4 that prevents us from\n        // inlining this into @Directive\n        // TODO(tbosch): find or file a bug against TypeScript for this.\n        var directive = { selector: selector, inputs: this.inputsRename, outputs: this.outputsRename };\n        var MyClass = /** @class */ (function () {\n            function MyClass(scope, injector, elementRef) {\n                var helper = new UpgradeHelper(injector, name, elementRef, this.directive);\n                return new UpgradeNg1ComponentAdapter(helper, scope, self.template, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap);\n            }\n            MyClass.prototype.ngOnInit = function () {\n            };\n            MyClass.prototype.ngOnChanges = function () {\n            };\n            MyClass.prototype.ngDoCheck = function () {\n            };\n            MyClass.prototype.ngOnDestroy = function () {\n            };\n            MyClass.decorators = [\n                { type: core.Directive, args: [directive,] },\n            ];\n            /** @nocollapse */\n            MyClass.ctorParameters = function () { return [\n                { type: undefined, decorators: [{ type: core.Inject, args: [$SCOPE,] }] },\n                { type: core.Injector },\n                { type: core.ElementRef }\n            ]; };\n            return MyClass;\n        }());\n        this.type = MyClass;\n    }\n    UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = function () {\n        var _this = this;\n        var btcIsObject = typeof this.directive.bindToController === 'object';\n        if (btcIsObject && Object.keys(this.directive.scope).length) {\n            throw new Error(\"Binding definitions on scope and controller at the same time are not supported.\");\n        }\n        var context = (btcIsObject) ? this.directive.bindToController : this.directive.scope;\n        if (typeof context == 'object') {\n            Object.keys(context).forEach(function (propName) {\n                var definition = context[propName];\n                var bindingType = definition.charAt(0);\n                var bindingOptions = definition.charAt(1);\n                var attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n                // QUESTION: What about `=*`? Ignore? Throw? Support?\n                var inputName = \"input_\" + attrName;\n                var inputNameRename = inputName + \": \" + attrName;\n                var outputName = \"output_\" + attrName;\n                var outputNameRename = outputName + \": \" + attrName;\n                var outputNameRenameChange = outputNameRename + \"Change\";\n                switch (bindingType) {\n                    case '@':\n                    case '<':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        break;\n                    case '=':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRenameChange);\n                        _this.propertyMap[outputName] = propName;\n                        _this.checkProperties.push(propName);\n                        _this.propertyOutputs.push(outputName);\n                        break;\n                    case '&':\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRename);\n                        _this.propertyMap[outputName] = propName;\n                        break;\n                    default:\n                        var json = JSON.stringify(context);\n                        throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                }\n            });\n        }\n    };\n    /**\n     * Upgrade ng1 components into Angular.\n     */\n    UpgradeNg1ComponentAdapterBuilder.resolve = function (exportedComponents, $injector) {\n        var promises = Object.keys(exportedComponents).map(function (name) {\n            var exportedComponent = exportedComponents[name];\n            exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n            exportedComponent.extractBindings();\n            return Promise\n                .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n                .then(function (template) { return exportedComponent.template = template; });\n        });\n        return Promise.all(promises);\n    };\n    return UpgradeNg1ComponentAdapterBuilder;\n}());\nvar UpgradeNg1ComponentAdapter = /** @class */ (function () {\n    function UpgradeNg1ComponentAdapter(helper, scope, template, inputs, outputs, propOuts, checkProperties, propertyMap) {\n        this.helper = helper;\n        this.template = template;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.propOuts = propOuts;\n        this.checkProperties = checkProperties;\n        this.propertyMap = propertyMap;\n        this.controllerInstance = null;\n        this.destinationObj = null;\n        this.checkLastValues = [];\n        this.$element = null;\n        this.directive = helper.directive;\n        this.element = helper.element;\n        this.$element = helper.$element;\n        this.componentScope = scope.$new(!!this.directive.scope);\n        var controllerType = this.directive.controller;\n        if (this.directive.bindToController && controllerType) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n            this.destinationObj = this.controllerInstance;\n        }\n        else {\n            this.destinationObj = this.componentScope;\n        }\n        for (var i = 0; i < inputs.length; i++) {\n            this[inputs[i]] = null;\n        }\n        for (var j = 0; j < outputs.length; j++) {\n            var emitter = this[outputs[j]] = new core.EventEmitter();\n            if (this.propOuts.indexOf(outputs[j]) === -1) {\n                this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.emit(value); }; })(emitter));\n            }\n        }\n        for (var k = 0; k < propOuts.length; k++) {\n            this.checkLastValues.push(INITIAL_VALUE$1);\n        }\n    }\n    UpgradeNg1ComponentAdapter.prototype.ngOnInit = function () {\n        // Collect contents, insert and compile template\n        var attachChildNodes = this.helper.prepareTransclusion();\n        var linkFn = this.helper.compileTemplate(this.template);\n        // Instantiate controller (if not already done so)\n        var controllerType = this.directive.controller;\n        var bindToController = this.directive.bindToController;\n        if (controllerType && !bindToController) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n        }\n        // Require other controllers\n        var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n        // Hook: $onInit\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n            this.controllerInstance.$onInit();\n        }\n        // Linking\n        var link = this.directive.link;\n        var preLink = (typeof link == 'object') && link.pre;\n        var postLink = (typeof link == 'object') ? link.post : link;\n        var attrs = NOT_SUPPORTED;\n        var transcludeFn = NOT_SUPPORTED;\n        if (preLink) {\n            preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        linkFn(this.componentScope, null, { parentBoundTranscludeFn: attachChildNodes });\n        if (postLink) {\n            postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        // Hook: $postLink\n        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n            this.controllerInstance.$postLink();\n        }\n    };\n    UpgradeNg1ComponentAdapter.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        var ng1Changes = {};\n        Object.keys(changes).forEach(function (name) {\n            var change = changes[name];\n            _this.setComponentProperty(name, change.currentValue);\n            ng1Changes[_this.propertyMap[name]] = change;\n        });\n        if (isFunction(this.destinationObj.$onChanges)) {\n            this.destinationObj.$onChanges(ng1Changes);\n        }\n    };\n    UpgradeNg1ComponentAdapter.prototype.ngDoCheck = function () {\n        var _this = this;\n        var destinationObj = this.destinationObj;\n        var lastValues = this.checkLastValues;\n        var checkProperties = this.checkProperties;\n        var propOuts = this.propOuts;\n        checkProperties.forEach(function (propName, i) {\n            var value = destinationObj[propName];\n            var last = lastValues[i];\n            if (!strictEquals(last, value)) {\n                var eventEmitter = _this[propOuts[i]];\n                eventEmitter.emit(lastValues[i] = value);\n            }\n        });\n        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n            this.controllerInstance.$doCheck();\n        }\n    };\n    UpgradeNg1ComponentAdapter.prototype.ngOnDestroy = function () {\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n            this.controllerInstance.$onDestroy();\n        }\n        this.componentScope.$destroy();\n    };\n    UpgradeNg1ComponentAdapter.prototype.setComponentProperty = function (name, value) {\n        this.destinationObj[this.propertyMap[name]] = value;\n    };\n    return UpgradeNg1ComponentAdapter;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar upgradeCount = 0;\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * ## Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * @Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * @NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nvar UpgradeAdapter = /** @class */ (function () {\n    function UpgradeAdapter(ng2AppModule, compilerOptions) {\n        this.ng2AppModule = ng2AppModule;\n        this.compilerOptions = compilerOptions;\n        this.idPrefix = \"NG2_UPGRADE_\" + upgradeCount++ + \"_\";\n        this.downgradedComponents = [];\n        /**\n         * An internal map of ng1 components which need to up upgraded to ng2.\n         *\n         * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n         * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n         *\n         * @internal\n         */\n        this.ng1ComponentsToBeUpgraded = {};\n        this.upgradedProviders = [];\n        this.moduleRef = null;\n        if (!ng2AppModule) {\n            throw new Error('UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n        }\n    }\n    /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from @angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * @Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     *   @Input() salutation: string;\n     *   @Input() name: string;\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     */\n    UpgradeAdapter.prototype.downgradeNg2Component = function (component) {\n        this.downgradedComponents.push(component);\n        return downgradeComponent({ component: component });\n    };\n    /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * @Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     */\n    UpgradeAdapter.prototype.upgradeNg1Component = function (name) {\n        if (this.ng1ComponentsToBeUpgraded.hasOwnProperty(name)) {\n            return this.ng1ComponentsToBeUpgraded[name].type;\n        }\n        else {\n            return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n                .type;\n        }\n    };\n    /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param modules any AngularJS modules that the upgrade module should depend upon\n     * @returns an `UpgradeAdapterRef`, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    UpgradeAdapter.prototype.registerForNg1Tests = function (modules) {\n        var _this = this;\n        var windowNgMock = window['angular'].mock;\n        if (!windowNgMock || !windowNgMock.module) {\n            throw new Error('Failed to find \\'angular.mock.module\\'.');\n        }\n        this.declareNg1Module(modules);\n        windowNgMock.module(this.ng1Module.name);\n        var upgrade = new UpgradeAdapterRef();\n        this.ng2BootstrapDeferred.promise.then(function (ng1Injector) { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); }, onError);\n        return upgrade;\n    };\n    /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * @Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     */\n    UpgradeAdapter.prototype.bootstrap = function (element$$1, modules, config) {\n        var _this = this;\n        this.declareNg1Module(modules);\n        var upgrade = new UpgradeAdapterRef();\n        // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n        var windowAngular = window /** TODO #???? */['angular'];\n        windowAngular.resumeBootstrap = undefined;\n        this.ngZone.run(function () { bootstrap(element$$1, [_this.ng1Module.name], config); });\n        var ng1BootstrapPromise = new Promise(function (resolve) {\n            if (windowAngular.resumeBootstrap) {\n                var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                windowAngular.resumeBootstrap = function () {\n                    windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                    var r = windowAngular.resumeBootstrap.apply(this, arguments);\n                    resolve();\n                    return r;\n                };\n            }\n            else {\n                resolve();\n            }\n        });\n        Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(function (_a) {\n            var _b = __read(_a, 1), ng1Injector = _b[0];\n            element(element$$1).data(controllerKey(INJECTOR_KEY), _this.moduleRef.injector);\n            _this.moduleRef.injector.get(core.NgZone).run(function () { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); });\n        }, onError);\n        return upgrade;\n    };\n    /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * @Injectable()\n     * class Example {\n     *   constructor(@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     */\n    UpgradeAdapter.prototype.upgradeNg1Provider = function (name, options) {\n        var token = options && options.asToken || name;\n        this.upgradedProviders.push({\n            provide: token,\n            useFactory: function ($injector) { return $injector.get(name); },\n            deps: [$INJECTOR]\n        });\n    };\n    /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     */\n    UpgradeAdapter.prototype.downgradeNg2Provider = function (token) { return downgradeInjectable(token); };\n    /**\n     * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n     * hybrid application.\n     *\n     * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n     *\n     * @param modules The AngularJS modules that this upgrade module should depend upon.\n     * @returns The AngularJS upgrade module that is declared by this method\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     * upgradeAdapter.declareNg1Module(['heroApp']);\n     * ```\n     */\n    UpgradeAdapter.prototype.declareNg1Module = function (modules) {\n        var _this = this;\n        if (modules === void 0) { modules = []; }\n        var delayApplyExps = [];\n        var original$applyFn;\n        var rootScopePrototype;\n        var rootScope;\n        var upgradeAdapter = this;\n        var ng1Module = this.ng1Module = module$1(this.idPrefix, modules);\n        var platformRef = platformBrowserDynamic.platformBrowserDynamic();\n        this.ngZone = new core.NgZone({ enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec') });\n        this.ng2BootstrapDeferred = new Deferred();\n        ng1Module.factory(INJECTOR_KEY, function () { return _this.moduleRef.injector.get(core.Injector); })\n            .factory(LAZY_MODULE_REF, [\n            INJECTOR_KEY,\n            function (injector) { return ({ injector: injector, needsNgZone: false }); }\n        ])\n            .constant(NG_ZONE_KEY, this.ngZone)\n            .factory(COMPILER_KEY, function () { return _this.moduleRef.injector.get(core.Compiler); })\n            .config([\n            '$provide', '$injector',\n            function (provide, ng1Injector) {\n                provide.decorator($ROOT_SCOPE, [\n                    '$delegate',\n                    function (rootScopeDelegate) {\n                        // Capture the root apply so that we can delay first call to $apply until we\n                        // bootstrap Angular and then we replay and restore the $apply.\n                        rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                        if (rootScopePrototype.hasOwnProperty('$apply')) {\n                            original$applyFn = rootScopePrototype.$apply;\n                            rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };\n                        }\n                        else {\n                            throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                        }\n                        return rootScope = rootScopeDelegate;\n                    }\n                ]);\n                if (ng1Injector.has($$TESTABILITY)) {\n                    provide.decorator($$TESTABILITY, [\n                        '$delegate',\n                        function (testabilityDelegate) {\n                            var originalWhenStable = testabilityDelegate.whenStable;\n                            // Cannot use arrow function below because we need the context\n                            var newWhenStable = function (callback) {\n                                originalWhenStable.call(this, function () {\n                                    var ng2Testability = upgradeAdapter.moduleRef.injector.get(core.Testability);\n                                    if (ng2Testability.isStable()) {\n                                        callback.apply(this, arguments);\n                                    }\n                                    else {\n                                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                                    }\n                                });\n                            };\n                            testabilityDelegate.whenStable = newWhenStable;\n                            return testabilityDelegate;\n                        }\n                    ]);\n                }\n            }\n        ]);\n        ng1Module.run([\n            '$injector', '$rootScope',\n            function (ng1Injector, rootScope) {\n                UpgradeNg1ComponentAdapterBuilder.resolve(_this.ng1ComponentsToBeUpgraded, ng1Injector)\n                    .then(function () {\n                    // Note: There is a bug in TS 2.4 that prevents us from\n                    // inlining this into @NgModule\n                    // TODO(tbosch): find or file a bug against TypeScript for this.\n                    var ngModule = {\n                        providers: [\n                            { provide: $INJECTOR, useFactory: function () { return ng1Injector; } },\n                            { provide: $COMPILE, useFactory: function () { return ng1Injector.get($COMPILE); } },\n                            _this.upgradedProviders\n                        ],\n                        imports: [_this.ng2AppModule],\n                        entryComponents: _this.downgradedComponents\n                    };\n                    // At this point we have ng1 injector and we have prepared\n                    // ng1 components to be upgraded, we now can bootstrap ng2.\n                    var DynamicNgUpgradeModule = /** @class */ (function () {\n                        function DynamicNgUpgradeModule() {\n                        }\n                        DynamicNgUpgradeModule.prototype.ngDoBootstrap = function () { };\n                        DynamicNgUpgradeModule.decorators = [\n                            { type: core.NgModule, args: [ngModule,] },\n                        ];\n                        /** @nocollapse */\n                        DynamicNgUpgradeModule.ctorParameters = function () { return []; };\n                        return DynamicNgUpgradeModule;\n                    }());\n                    platformRef\n                        .bootstrapModule(DynamicNgUpgradeModule, [_this.compilerOptions, { ngZone: _this.ngZone }])\n                        .then(function (ref) {\n                        _this.moduleRef = ref;\n                        _this.ngZone.run(function () {\n                            if (rootScopePrototype) {\n                                rootScopePrototype.$apply = original$applyFn; // restore original $apply\n                                while (delayApplyExps.length) {\n                                    rootScope.$apply(delayApplyExps.shift());\n                                }\n                                rootScopePrototype = null;\n                            }\n                        });\n                    })\n                        .then(function () { return _this.ng2BootstrapDeferred.resolve(ng1Injector); }, onError)\n                        .then(function () {\n                        var subscription = _this.ngZone.onMicrotaskEmpty.subscribe({ next: function () { return rootScope.$digest(); } });\n                        rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                    });\n                })\n                    .catch(function (e) { return _this.ng2BootstrapDeferred.reject(e); });\n            }\n        ]);\n        return ng1Module;\n    };\n    return UpgradeAdapter;\n}());\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nvar UpgradeAdapterRef = /** @class */ (function () {\n    function UpgradeAdapterRef() {\n        /* @internal */\n        this._readyFn = null;\n        this.ng1RootScope = null;\n        this.ng1Injector = null;\n        this.ng2ModuleRef = null;\n        this.ng2Injector = null;\n    }\n    /* @internal */\n    UpgradeAdapterRef.prototype._bootstrapDone = function (ngModuleRef, ng1Injector) {\n        this.ng2ModuleRef = ngModuleRef;\n        this.ng2Injector = ngModuleRef.injector;\n        this.ng1Injector = ng1Injector;\n        this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n        this._readyFn && this._readyFn(this);\n    };\n    /**\n     * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n     * application has been bootstrapped.\n     *\n     * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n     * require a call to `$apply()`.\n     */\n    UpgradeAdapterRef.prototype.ready = function (fn) { this._readyFn = fn; };\n    /**\n     * Dispose of running hybrid AngularJS / Angular application.\n     */\n    UpgradeAdapterRef.prototype.dispose = function () {\n        this.ng1Injector.get($ROOT_SCOPE).$destroy();\n        this.ng2ModuleRef.destroy();\n    };\n    return UpgradeAdapterRef;\n}());\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package. allowing\n * Angular 1 and Angular 2+ to run side by side in the same application.\n */\n\n// This file only re-exports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexports.VERSION = VERSION;\nexports.UpgradeAdapter = UpgradeAdapter;\nexports.UpgradeAdapterRef = UpgradeAdapterRef;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=upgrade.umd.js.map\n"]}
{"version":3,"sources":["packages/upgrade/upgrade.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","upgrade","core","platformBrowserDynamic","this","VERSION","Version","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__decorate","decorators","target","key","desc","d","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","noNg","Error","noNgElement","cleanData","angular","bootstrap","element","version","undefined","resumeBootstrap","getTestability","window","e","nodes","$COMPILE","$CONTROLLER","$INJECTOR","$SCOPE","INJECTOR_KEY","REQUIRE_INJECTOR","PropertyBinding","prop","attr","parseBinding","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","bindAttr","bindonAttr","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","onError","console","error","stack","log","controllerKey","name","getComponentName","component","overriddenName","toString","split","isFunction","value","Deferred","_this","promise","Promise","res","rej","resolve","reject","strictEquals","val1","val2","_matches","INITIAL_VALUE","__UNINITIALIZED__","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$injector","$compile","$parse","componentFactory","wrapCallback","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compileContents","compiledProjectableNodes","linkFns","groupProjectableNodes","map","empty","forEach","linkFn","clone","push","append","createComponent","projectableNodes","childInjector","Injector","create","providers","provide","useValue","parent","componentRef","viewChangeDetector","injector","get","ChangeDetectorRef","changeDetector","changeDetectorRef","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","hookupNgModel","supportsNgModel","writeValue","registerOnChange","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","setupInputs","needsNgZone","propagateDigest","inputs","_loop_1","prevValue","input","propName","templateName","expr","observeFn_1","currValue","updateInput","$observe","unwatch_1","this_1","$watch","watchFn","detectChanges","componentType","ngOnChanges","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","setupOutputs","outputs","j","output","substring","subscribeToOutput","isAssignment","getter","setter","emitter","subscribe","next","v","$event","registerCleanup","destroyComponentRef","destroy","destroyed","on","$destroy","$on","unregisterApplication","getInjector","SimpleChange","groupNodesBySelector","ngContentSelectors","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","contents","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","ParentInjectorPromise","injectorKey","callbacks","data","then","callback","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","link","notSupported","replace","terminal","getTemplate","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","$httpBackend","status","response","put","buildController","controllerType","$scope","controller","controllerAs","compileTemplate","compileHtml","onDestroy","controllerInstance","$onDestroy","querySelectorAll","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","attachChildrenFn","cloneAttachFn","$template","slots_1","slotMap_1","filledSlots_1","keys","slotName","optional","directiveNormalize","_","letter","nodeName","toLowerCase","filter","cloneAttach","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","isMap","requiredControllersMap_1","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","Array","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","inheritedData","property","feature","CAMEL_CASE","INITIAL_VALUE$1","UpgradeNg1ComponentAdapterBuilder","inputsRename","outputsRename","propertyOutputs","checkProperties","propertyMap","self","all","MyClass","helper","UpgradeNg1ComponentAdapter","ngOnInit","ngDoCheck","ngOnDestroy","Directive","jit","__param","paramIndex","decorator","Inject","ElementRef","type","extractBindings","btcIsObject","context","definition","bindingType","bindingOptions","attrName","inputName","inputNameRename","outputName","outputNameRename","outputNameRenameChange","json","JSON","stringify","exportedComponents","promises","exportedComponent","propOuts","destinationObj","checkLastValues","EventEmitter","indexOf","setComponentProperty","emit","k","attachChildNodes","$onInit","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ng1Changes","change","currentValue","$onChanges","lastValues","$doCheck","upgradeCount","UpgradeAdapter","ng2AppModule","compilerOptions","idPrefix","downgradedComponents","ng1ComponentsToBeUpgraded","upgradedProviders","moduleRef","downgradeNg2Component","downgradeComponent","info","directiveFactory","ngZone","cb","restrict","required","ranAsync","lazyModuleRef","doDowngrade","ComponentFactoryResolver","resolveComponentFactory","injectorPromise","facade","$evalAsync","downgradeFn","NgZone","isInAngularZone","run","isThenable","obj","upgradeNg1Component","registerForNg1Tests","modules","windowNgMock","mock","declareNg1Module","ng1Module","UpgradeAdapterRef","ng2BootstrapDeferred","ng1Injector","_bootstrapDone","element$$1","config","windowAngular","ng1BootstrapPromise","originalResumeBootstrap_1","_a","__read","o","m","Symbol","iterator","ar","done","upgradeNg1Provider","options","asToken","useFactory","deps","downgradeNg2Provider","token","downgradeInjectable","original$applyFn","rootScopePrototype","delayApplyExps","upgradeAdapter","platformRef","enableLongStackTrace","Zone","constant","Compiler","rootScopeDelegate","constructor","$apply","exp","has","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","rootScope","ngModule","imports","entryComponents","DynamicNgUpgradeModule","ngDoBootstrap","NgModule","bootstrapModule","ref","shift","subscription","onMicrotaskEmpty","$digest","unsubscribe","catch","_readyFn","ng1RootScope","ng2ModuleRef","ng2Injector","ngModuleRef","ready","fn","dispose"],"mappings":"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","sourcesContent":["/**\n * @license Angular v7.0.4\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser-dynamic')) :\n    typeof define === 'function' && define.amd ? define('@angular/upgrade', ['exports', '@angular/core', '@angular/platform-browser-dynamic'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.upgrade = {}),global.ng.core,global.ng.platformBrowserDynamic));\n}(this, (function (exports,core,platformBrowserDynamic) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @publicApi\n     */\n    var VERSION = new core.Version('7.0.4');\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noNg() {\n        throw new Error('AngularJS v1.x is not loaded!');\n    }\n    var ɵ0 = function () { return noNg(); };\n    var noNgElement = (ɵ0);\n    noNgElement.cleanData = noNg;\n    var angular = {\n        bootstrap: noNg,\n        module: noNg,\n        element: noNgElement,\n        version: undefined,\n        resumeBootstrap: noNg,\n        getTestability: noNg\n    };\n    try {\n        if (window.hasOwnProperty('angular')) {\n            angular = window.angular;\n        }\n    }\n    catch (e) {\n        // ignore in CJS mode.\n    }\n    var bootstrap = function (e, modules, config) {\n        return angular.bootstrap(e, modules, config);\n    };\n    var module$1 = function (prefix, dependencies) {\n        return angular.module(prefix, dependencies);\n    };\n    var element = (function (e) { return angular.element(e); });\n    element.cleanData = function (nodes) { return angular.element.cleanData(nodes); };\n    var version = angular.version;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var $COMPILE = '$compile';\n    var $CONTROLLER = '$controller';\n    var $HTTP_BACKEND = '$httpBackend';\n    var $INJECTOR = '$injector';\n    var $PARSE = '$parse';\n    var $ROOT_SCOPE = '$rootScope';\n    var $SCOPE = '$scope';\n    var $TEMPLATE_CACHE = '$templateCache';\n    var $$TESTABILITY = '$$testability';\n    var COMPILER_KEY = '$$angularCompiler';\n    var INJECTOR_KEY = '$$angularInjector';\n    var LAZY_MODULE_REF = '$$angularLazyModuleRef';\n    var NG_ZONE_KEY = '$$angularNgZone';\n    var REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\n    var REQUIRE_NG_MODEL = '?ngModel';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A `PropertyBinding` represents a mapping between a property name\n     * and an attribute name. It is parsed from a string of the form\n     * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n     * and attribute have the same identifier.\n     */\n    var PropertyBinding = /** @class */ (function () {\n        function PropertyBinding(prop, attr) {\n            this.prop = prop;\n            this.attr = attr;\n            this.parseBinding();\n        }\n        PropertyBinding.prototype.parseBinding = function () {\n            this.bracketAttr = \"[\" + this.attr + \"]\";\n            this.parenAttr = \"(\" + this.attr + \")\";\n            this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n            var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n            this.onAttr = \"on\" + capitalAttr;\n            this.bindAttr = \"bind\" + capitalAttr;\n            this.bindonAttr = \"bindon\" + capitalAttr;\n        };\n        return PropertyBinding;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\n    var DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n    function onError(e) {\n        // TODO: (misko): We seem to not have a stack trace here!\n        if (console.error) {\n            console.error(e, e.stack);\n        }\n        else {\n            // tslint:disable-next-line:no-console\n            console.log(e, e.stack);\n        }\n        throw e;\n    }\n    function controllerKey(name) {\n        return '$' + name + 'Controller';\n    }\n    function directiveNormalize(name) {\n        return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n            .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n    }\n    function getComponentName(component) {\n        // Return the name of the component or the first line of its stringified version.\n        return component.overriddenName || component.name || component.toString().split('\\n')[0];\n    }\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n    var Deferred = /** @class */ (function () {\n        function Deferred() {\n            var _this = this;\n            this.promise = new Promise(function (res, rej) {\n                _this.resolve = res;\n                _this.reject = rej;\n            });\n        }\n        return Deferred;\n    }());\n    /**\n     * @return Whether the passed-in component implements the subset of the\n     *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n     *     compatibility.\n     */\n    function supportsNgModel(component) {\n        return typeof component.writeValue === 'function' &&\n            typeof component.registerOnChange === 'function';\n    }\n    /**\n     * Glue the AngularJS `NgModelController` (if it exists) to the component\n     * (if it implements the needed subset of the `ControlValueAccessor` interface).\n     */\n    function hookupNgModel(ngModel, component) {\n        if (ngModel && supportsNgModel(component)) {\n            ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n            component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n            if (typeof component.registerOnTouched === 'function') {\n                component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n            }\n        }\n    }\n    /**\n     * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n     */\n    function strictEquals(val1, val2) {\n        return val1 === val2 || (val1 !== val1 && val2 !== val2);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var INITIAL_VALUE = {\n        __UNINITIALIZED__: true\n    };\n    var DowngradeComponentAdapter = /** @class */ (function () {\n        function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n            this.element = element;\n            this.attrs = attrs;\n            this.scope = scope;\n            this.ngModel = ngModel;\n            this.parentInjector = parentInjector;\n            this.$injector = $injector;\n            this.$compile = $compile;\n            this.$parse = $parse;\n            this.componentFactory = componentFactory;\n            this.wrapCallback = wrapCallback;\n            this.implementsOnChanges = false;\n            this.inputChangeCount = 0;\n            this.inputChanges = {};\n            this.componentScope = scope.$new();\n        }\n        DowngradeComponentAdapter.prototype.compileContents = function () {\n            var _this = this;\n            var compiledProjectableNodes = [];\n            var projectableNodes = this.groupProjectableNodes();\n            var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n            this.element.empty();\n            linkFns.forEach(function (linkFn) {\n                linkFn(_this.scope, function (clone) {\n                    compiledProjectableNodes.push(clone);\n                    _this.element.append(clone);\n                });\n            });\n            return compiledProjectableNodes;\n        };\n        DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n            var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n            var childInjector = core.Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n            this.componentRef =\n                this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n            this.viewChangeDetector = this.componentRef.injector.get(core.ChangeDetectorRef);\n            this.changeDetector = this.componentRef.changeDetectorRef;\n            this.component = this.componentRef.instance;\n            // testability hook is commonly added during component bootstrap in\n            // packages/core/src/application_ref.bootstrap()\n            // in downgraded application, component creation will take place here as well as adding the\n            // testability hook.\n            var testability = this.componentRef.injector.get(core.Testability, null);\n            if (testability) {\n                this.componentRef.injector.get(core.TestabilityRegistry)\n                    .registerApplication(this.componentRef.location.nativeElement, testability);\n            }\n            hookupNgModel(this.ngModel, this.component);\n        };\n        DowngradeComponentAdapter.prototype.setupInputs = function (needsNgZone, propagateDigest) {\n            var _this = this;\n            if (propagateDigest === void 0) { propagateDigest = true; }\n            var attrs = this.attrs;\n            var inputs = this.componentFactory.inputs || [];\n            var _loop_1 = function (i) {\n                var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n                var expr = null;\n                if (attrs.hasOwnProperty(input.attr)) {\n                    var observeFn_1 = (function (prop) {\n                        var prevValue = INITIAL_VALUE;\n                        return function (currValue) {\n                            // Initially, both `$observe()` and `$watch()` will call this function.\n                            if (!strictEquals(prevValue, currValue)) {\n                                if (prevValue === INITIAL_VALUE) {\n                                    prevValue = currValue;\n                                }\n                                _this.updateInput(prop, prevValue, currValue);\n                                prevValue = currValue;\n                            }\n                        };\n                    })(input.prop);\n                    attrs.$observe(input.attr, observeFn_1);\n                    // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                    // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                    // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                    var unwatch_1 = this_1.componentScope.$watch(function () {\n                        unwatch_1();\n                        unwatch_1 = null;\n                        observeFn_1(attrs[input.attr]);\n                    });\n                }\n                else if (attrs.hasOwnProperty(input.bindAttr)) {\n                    expr = attrs[input.bindAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                    expr = attrs[input.bracketAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                    expr = attrs[input.bindonAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                    expr = attrs[input.bracketParenAttr];\n                }\n                if (expr != null) {\n                    var watchFn = (function (prop) { return function (currValue, prevValue) {\n                        return _this.updateInput(prop, prevValue, currValue);\n                    }; })(input.prop);\n                    this_1.componentScope.$watch(expr, watchFn);\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < inputs.length; i++) {\n                _loop_1(i);\n            }\n            // Invoke `ngOnChanges()` and Change Detection (when necessary)\n            var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n            var prototype = this.componentFactory.componentType.prototype;\n            this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n            this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n                // Invoke `ngOnChanges()`\n                if (_this.implementsOnChanges) {\n                    var inputChanges = _this.inputChanges;\n                    _this.inputChanges = {};\n                    _this.component.ngOnChanges(inputChanges);\n                }\n                _this.viewChangeDetector.markForCheck();\n                // If opted out of propagating digests, invoke change detection when inputs change.\n                if (!propagateDigest) {\n                    detectChanges();\n                }\n            }));\n            // If not opted out of propagating digests, invoke change detection on every digest\n            if (propagateDigest) {\n                this.componentScope.$watch(this.wrapCallback(detectChanges));\n            }\n            // If necessary, attach the view so that it will be dirty-checked.\n            // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n            if (needsNgZone || !propagateDigest) {\n                var unwatch_2 = this.componentScope.$watch(function () {\n                    unwatch_2();\n                    unwatch_2 = null;\n                    var appRef = _this.parentInjector.get(core.ApplicationRef);\n                    appRef.attachView(_this.componentRef.hostView);\n                });\n            }\n        };\n        DowngradeComponentAdapter.prototype.setupOutputs = function () {\n            var attrs = this.attrs;\n            var outputs = this.componentFactory.outputs || [];\n            for (var j = 0; j < outputs.length; j++) {\n                var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n                var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n                var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n                // order below is important - first update bindings then evaluate expressions\n                if (attrs.hasOwnProperty(bindonAttr)) {\n                    this.subscribeToOutput(output, attrs[bindonAttr], true);\n                }\n                if (attrs.hasOwnProperty(bracketParenAttr)) {\n                    this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n                }\n                if (attrs.hasOwnProperty(output.onAttr)) {\n                    this.subscribeToOutput(output, attrs[output.onAttr]);\n                }\n                if (attrs.hasOwnProperty(output.parenAttr)) {\n                    this.subscribeToOutput(output, attrs[output.parenAttr]);\n                }\n            }\n        };\n        DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {\n            var _this = this;\n            if (isAssignment === void 0) { isAssignment = false; }\n            var getter = this.$parse(expr);\n            var setter = getter.assign;\n            if (isAssignment && !setter) {\n                throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n            }\n            var emitter = this.component[output.prop];\n            if (emitter) {\n                emitter.subscribe({\n                    next: isAssignment ? function (v) { return setter(_this.scope, v); } :\n                        function (v) { return getter(_this.scope, { '$event': v }); }\n                });\n            }\n            else {\n                throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this.componentFactory.componentType) + \"'!\");\n            }\n        };\n        DowngradeComponentAdapter.prototype.registerCleanup = function () {\n            var _this = this;\n            var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n            var destroyed = false;\n            this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });\n            this.componentScope.$on('$destroy', function () {\n                if (!destroyed) {\n                    destroyed = true;\n                    _this.componentRef.injector.get(core.TestabilityRegistry)\n                        .unregisterApplication(_this.componentRef.location.nativeElement);\n                    destroyComponentRef();\n                }\n            });\n        };\n        DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n        DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n            if (this.implementsOnChanges) {\n                this.inputChanges[prop] = new core.SimpleChange(prevValue, currValue, prevValue === currValue);\n            }\n            this.inputChangeCount++;\n            this.component[prop] = currValue;\n        };\n        DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n            var ngContentSelectors = this.componentFactory.ngContentSelectors;\n            return groupNodesBySelector(ngContentSelectors, this.element.contents());\n        };\n        return DowngradeComponentAdapter;\n    }());\n    /**\n     * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n     */\n    function groupNodesBySelector(ngContentSelectors, nodes) {\n        var projectableNodes = [];\n        for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n            projectableNodes[i] = [];\n        }\n        for (var j = 0, jj = nodes.length; j < jj; ++j) {\n            var node = nodes[j];\n            var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n            if (ngContentIndex != null) {\n                projectableNodes[ngContentIndex].push(node);\n            }\n        }\n        return projectableNodes;\n    }\n    function findMatchingNgContentIndex(element, ngContentSelectors) {\n        var ngContentIndices = [];\n        var wildcardNgContentIndex = -1;\n        for (var i = 0; i < ngContentSelectors.length; i++) {\n            var selector = ngContentSelectors[i];\n            if (selector === '*') {\n                wildcardNgContentIndex = i;\n            }\n            else {\n                if (matchesSelector(element, selector)) {\n                    ngContentIndices.push(i);\n                }\n            }\n        }\n        ngContentIndices.sort();\n        if (wildcardNgContentIndex !== -1) {\n            ngContentIndices.push(wildcardNgContentIndex);\n        }\n        return ngContentIndices.length ? ngContentIndices[0] : null;\n    }\n    var _matches;\n    function matchesSelector(el, selector) {\n        if (!_matches) {\n            var elProto = Element.prototype;\n            _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n                elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n        }\n        return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function that allows an Angular component to be used from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function to be used for registering\n     * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n     *\n     * @usageNotes\n     * ### Examples\n     *\n     * Let's assume that you have an Angular component called `ng2Heroes` that needs\n     * to be made available in AngularJS templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n     *\n     * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n     * that will make this Angular component available inside AngularJS templates.\n     * The `downgradeComponent()` function returns a factory function that we\n     * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n     *\n     * @param info contains information about the Component that is being downgraded:\n     *\n     * * `component: Type<any>`: The type of the Component that will be downgraded\n     * * `propagateDigest?: boolean`: Whether to perform {@link ChangeDetectorRef#detectChanges\n     *   change detection} on the component on every\n     *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n     *   change detection will still be performed when any of the component's inputs changes.\n     *   (Default: true)\n     *\n     * @returns a factory function that can be used to register the component in an\n     * AngularJS module.\n     *\n     * @publicApi\n     */\n    function downgradeComponent(info) {\n        var directiveFactory = function ($compile, $injector, $parse) {\n            // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n            // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n            // (except if explicitly escaped, in which case we shouldn't force it back in).\n            // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n            // Angular zone.\n            var needsNgZone = false;\n            var wrapCallback = function (cb) { return cb; };\n            var ngZone;\n            return {\n                restrict: 'E',\n                terminal: true,\n                require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n                link: function (scope, element, attrs, required) {\n                    // We might have to compile the contents asynchronously, because this might have been\n                    // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                    // been compiled.\n                    var ngModel = required[1];\n                    var parentInjector = required[0];\n                    var ranAsync = false;\n                    if (!parentInjector) {\n                        var lazyModuleRef = $injector.get(LAZY_MODULE_REF);\n                        needsNgZone = lazyModuleRef.needsNgZone;\n                        parentInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                    }\n                    var doDowngrade = function (injector) {\n                        var componentFactoryResolver = injector.get(core.ComponentFactoryResolver);\n                        var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);\n                        if (!componentFactory) {\n                            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                        }\n                        var injectorPromise = new ParentInjectorPromise(element);\n                        var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                        var projectableNodes = facade.compileContents();\n                        facade.createComponent(projectableNodes);\n                        facade.setupInputs(needsNgZone, info.propagateDigest);\n                        facade.setupOutputs();\n                        facade.registerCleanup();\n                        injectorPromise.resolve(facade.getInjector());\n                        if (ranAsync) {\n                            // If this is run async, it is possible that it is not run inside a\n                            // digest and initial input values will not be detected.\n                            scope.$evalAsync(function () { });\n                        }\n                    };\n                    var downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                        if (!ngZone) {\n                            ngZone = injector.get(core.NgZone);\n                            wrapCallback = function (cb) { return function () {\n                                return core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                            }; };\n                        }\n                        wrapCallback(function () { return doDowngrade(injector); })();\n                    };\n                    if (isThenable(parentInjector)) {\n                        parentInjector.then(downgradeFn);\n                    }\n                    else {\n                        downgradeFn(parentInjector);\n                    }\n                    ranAsync = true;\n                }\n            };\n        };\n        // bracket-notation because of closure - see #14441\n        directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n        return directiveFactory;\n    }\n    /**\n     * Synchronous promise-like object to wrap parent injectors,\n     * to preserve the synchronous nature of Angular 1's $compile.\n     */\n    var ParentInjectorPromise = /** @class */ (function () {\n        function ParentInjectorPromise(element) {\n            this.element = element;\n            this.injectorKey = controllerKey(INJECTOR_KEY);\n            this.callbacks = [];\n            // Store the promise on the element.\n            element.data(this.injectorKey, this);\n        }\n        ParentInjectorPromise.prototype.then = function (callback) {\n            if (this.injector) {\n                callback(this.injector);\n            }\n            else {\n                this.callbacks.push(callback);\n            }\n        };\n        ParentInjectorPromise.prototype.resolve = function (injector) {\n            this.injector = injector;\n            // Store the real injector on the element.\n            this.element.data(this.injectorKey, injector);\n            // Release the element to prevent memory leaks.\n            this.element = null;\n            // Run the queued callbacks.\n            this.callbacks.forEach(function (callback) { return callback(injector); });\n            this.callbacks.length = 0;\n        };\n        return ParentInjectorPromise;\n    }());\n    function isThenable(obj) {\n        return isFunction(obj.then);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function to allow an Angular service to be accessible from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function that provides access to the Angular\n     * service identified by the `token` parameter.\n     *\n     * @usageNotes\n     * ### Examples\n     *\n     * First ensure that the service to be downgraded is provided in an `NgModule`\n     * that will be part of the upgrade application. For example, let's assume we have\n     * defined `HeroesService`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n     *\n     * and that we have included this in our upgrade app `NgModule`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n     *\n     * Now we can register the `downgradeInjectable` factory function for the service\n     * on an AngularJS module.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n     *\n     * Inside an AngularJS component's controller we can get hold of the\n     * downgraded service via the name we gave when downgrading.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n     *\n     * @param token an `InjectionToken` that identifies a service provided from Angular.\n     *\n     * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n     * used to register the service on an AngularJS module.\n     *\n     * @publicApi\n     */\n    function downgradeInjectable(token) {\n        var factory = function (i) { return i.get(token); };\n        factory['$inject'] = [INJECTOR_KEY];\n        return factory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Constants\n    var REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n    // Classes\n    var UpgradeHelper = /** @class */ (function () {\n        function UpgradeHelper(injector, name, elementRef, directive) {\n            this.injector = injector;\n            this.name = name;\n            this.$injector = injector.get($INJECTOR);\n            this.$compile = this.$injector.get($COMPILE);\n            this.$controller = this.$injector.get($CONTROLLER);\n            this.element = elementRef.nativeElement;\n            this.$element = element(this.element);\n            this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n        }\n        UpgradeHelper.getDirective = function ($injector, name) {\n            var directives = $injector.get(name + 'Directive');\n            if (directives.length > 1) {\n                throw new Error(\"Only support single directive definition for: \" + name);\n            }\n            var directive = directives[0];\n            // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n            // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n            if (directive.compile && !directive.link)\n                notSupported(name, 'compile');\n            if (directive.replace)\n                notSupported(name, 'replace');\n            if (directive.terminal)\n                notSupported(name, 'terminal');\n            return directive;\n        };\n        UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate) {\n            if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n            if (directive.template !== undefined) {\n                return getOrCall(directive.template);\n            }\n            else if (directive.templateUrl) {\n                var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n                var url_1 = getOrCall(directive.templateUrl);\n                var template = $templateCache_1.get(url_1);\n                if (template !== undefined) {\n                    return template;\n                }\n                else if (!fetchRemoteTemplate) {\n                    throw new Error('loading directive templates asynchronously is not supported');\n                }\n                return new Promise(function (resolve, reject) {\n                    var $httpBackend = $injector.get($HTTP_BACKEND);\n                    $httpBackend('GET', url_1, null, function (status, response) {\n                        if (status === 200) {\n                            resolve($templateCache_1.put(url_1, response));\n                        }\n                        else {\n                            reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                        }\n                    });\n                });\n            }\n            else {\n                throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n            }\n        };\n        UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n            // TODO: Document that we do not pre-assign bindings on the controller instance.\n            // Quoted properties below so that this code can be optimized with Closure Compiler.\n            var locals = { '$scope': $scope, '$element': this.$element };\n            var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n            this.$element.data(controllerKey(this.directive.name), controller);\n            return controller;\n        };\n        UpgradeHelper.prototype.compileTemplate = function (template) {\n            if (template === undefined) {\n                template = UpgradeHelper.getTemplate(this.$injector, this.directive);\n            }\n            return this.compileHtml(template);\n        };\n        UpgradeHelper.prototype.onDestroy = function ($scope, controllerInstance) {\n            if (controllerInstance && isFunction(controllerInstance.$onDestroy)) {\n                controllerInstance.$onDestroy();\n            }\n            $scope.$destroy();\n            // Clean the jQuery/jqLite data on the component+child elements.\n            // Equivelent to how jQuery/jqLite invoke `cleanData` on an Element (this.element)\n            //  https://github.com/jquery/jquery/blob/e743cbd28553267f955f71ea7248377915613fd9/src/manipulation.js#L223\n            //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/jqLite.js#L306-L312\n            // `cleanData` will invoke the AngularJS `$destroy` DOM event\n            //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/Angular.js#L1911-L1924\n            element.cleanData([this.element]);\n            element.cleanData(this.element.querySelectorAll('*'));\n        };\n        UpgradeHelper.prototype.prepareTransclusion = function () {\n            var _this = this;\n            var transclude = this.directive.transclude;\n            var contentChildNodes = this.extractChildNodes();\n            var attachChildrenFn = function (scope, cloneAttachFn) {\n                // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n                // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n                // there will be no transclusion scope here.\n                // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n                scope = scope || { $destroy: function () { return undefined; } };\n                return cloneAttachFn($template, scope);\n            };\n            var $template = contentChildNodes;\n            if (transclude) {\n                var slots_1 = Object.create(null);\n                if (typeof transclude === 'object') {\n                    $template = [];\n                    var slotMap_1 = Object.create(null);\n                    var filledSlots_1 = Object.create(null);\n                    // Parse the element selectors.\n                    Object.keys(transclude).forEach(function (slotName) {\n                        var selector = transclude[slotName];\n                        var optional = selector.charAt(0) === '?';\n                        selector = optional ? selector.substring(1) : selector;\n                        slotMap_1[selector] = slotName;\n                        slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                        filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                    });\n                    // Add the matching elements into their slot.\n                    contentChildNodes.forEach(function (node) {\n                        var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                        if (slotName) {\n                            filledSlots_1[slotName] = true;\n                            slots_1[slotName] = slots_1[slotName] || [];\n                            slots_1[slotName].push(node);\n                        }\n                        else {\n                            $template.push(node);\n                        }\n                    });\n                    // Check for required slots that were not filled.\n                    Object.keys(filledSlots_1).forEach(function (slotName) {\n                        if (!filledSlots_1[slotName]) {\n                            throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                        }\n                    });\n                    Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                        var nodes = slots_1[slotName];\n                        slots_1[slotName] = function (scope, cloneAttach) {\n                            return cloneAttach(nodes, scope);\n                        };\n                    });\n                }\n                // Attach `$$slots` to default slot transclude fn.\n                attachChildrenFn.$$slots = slots_1;\n                // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n                // removes all text content after the first interpolation and updates it later, after\n                // evaluating the expressions. This would result in AngularJS failing to recognize text\n                // nodes that start with an interpolation as transcluded content and use the fallback\n                // content instead.\n                // To avoid this issue, we add a\n                // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n                // to empty text nodes (which can only be a result of Angular removing their initial content).\n                // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n                //       will still fail to be detected by AngularJS v1.6+\n                $template.forEach(function (node) {\n                    if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                        node.nodeValue = '\\u200C';\n                    }\n                });\n            }\n            return attachChildrenFn;\n        };\n        UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n            var directiveRequire = this.getDirectiveRequire();\n            var requiredControllers = this.resolveRequire(directiveRequire);\n            if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n                var requiredControllersMap_1 = requiredControllers;\n                Object.keys(requiredControllersMap_1).forEach(function (key) {\n                    controllerInstance[key] = requiredControllersMap_1[key];\n                });\n            }\n            return requiredControllers;\n        };\n        UpgradeHelper.prototype.compileHtml = function (html) {\n            this.element.innerHTML = html;\n            return this.$compile(this.element.childNodes);\n        };\n        UpgradeHelper.prototype.extractChildNodes = function () {\n            var childNodes = [];\n            var childNode;\n            while (childNode = this.element.firstChild) {\n                this.element.removeChild(childNode);\n                childNodes.push(childNode);\n            }\n            return childNodes;\n        };\n        UpgradeHelper.prototype.getDirectiveRequire = function () {\n            var require = this.directive.require || (this.directive.controller && this.directive.name);\n            if (isMap(require)) {\n                Object.keys(require).forEach(function (key) {\n                    var value = require[key];\n                    var match = value.match(REQUIRE_PREFIX_RE);\n                    var name = value.substring(match[0].length);\n                    if (!name) {\n                        require[key] = match[0] + key;\n                    }\n                });\n            }\n            return require;\n        };\n        UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n            var _this = this;\n            if (!require) {\n                return null;\n            }\n            else if (Array.isArray(require)) {\n                return require.map(function (req) { return _this.resolveRequire(req); });\n            }\n            else if (typeof require === 'object') {\n                var value_1 = {};\n                Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(require[key]); });\n                return value_1;\n            }\n            else if (typeof require === 'string') {\n                var match = require.match(REQUIRE_PREFIX_RE);\n                var inheritType = match[1] || match[3];\n                var name_1 = require.substring(match[0].length);\n                var isOptional = !!match[2];\n                var searchParents = !!inheritType;\n                var startOnParent = inheritType === '^^';\n                var ctrlKey = controllerKey(name_1);\n                var elem = startOnParent ? this.$element.parent() : this.$element;\n                var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n                if (!value && !isOptional) {\n                    throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n                }\n                return value;\n            }\n            else {\n                throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n            }\n        };\n        return UpgradeHelper;\n    }());\n    function getOrCall(property) {\n        return isFunction(property) ? property() : property;\n    }\n    // NOTE: Only works for `typeof T !== 'object'`.\n    function isMap(value) {\n        return value && !Array.isArray(value) && typeof value === 'object';\n    }\n    function notSupported(name, feature) {\n        throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var CAMEL_CASE = /([A-Z])/g;\n    var INITIAL_VALUE$1 = {\n        __UNINITIALIZED__: true\n    };\n    var NOT_SUPPORTED = 'NOT_SUPPORTED';\n    var UpgradeNg1ComponentAdapterBuilder = /** @class */ (function () {\n        function UpgradeNg1ComponentAdapterBuilder(name) {\n            this.name = name;\n            this.inputs = [];\n            this.inputsRename = [];\n            this.outputs = [];\n            this.outputsRename = [];\n            this.propertyOutputs = [];\n            this.checkProperties = [];\n            this.propertyMap = {};\n            this.directive = null;\n            var selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });\n            var self = this;\n            // Note: There is a bug in TS 2.4 that prevents us from\n            // inlining this into @Directive\n            // TODO(tbosch): find or file a bug against TypeScript for this.\n            var directive = { selector: selector, inputs: this.inputsRename, outputs: this.outputsRename };\n            var MyClass = /** @class */ (function () {\n                function MyClass(scope, injector, elementRef) {\n                    var helper = new UpgradeHelper(injector, name, elementRef, this.directive);\n                    return new UpgradeNg1ComponentAdapter(helper, scope, self.template, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap);\n                }\n                MyClass.prototype.ngOnInit = function () {\n                };\n                MyClass.prototype.ngOnChanges = function () {\n                };\n                MyClass.prototype.ngDoCheck = function () {\n                };\n                MyClass.prototype.ngOnDestroy = function () {\n                };\n                MyClass = __decorate([\n                    core.Directive(__assign({ jit: true }, directive)),\n                    __param(0, core.Inject($SCOPE)),\n                    __metadata(\"design:paramtypes\", [Object, core.Injector, core.ElementRef])\n                ], MyClass);\n                return MyClass;\n            }());\n            this.type = MyClass;\n        }\n        UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = function () {\n            var _this = this;\n            var btcIsObject = typeof this.directive.bindToController === 'object';\n            if (btcIsObject && Object.keys(this.directive.scope).length) {\n                throw new Error(\"Binding definitions on scope and controller at the same time are not supported.\");\n            }\n            var context = (btcIsObject) ? this.directive.bindToController : this.directive.scope;\n            if (typeof context == 'object') {\n                Object.keys(context).forEach(function (propName) {\n                    var definition = context[propName];\n                    var bindingType = definition.charAt(0);\n                    var bindingOptions = definition.charAt(1);\n                    var attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n                    // QUESTION: What about `=*`? Ignore? Throw? Support?\n                    var inputName = \"input_\" + attrName;\n                    var inputNameRename = inputName + \": \" + attrName;\n                    var outputName = \"output_\" + attrName;\n                    var outputNameRename = outputName + \": \" + attrName;\n                    var outputNameRenameChange = outputNameRename + \"Change\";\n                    switch (bindingType) {\n                        case '@':\n                        case '<':\n                            _this.inputs.push(inputName);\n                            _this.inputsRename.push(inputNameRename);\n                            _this.propertyMap[inputName] = propName;\n                            break;\n                        case '=':\n                            _this.inputs.push(inputName);\n                            _this.inputsRename.push(inputNameRename);\n                            _this.propertyMap[inputName] = propName;\n                            _this.outputs.push(outputName);\n                            _this.outputsRename.push(outputNameRenameChange);\n                            _this.propertyMap[outputName] = propName;\n                            _this.checkProperties.push(propName);\n                            _this.propertyOutputs.push(outputName);\n                            break;\n                        case '&':\n                            _this.outputs.push(outputName);\n                            _this.outputsRename.push(outputNameRename);\n                            _this.propertyMap[outputName] = propName;\n                            break;\n                        default:\n                            var json = JSON.stringify(context);\n                            throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                    }\n                });\n            }\n        };\n        /**\n         * Upgrade ng1 components into Angular.\n         */\n        UpgradeNg1ComponentAdapterBuilder.resolve = function (exportedComponents, $injector) {\n            var promises = Object.keys(exportedComponents).map(function (name) {\n                var exportedComponent = exportedComponents[name];\n                exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n                exportedComponent.extractBindings();\n                return Promise\n                    .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n                    .then(function (template) { return exportedComponent.template = template; });\n            });\n            return Promise.all(promises);\n        };\n        return UpgradeNg1ComponentAdapterBuilder;\n    }());\n    var UpgradeNg1ComponentAdapter = /** @class */ (function () {\n        function UpgradeNg1ComponentAdapter(helper, scope, template, inputs, outputs, propOuts, checkProperties, propertyMap) {\n            this.helper = helper;\n            this.template = template;\n            this.inputs = inputs;\n            this.outputs = outputs;\n            this.propOuts = propOuts;\n            this.checkProperties = checkProperties;\n            this.propertyMap = propertyMap;\n            this.controllerInstance = null;\n            this.destinationObj = null;\n            this.checkLastValues = [];\n            this.$element = null;\n            this.directive = helper.directive;\n            this.element = helper.element;\n            this.$element = helper.$element;\n            this.componentScope = scope.$new(!!this.directive.scope);\n            var controllerType = this.directive.controller;\n            if (this.directive.bindToController && controllerType) {\n                this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n                this.destinationObj = this.controllerInstance;\n            }\n            else {\n                this.destinationObj = this.componentScope;\n            }\n            for (var i = 0; i < inputs.length; i++) {\n                this[inputs[i]] = null;\n            }\n            for (var j = 0; j < outputs.length; j++) {\n                var emitter = this[outputs[j]] = new core.EventEmitter();\n                if (this.propOuts.indexOf(outputs[j]) === -1) {\n                    this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.emit(value); }; })(emitter));\n                }\n            }\n            for (var k = 0; k < propOuts.length; k++) {\n                this.checkLastValues.push(INITIAL_VALUE$1);\n            }\n        }\n        UpgradeNg1ComponentAdapter.prototype.ngOnInit = function () {\n            // Collect contents, insert and compile template\n            var attachChildNodes = this.helper.prepareTransclusion();\n            var linkFn = this.helper.compileTemplate(this.template);\n            // Instantiate controller (if not already done so)\n            var controllerType = this.directive.controller;\n            var bindToController = this.directive.bindToController;\n            if (controllerType && !bindToController) {\n                this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n            }\n            // Require other controllers\n            var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n            // Hook: $onInit\n            if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n                this.controllerInstance.$onInit();\n            }\n            // Linking\n            var link = this.directive.link;\n            var preLink = (typeof link == 'object') && link.pre;\n            var postLink = (typeof link == 'object') ? link.post : link;\n            var attrs = NOT_SUPPORTED;\n            var transcludeFn = NOT_SUPPORTED;\n            if (preLink) {\n                preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            linkFn(this.componentScope, null, { parentBoundTranscludeFn: attachChildNodes });\n            if (postLink) {\n                postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            // Hook: $postLink\n            if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n                this.controllerInstance.$postLink();\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngOnChanges = function (changes) {\n            var _this = this;\n            var ng1Changes = {};\n            Object.keys(changes).forEach(function (name) {\n                var change = changes[name];\n                _this.setComponentProperty(name, change.currentValue);\n                ng1Changes[_this.propertyMap[name]] = change;\n            });\n            if (isFunction(this.destinationObj.$onChanges)) {\n                this.destinationObj.$onChanges(ng1Changes);\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngDoCheck = function () {\n            var _this = this;\n            var destinationObj = this.destinationObj;\n            var lastValues = this.checkLastValues;\n            var checkProperties = this.checkProperties;\n            var propOuts = this.propOuts;\n            checkProperties.forEach(function (propName, i) {\n                var value = destinationObj[propName];\n                var last = lastValues[i];\n                if (!strictEquals(last, value)) {\n                    var eventEmitter = _this[propOuts[i]];\n                    eventEmitter.emit(lastValues[i] = value);\n                }\n            });\n            if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n                this.controllerInstance.$doCheck();\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngOnDestroy = function () { this.helper.onDestroy(this.componentScope, this.controllerInstance); };\n        UpgradeNg1ComponentAdapter.prototype.setComponentProperty = function (name, value) {\n            this.destinationObj[this.propertyMap[name]] = value;\n        };\n        return UpgradeNg1ComponentAdapter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var upgradeCount = 0;\n    /**\n     * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n     *\n     * The `UpgradeAdapter` allows:\n     * 1. creation of Angular component from AngularJS component directive\n     *    (See [UpgradeAdapter#upgradeNg1Component()])\n     * 2. creation of AngularJS directive from Angular component.\n     *    (See [UpgradeAdapter#downgradeNg2Component()])\n     * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n     *    coexisting in a single application.\n     *\n     * @usageNotes\n     * ### Mental Model\n     *\n     * When reasoning about how a hybrid application works it is useful to have a mental model which\n     * describes what is happening and explains what is happening at the lowest level.\n     *\n     * 1. There are two independent frameworks running in a single application, each framework treats\n     *    the other as a black box.\n     * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n     *    instantiated the element is the owner. Each framework only updates/interacts with its own\n     *    DOM elements and ignores others.\n     * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n     *    where they are instantiated.\n     * 4. Angular components always execute inside Angular framework codebase regardless of\n     *    where they are instantiated.\n     * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n     *    Angular directive, which bootstraps the AngularJS component directive in that location.\n     * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n     *    an AngularJS directive, which bootstraps the Angular component in that location.\n     * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n     *    doing the instantiation. The other framework then instantiates and owns the view for that\n     *    component. This implies that component bindings will always follow the semantics of the\n     *    instantiation framework. The syntax is always that of Angular syntax.\n     * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n     * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n     *    `$apply()`.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * module.directive('ng1Hello', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * @Component({\n     *   selector: 'ng2-comp',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n     *   directives:\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     *\n     * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     *\n     * ```\n     *\n     * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n     * [Ahead-of-Time compilation](guide/aot-compiler).\n     * @publicApi\n     */\n    var UpgradeAdapter = /** @class */ (function () {\n        function UpgradeAdapter(ng2AppModule, compilerOptions) {\n            this.ng2AppModule = ng2AppModule;\n            this.compilerOptions = compilerOptions;\n            this.idPrefix = \"NG2_UPGRADE_\" + upgradeCount++ + \"_\";\n            this.downgradedComponents = [];\n            /**\n             * An internal map of ng1 components which need to up upgraded to ng2.\n             *\n             * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n             * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n             *\n             * @internal\n             */\n            this.ng1ComponentsToBeUpgraded = {};\n            this.upgradedProviders = [];\n            this.moduleRef = null;\n            if (!ng2AppModule) {\n                throw new Error('UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n            }\n        }\n        /**\n         * Allows Angular Component to be used from AngularJS.\n         *\n         * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n         * Angular Component. The adapter will bootstrap Angular component from within the\n         * AngularJS template.\n         *\n         * @usageNotes\n         * ### Mental Model\n         *\n         * 1. The component is instantiated by being listed in AngularJS template. This means that the\n         *    host element is controlled by AngularJS, but the component's view will be controlled by\n         *    Angular.\n         * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n         *    syntax. This has to be done, this way because we must follow Angular components do not\n         *    declare how the attributes should be interpreted.\n         * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n         *    by way of the `ControlValueAccessor` interface from @angular/forms. Only components that\n         *    implement this interface are eligible.\n         *\n         * ### Supported Features\n         *\n         * - Bindings:\n         *   - Attribute: `<comp name=\"World\">`\n         *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n         *   - Expression:  `<comp [name]=\"username\">`\n         *   - Event:  `<comp (close)=\"doSomething()\">`\n         *   - ng-model: `<comp ng-model=\"name\">`\n         * - Content projection: yes\n         *\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n         * const module = angular.module('myExample', []);\n         * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n         *\n         * @Component({\n         *   selector: 'greet',\n         *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n         * })\n         * class Greeter {\n         *   @Input() salutation: string;\n         *   @Input() name: string;\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Greeter],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML =\n         *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.downgradeNg2Component = function (component) {\n            this.downgradedComponents.push(component);\n            return downgradeComponent({ component: component });\n        };\n        /**\n         * Allows AngularJS Component to be used from Angular.\n         *\n         * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n         * directive. The adapter will bootstrap AngularJS component from within the Angular\n         * template.\n         *\n         * @usageNotes\n         * ### Mental Model\n         *\n         * 1. The component is instantiated by being listed in Angular template. This means that the\n         *    host element is controlled by Angular, but the component's view will be controlled by\n         *    AngularJS.\n         *\n         * ### Supported Features\n         *\n         * - Bindings:\n         *   - Attribute: `<comp name=\"World\">`\n         *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n         *   - Expression:  `<comp [name]=\"username\">`\n         *   - Event:  `<comp (close)=\"doSomething()\">`\n         * - Transclusion: yes\n         * - Only some of the features of\n         *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n         *   supported:\n         *   - `compile`: not supported because the host element is owned by Angular, which does\n         *     not allow modifying DOM structure during compilation.\n         *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n         *   - `controllerAs`: supported.\n         *   - `bindToController`: supported.\n         *   - `link`: supported. (NOTE: only pre-link function is supported.)\n         *   - `name`: supported.\n         *   - `priority`: ignored.\n         *   - `replace`: not supported.\n         *   - `require`: supported.\n         *   - `restrict`: must be set to 'E'.\n         *   - `scope`: supported.\n         *   - `template`: supported.\n         *   - `templateUrl`: supported.\n         *   - `terminal`: ignored.\n         *   - `transclude`: supported.\n         *\n         *\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n         * const module = angular.module('myExample', []);\n         *\n         * module.directive('greet', function() {\n         *   return {\n         *     scope: {salutation: '=', name: '=' },\n         *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n         *   };\n         * });\n         *\n         * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n         *\n         * @Component({\n         *   selector: 'ng2',\n         *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n         * })\n         * class Ng2Component {\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML = '<ng2></ng2>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.upgradeNg1Component = function (name) {\n            if (this.ng1ComponentsToBeUpgraded.hasOwnProperty(name)) {\n                return this.ng1ComponentsToBeUpgraded[name].type;\n            }\n            else {\n                return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n                    .type;\n            }\n        };\n        /**\n         * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n         * Use this instead of `angular.mock.module()` to load the upgrade module into\n         * the AngularJS testing injector.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```\n         * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n         *\n         * // configure the adapter with upgrade/downgrade components and services\n         * upgradeAdapter.downgradeNg2Component(MyComponent);\n         *\n         * let upgradeAdapterRef: UpgradeAdapterRef;\n         * let $compile, $rootScope;\n         *\n         * // We must register the adapter before any calls to `inject()`\n         * beforeEach(() => {\n         *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n         * });\n         *\n         * beforeEach(inject((_$compile_, _$rootScope_) => {\n         *   $compile = _$compile_;\n         *   $rootScope = _$rootScope_;\n         * }));\n         *\n         * it(\"says hello\", (done) => {\n         *   upgradeAdapterRef.ready(() => {\n         *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n         *     $rootScope.$apply();\n         *     expect(element.html()).toContain(\"Hello World\");\n         *     done();\n         *   })\n         * });\n         *\n         * ```\n         *\n         * @param modules any AngularJS modules that the upgrade module should depend upon\n         * @returns an `UpgradeAdapterRef`, which lets you register a `ready()` callback to\n         * run assertions once the Angular components are ready to test through AngularJS.\n         */\n        UpgradeAdapter.prototype.registerForNg1Tests = function (modules) {\n            var _this = this;\n            var windowNgMock = window['angular'].mock;\n            if (!windowNgMock || !windowNgMock.module) {\n                throw new Error('Failed to find \\'angular.mock.module\\'.');\n            }\n            this.declareNg1Module(modules);\n            windowNgMock.module(this.ng1Module.name);\n            var upgrade = new UpgradeAdapterRef();\n            this.ng2BootstrapDeferred.promise.then(function (ng1Injector) { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); }, onError);\n            return upgrade;\n        };\n        /**\n         * Bootstrap a hybrid AngularJS / Angular application.\n         *\n         * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n         * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n         * AngularJS, this bootstrap is asynchronous.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         * const module = angular.module('myExample', []);\n         * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n         *\n         * module.directive('ng1', function() {\n         *   return {\n         *      scope: { title: '=' },\n         *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n         *   };\n         * });\n         *\n         *\n         * @Component({\n         *   selector: 'ng2',\n         *   inputs: ['name'],\n         *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n         * })\n         * class Ng2 {\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\n         *       \"ng2[ng1[Hello World!](transclude)](project)\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.bootstrap = function (element$$1, modules, config) {\n            var _this = this;\n            this.declareNg1Module(modules);\n            var upgrade = new UpgradeAdapterRef();\n            // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n            var windowAngular = window /** TODO #???? */['angular'];\n            windowAngular.resumeBootstrap = undefined;\n            this.ngZone.run(function () { bootstrap(element$$1, [_this.ng1Module.name], config); });\n            var ng1BootstrapPromise = new Promise(function (resolve) {\n                if (windowAngular.resumeBootstrap) {\n                    var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                    windowAngular.resumeBootstrap = function () {\n                        windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                        var r = windowAngular.resumeBootstrap.apply(this, arguments);\n                        resolve();\n                        return r;\n                    };\n                }\n                else {\n                    resolve();\n                }\n            });\n            Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(function (_a) {\n                var _b = __read(_a, 1), ng1Injector = _b[0];\n                element(element$$1).data(controllerKey(INJECTOR_KEY), _this.moduleRef.injector);\n                _this.moduleRef.injector.get(core.NgZone).run(function () { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); });\n            }, onError);\n            return upgrade;\n        };\n        /**\n         * Allows AngularJS service to be accessible from Angular.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```\n         * class Login { ... }\n         * class Server { ... }\n         *\n         * @Injectable()\n         * class Example {\n         *   constructor(@Inject('server') server, login: Login) {\n         *     ...\n         *   }\n         * }\n         *\n         * const module = angular.module('myExample', []);\n         * module.service('server', Server);\n         * module.service('login', Login);\n         *\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         * adapter.upgradeNg1Provider('server');\n         * adapter.upgradeNg1Provider('login', {asToken: Login});\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n         *   const example: Example = ref.ng2Injector.get(Example);\n         * });\n         *\n         * ```\n         */\n        UpgradeAdapter.prototype.upgradeNg1Provider = function (name, options) {\n            var token = options && options.asToken || name;\n            this.upgradedProviders.push({\n                provide: token,\n                useFactory: function ($injector) { return $injector.get(name); },\n                deps: [$INJECTOR]\n            });\n        };\n        /**\n         * Allows Angular service to be accessible from AngularJS.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```\n         * class Example {\n         * }\n         *\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         *\n         * const module = angular.module('myExample', []);\n         * module.factory('example', adapter.downgradeNg2Provider(Example));\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n         *   const example: Example = ref.ng1Injector.get('example');\n         * });\n         *\n         * ```\n         */\n        UpgradeAdapter.prototype.downgradeNg2Provider = function (token) { return downgradeInjectable(token); };\n        /**\n         * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n         * hybrid application.\n         *\n         * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n         *\n         * @param modules The AngularJS modules that this upgrade module should depend upon.\n         * @returns The AngularJS upgrade module that is declared by this method\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```\n         * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n         * upgradeAdapter.declareNg1Module(['heroApp']);\n         * ```\n         */\n        UpgradeAdapter.prototype.declareNg1Module = function (modules) {\n            var _this = this;\n            if (modules === void 0) { modules = []; }\n            var delayApplyExps = [];\n            var original$applyFn;\n            var rootScopePrototype;\n            var rootScope;\n            var upgradeAdapter = this;\n            var ng1Module = this.ng1Module = module$1(this.idPrefix, modules);\n            var platformRef = platformBrowserDynamic.platformBrowserDynamic();\n            this.ngZone = new core.NgZone({ enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec') });\n            this.ng2BootstrapDeferred = new Deferred();\n            ng1Module.factory(INJECTOR_KEY, function () { return _this.moduleRef.injector.get(core.Injector); })\n                .factory(LAZY_MODULE_REF, [\n                INJECTOR_KEY,\n                function (injector) { return ({ injector: injector, needsNgZone: false }); }\n            ])\n                .constant(NG_ZONE_KEY, this.ngZone)\n                .factory(COMPILER_KEY, function () { return _this.moduleRef.injector.get(core.Compiler); })\n                .config([\n                '$provide', '$injector',\n                function (provide, ng1Injector) {\n                    provide.decorator($ROOT_SCOPE, [\n                        '$delegate',\n                        function (rootScopeDelegate) {\n                            // Capture the root apply so that we can delay first call to $apply until we\n                            // bootstrap Angular and then we replay and restore the $apply.\n                            rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                            if (rootScopePrototype.hasOwnProperty('$apply')) {\n                                original$applyFn = rootScopePrototype.$apply;\n                                rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };\n                            }\n                            else {\n                                throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                            }\n                            return rootScope = rootScopeDelegate;\n                        }\n                    ]);\n                    if (ng1Injector.has($$TESTABILITY)) {\n                        provide.decorator($$TESTABILITY, [\n                            '$delegate',\n                            function (testabilityDelegate) {\n                                var originalWhenStable = testabilityDelegate.whenStable;\n                                // Cannot use arrow function below because we need the context\n                                var newWhenStable = function (callback) {\n                                    originalWhenStable.call(this, function () {\n                                        var ng2Testability = upgradeAdapter.moduleRef.injector.get(core.Testability);\n                                        if (ng2Testability.isStable()) {\n                                            callback.apply(this, arguments);\n                                        }\n                                        else {\n                                            ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                                        }\n                                    });\n                                };\n                                testabilityDelegate.whenStable = newWhenStable;\n                                return testabilityDelegate;\n                            }\n                        ]);\n                    }\n                }\n            ]);\n            ng1Module.run([\n                '$injector', '$rootScope',\n                function (ng1Injector, rootScope) {\n                    UpgradeNg1ComponentAdapterBuilder.resolve(_this.ng1ComponentsToBeUpgraded, ng1Injector)\n                        .then(function () {\n                        // Note: There is a bug in TS 2.4 that prevents us from\n                        // inlining this into @NgModule\n                        // TODO(tbosch): find or file a bug against TypeScript for this.\n                        var ngModule = {\n                            providers: [\n                                { provide: $INJECTOR, useFactory: function () { return ng1Injector; } },\n                                { provide: $COMPILE, useFactory: function () { return ng1Injector.get($COMPILE); } },\n                                _this.upgradedProviders\n                            ],\n                            imports: [_this.ng2AppModule],\n                            entryComponents: _this.downgradedComponents\n                        };\n                        // At this point we have ng1 injector and we have prepared\n                        // ng1 components to be upgraded, we now can bootstrap ng2.\n                        var DynamicNgUpgradeModule = /** @class */ (function () {\n                            function DynamicNgUpgradeModule() {\n                            }\n                            DynamicNgUpgradeModule.prototype.ngDoBootstrap = function () { };\n                            DynamicNgUpgradeModule = __decorate([\n                                core.NgModule(__assign({ jit: true }, ngModule)),\n                                __metadata(\"design:paramtypes\", [])\n                            ], DynamicNgUpgradeModule);\n                            return DynamicNgUpgradeModule;\n                        }());\n                        platformRef\n                            .bootstrapModule(DynamicNgUpgradeModule, [_this.compilerOptions, { ngZone: _this.ngZone }])\n                            .then(function (ref) {\n                            _this.moduleRef = ref;\n                            _this.ngZone.run(function () {\n                                if (rootScopePrototype) {\n                                    rootScopePrototype.$apply = original$applyFn; // restore original $apply\n                                    while (delayApplyExps.length) {\n                                        rootScope.$apply(delayApplyExps.shift());\n                                    }\n                                    rootScopePrototype = null;\n                                }\n                            });\n                        })\n                            .then(function () { return _this.ng2BootstrapDeferred.resolve(ng1Injector); }, onError)\n                            .then(function () {\n                            var subscription = _this.ngZone.onMicrotaskEmpty.subscribe({ next: function () { return rootScope.$digest(); } });\n                            rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                        });\n                    })\n                        .catch(function (e) { return _this.ng2BootstrapDeferred.reject(e); });\n                }\n            ]);\n            return ng1Module;\n        };\n        return UpgradeAdapter;\n    }());\n    /**\n     * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n     *\n     * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n     * [Ahead-of-Time compilation](guide/aot-compiler).\n     * @publicApi\n     */\n    var UpgradeAdapterRef = /** @class */ (function () {\n        function UpgradeAdapterRef() {\n            /* @internal */\n            this._readyFn = null;\n            this.ng1RootScope = null;\n            this.ng1Injector = null;\n            this.ng2ModuleRef = null;\n            this.ng2Injector = null;\n        }\n        /* @internal */\n        UpgradeAdapterRef.prototype._bootstrapDone = function (ngModuleRef, ng1Injector) {\n            this.ng2ModuleRef = ngModuleRef;\n            this.ng2Injector = ngModuleRef.injector;\n            this.ng1Injector = ng1Injector;\n            this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n            this._readyFn && this._readyFn(this);\n        };\n        /**\n         * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n         * application has been bootstrapped.\n         *\n         * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n         * require a call to `$apply()`.\n         */\n        UpgradeAdapterRef.prototype.ready = function (fn) { this._readyFn = fn; };\n        /**\n         * Dispose of running hybrid AngularJS / Angular application.\n         */\n        UpgradeAdapterRef.prototype.dispose = function () {\n            this.ng1Injector.get($ROOT_SCOPE).$destroy();\n            this.ng2ModuleRef.destroy();\n        };\n        return UpgradeAdapterRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only re-exports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.VERSION = VERSION;\n    exports.UpgradeAdapter = UpgradeAdapter;\n    exports.UpgradeAdapterRef = UpgradeAdapterRef;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=upgrade.umd.js.map\n"]}
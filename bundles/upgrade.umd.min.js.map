{"version":3,"sources":["packages/upgrade/upgrade.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","upgrade","core","platformBrowserDynamic","this","VERSION","Version","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","noNg","Error","angular","bootstrap","element","version","undefined","resumeBootstrap","getTestability","window","e","$COMPILE","$CONTROLLER","$INJECTOR","$SCOPE","INJECTOR_KEY","REQUIRE_INJECTOR","PropertyBinding","prop","attr","parseBinding","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","bindAttr","bindonAttr","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","onError","console","error","stack","log","controllerKey","name","getComponentName","component","overriddenName","toString","split","isFunction","value","Deferred","_this","promise","Promise","res","rej","resolve","reject","strictEquals","val1","val2","_matches","INITIAL_VALUE","__UNINITIALIZED__","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$injector","$compile","$parse","componentFactory","wrapCallback","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compileContents","compiledProjectableNodes","linkFns","groupProjectableNodes","map","nodes","empty","forEach","linkFn","clone","push","append","createComponent","projectableNodes","childInjector","Injector","create","providers","provide","useValue","parent","componentRef","viewChangeDetector","injector","get","ChangeDetectorRef","changeDetector","changeDetectorRef","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","hookupNgModel","supportsNgModel","writeValue","registerOnChange","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","setupInputs","needsNgZone","propagateDigest","inputs","_loop_1","prevValue","input","propName","templateName","expr","observeFn_1","currValue","updateInput","$observe","unwatch_1","this_1","$watch","watchFn","detectChanges","componentType","ngOnChanges","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","setupOutputs","outputs","j","output","substring","subscribeToOutput","isAssignment","getter","setter","emitter","subscribe","next","v","$event","registerCleanup","destroyComponentRef","destroy","destroyed","on","$destroy","$on","unregisterApplication","getInjector","SimpleChange","groupNodesBySelector","ngContentSelectors","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","contents","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","ParentInjectorPromise","injectorKey","callbacks","data","then","callback","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","link","notSupported","replace","terminal","getTemplate","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","$httpBackend","status","response","put","buildController","controllerType","$scope","controller","controllerAs","compileTemplate","compileHtml","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","attachChildrenFn","cloneAttachFn","$template","slots_1","slotMap_1","filledSlots_1","keys","slotName","optional","directiveNormalize","_","letter","nodeName","toLowerCase","filter","cloneAttach","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","controllerInstance","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","isMap","requiredControllersMap_1","key","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","Array","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","inheritedData","property","feature","CAMEL_CASE","INITIAL_VALUE$1","UpgradeNg1ComponentAdapterBuilder","inputsRename","outputsRename","propertyOutputs","checkProperties","propertyMap","self","all","MyClass","helper","UpgradeNg1ComponentAdapter","ngOnInit","ngDoCheck","ngOnDestroy","decorators","type","Directive","args","jit","ctorParameters","Inject","ElementRef","extractBindings","btcIsObject","context","definition","bindingType","bindingOptions","attrName","inputName","inputNameRename","outputName","outputNameRename","outputNameRenameChange","json","JSON","stringify","exportedComponents","promises","exportedComponent","propOuts","destinationObj","checkLastValues","EventEmitter","indexOf","setComponentProperty","emit","k","attachChildNodes","$onInit","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ng1Changes","change","currentValue","$onChanges","lastValues","$doCheck","$onDestroy","upgradeCount","UpgradeAdapter","ng2AppModule","compilerOptions","idPrefix","downgradedComponents","ng1ComponentsToBeUpgraded","upgradedProviders","moduleRef","downgradeNg2Component","downgradeComponent","info","directiveFactory","ngZone","cb","restrict","required","ranAsync","lazyModuleRef","doDowngrade","ComponentFactoryResolver","resolveComponentFactory","injectorPromise","facade","$evalAsync","downgradeFn","NgZone","isInAngularZone","run","isThenable","obj","upgradeNg1Component","registerForNg1Tests","modules","windowNgMock","mock","declareNg1Module","ng1Module","UpgradeAdapterRef","ng2BootstrapDeferred","ng1Injector","_bootstrapDone","element$$1","config","windowAngular","ng1BootstrapPromise","originalResumeBootstrap_1","r","_a","__read","o","m","Symbol","iterator","ar","done","upgradeNg1Provider","options","asToken","useFactory","deps","downgradeNg2Provider","token","downgradeInjectable","original$applyFn","rootScopePrototype","delayApplyExps","upgradeAdapter","platformRef","enableLongStackTrace","Zone","constant","Compiler","decorator","rootScopeDelegate","constructor","$apply","exp","has","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","rootScope","ngModule","imports","entryComponents","DynamicNgUpgradeModule","ngDoBootstrap","NgModule","bootstrapModule","ref","shift","subscription","onMicrotaskEmpty","$digest","unsubscribe","catch","_readyFn","ng1RootScope","ng2ModuleRef","ng2Injector","ngModuleRef","ready","fn","dispose","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.1.4\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser-dynamic')) :\n    typeof define === 'function' && define.amd ? define('@angular/upgrade', ['exports', '@angular/core', '@angular/platform-browser-dynamic'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.upgrade = {}),global.ng.core,global.ng.platformBrowserDynamic));\n}(this, (function (exports,core,platformBrowserDynamic) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var VERSION = new core.Version('6.1.4');\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noNg() {\n        throw new Error('AngularJS v1.x is not loaded!');\n    }\n    var angular = {\n        bootstrap: noNg,\n        module: noNg,\n        element: noNg,\n        version: undefined,\n        resumeBootstrap: noNg,\n        getTestability: noNg\n    };\n    try {\n        if (window.hasOwnProperty('angular')) {\n            angular = window.angular;\n        }\n    }\n    catch (e) {\n        // ignore in CJS mode.\n    }\n    var bootstrap = function (e, modules, config) {\n        return angular.bootstrap(e, modules, config);\n    };\n    var module$1 = function (prefix, dependencies) {\n        return angular.module(prefix, dependencies);\n    };\n    var element = function (e) { return angular.element(e); };\n    var version = angular.version;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var $COMPILE = '$compile';\n    var $CONTROLLER = '$controller';\n    var $HTTP_BACKEND = '$httpBackend';\n    var $INJECTOR = '$injector';\n    var $PARSE = '$parse';\n    var $ROOT_SCOPE = '$rootScope';\n    var $SCOPE = '$scope';\n    var $TEMPLATE_CACHE = '$templateCache';\n    var $$TESTABILITY = '$$testability';\n    var COMPILER_KEY = '$$angularCompiler';\n    var INJECTOR_KEY = '$$angularInjector';\n    var LAZY_MODULE_REF = '$$angularLazyModuleRef';\n    var NG_ZONE_KEY = '$$angularNgZone';\n    var REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\n    var REQUIRE_NG_MODEL = '?ngModel';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A `PropertyBinding` represents a mapping between a property name\n     * and an attribute name. It is parsed from a string of the form\n     * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n     * and attribute have the same identifier.\n     */\n    var PropertyBinding = /** @class */ (function () {\n        function PropertyBinding(prop, attr) {\n            this.prop = prop;\n            this.attr = attr;\n            this.parseBinding();\n        }\n        PropertyBinding.prototype.parseBinding = function () {\n            this.bracketAttr = \"[\" + this.attr + \"]\";\n            this.parenAttr = \"(\" + this.attr + \")\";\n            this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n            var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n            this.onAttr = \"on\" + capitalAttr;\n            this.bindAttr = \"bind\" + capitalAttr;\n            this.bindonAttr = \"bindon\" + capitalAttr;\n        };\n        return PropertyBinding;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\n    var DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n    function onError(e) {\n        // TODO: (misko): We seem to not have a stack trace here!\n        if (console.error) {\n            console.error(e, e.stack);\n        }\n        else {\n            // tslint:disable-next-line:no-console\n            console.log(e, e.stack);\n        }\n        throw e;\n    }\n    function controllerKey(name) {\n        return '$' + name + 'Controller';\n    }\n    function directiveNormalize(name) {\n        return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n            .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n    }\n    function getComponentName(component) {\n        // Return the name of the component or the first line of its stringified version.\n        return component.overriddenName || component.name || component.toString().split('\\n')[0];\n    }\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n    var Deferred = /** @class */ (function () {\n        function Deferred() {\n            var _this = this;\n            this.promise = new Promise(function (res, rej) {\n                _this.resolve = res;\n                _this.reject = rej;\n            });\n        }\n        return Deferred;\n    }());\n    /**\n     * @return Whether the passed-in component implements the subset of the\n     *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n     *     compatibility.\n     */\n    function supportsNgModel(component) {\n        return typeof component.writeValue === 'function' &&\n            typeof component.registerOnChange === 'function';\n    }\n    /**\n     * Glue the AngularJS `NgModelController` (if it exists) to the component\n     * (if it implements the needed subset of the `ControlValueAccessor` interface).\n     */\n    function hookupNgModel(ngModel, component) {\n        if (ngModel && supportsNgModel(component)) {\n            ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n            component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n            if (typeof component.registerOnTouched === 'function') {\n                component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n            }\n        }\n    }\n    /**\n     * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n     */\n    function strictEquals(val1, val2) {\n        return val1 === val2 || (val1 !== val1 && val2 !== val2);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var INITIAL_VALUE = {\n        __UNINITIALIZED__: true\n    };\n    var DowngradeComponentAdapter = /** @class */ (function () {\n        function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n            this.element = element;\n            this.attrs = attrs;\n            this.scope = scope;\n            this.ngModel = ngModel;\n            this.parentInjector = parentInjector;\n            this.$injector = $injector;\n            this.$compile = $compile;\n            this.$parse = $parse;\n            this.componentFactory = componentFactory;\n            this.wrapCallback = wrapCallback;\n            this.implementsOnChanges = false;\n            this.inputChangeCount = 0;\n            this.inputChanges = {};\n            this.componentScope = scope.$new();\n        }\n        DowngradeComponentAdapter.prototype.compileContents = function () {\n            var _this = this;\n            var compiledProjectableNodes = [];\n            var projectableNodes = this.groupProjectableNodes();\n            var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n            this.element.empty();\n            linkFns.forEach(function (linkFn) {\n                linkFn(_this.scope, function (clone) {\n                    compiledProjectableNodes.push(clone);\n                    _this.element.append(clone);\n                });\n            });\n            return compiledProjectableNodes;\n        };\n        DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n            var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n            var childInjector = core.Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n            this.componentRef =\n                this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n            this.viewChangeDetector = this.componentRef.injector.get(core.ChangeDetectorRef);\n            this.changeDetector = this.componentRef.changeDetectorRef;\n            this.component = this.componentRef.instance;\n            // testability hook is commonly added during component bootstrap in\n            // packages/core/src/application_ref.bootstrap()\n            // in downgraded application, component creation will take place here as well as adding the\n            // testability hook.\n            var testability = this.componentRef.injector.get(core.Testability, null);\n            if (testability) {\n                this.componentRef.injector.get(core.TestabilityRegistry)\n                    .registerApplication(this.componentRef.location.nativeElement, testability);\n            }\n            hookupNgModel(this.ngModel, this.component);\n        };\n        DowngradeComponentAdapter.prototype.setupInputs = function (needsNgZone, propagateDigest) {\n            var _this = this;\n            if (propagateDigest === void 0) { propagateDigest = true; }\n            var attrs = this.attrs;\n            var inputs = this.componentFactory.inputs || [];\n            var _loop_1 = function (i) {\n                var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n                var expr = null;\n                if (attrs.hasOwnProperty(input.attr)) {\n                    var observeFn_1 = (function (prop) {\n                        var prevValue = INITIAL_VALUE;\n                        return function (currValue) {\n                            // Initially, both `$observe()` and `$watch()` will call this function.\n                            if (!strictEquals(prevValue, currValue)) {\n                                if (prevValue === INITIAL_VALUE) {\n                                    prevValue = currValue;\n                                }\n                                _this.updateInput(prop, prevValue, currValue);\n                                prevValue = currValue;\n                            }\n                        };\n                    })(input.prop);\n                    attrs.$observe(input.attr, observeFn_1);\n                    // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                    // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                    // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                    var unwatch_1 = this_1.componentScope.$watch(function () {\n                        unwatch_1();\n                        unwatch_1 = null;\n                        observeFn_1(attrs[input.attr]);\n                    });\n                }\n                else if (attrs.hasOwnProperty(input.bindAttr)) {\n                    expr = attrs[input.bindAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                    expr = attrs[input.bracketAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                    expr = attrs[input.bindonAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                    expr = attrs[input.bracketParenAttr];\n                }\n                if (expr != null) {\n                    var watchFn = (function (prop) { return function (currValue, prevValue) {\n                        return _this.updateInput(prop, prevValue, currValue);\n                    }; })(input.prop);\n                    this_1.componentScope.$watch(expr, watchFn);\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < inputs.length; i++) {\n                _loop_1(i);\n            }\n            // Invoke `ngOnChanges()` and Change Detection (when necessary)\n            var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n            var prototype = this.componentFactory.componentType.prototype;\n            this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n            this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n                // Invoke `ngOnChanges()`\n                if (_this.implementsOnChanges) {\n                    var inputChanges = _this.inputChanges;\n                    _this.inputChanges = {};\n                    _this.component.ngOnChanges(inputChanges);\n                }\n                _this.viewChangeDetector.markForCheck();\n                // If opted out of propagating digests, invoke change detection when inputs change.\n                if (!propagateDigest) {\n                    detectChanges();\n                }\n            }));\n            // If not opted out of propagating digests, invoke change detection on every digest\n            if (propagateDigest) {\n                this.componentScope.$watch(this.wrapCallback(detectChanges));\n            }\n            // If necessary, attach the view so that it will be dirty-checked.\n            // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n            if (needsNgZone || !propagateDigest) {\n                var unwatch_2 = this.componentScope.$watch(function () {\n                    unwatch_2();\n                    unwatch_2 = null;\n                    var appRef = _this.parentInjector.get(core.ApplicationRef);\n                    appRef.attachView(_this.componentRef.hostView);\n                });\n            }\n        };\n        DowngradeComponentAdapter.prototype.setupOutputs = function () {\n            var attrs = this.attrs;\n            var outputs = this.componentFactory.outputs || [];\n            for (var j = 0; j < outputs.length; j++) {\n                var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n                var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n                var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n                // order below is important - first update bindings then evaluate expressions\n                if (attrs.hasOwnProperty(bindonAttr)) {\n                    this.subscribeToOutput(output, attrs[bindonAttr], true);\n                }\n                if (attrs.hasOwnProperty(bracketParenAttr)) {\n                    this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n                }\n                if (attrs.hasOwnProperty(output.onAttr)) {\n                    this.subscribeToOutput(output, attrs[output.onAttr]);\n                }\n                if (attrs.hasOwnProperty(output.parenAttr)) {\n                    this.subscribeToOutput(output, attrs[output.parenAttr]);\n                }\n            }\n        };\n        DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {\n            var _this = this;\n            if (isAssignment === void 0) { isAssignment = false; }\n            var getter = this.$parse(expr);\n            var setter = getter.assign;\n            if (isAssignment && !setter) {\n                throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n            }\n            var emitter = this.component[output.prop];\n            if (emitter) {\n                emitter.subscribe({\n                    next: isAssignment ? function (v) { return setter(_this.scope, v); } :\n                        function (v) { return getter(_this.scope, { '$event': v }); }\n                });\n            }\n            else {\n                throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this.componentFactory.componentType) + \"'!\");\n            }\n        };\n        DowngradeComponentAdapter.prototype.registerCleanup = function () {\n            var _this = this;\n            var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n            var destroyed = false;\n            this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });\n            this.componentScope.$on('$destroy', function () {\n                if (!destroyed) {\n                    destroyed = true;\n                    _this.componentRef.injector.get(core.TestabilityRegistry)\n                        .unregisterApplication(_this.componentRef.location.nativeElement);\n                    destroyComponentRef();\n                }\n            });\n        };\n        DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n        DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n            if (this.implementsOnChanges) {\n                this.inputChanges[prop] = new core.SimpleChange(prevValue, currValue, prevValue === currValue);\n            }\n            this.inputChangeCount++;\n            this.component[prop] = currValue;\n        };\n        DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n            var ngContentSelectors = this.componentFactory.ngContentSelectors;\n            return groupNodesBySelector(ngContentSelectors, this.element.contents());\n        };\n        return DowngradeComponentAdapter;\n    }());\n    /**\n     * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n     */\n    function groupNodesBySelector(ngContentSelectors, nodes) {\n        var projectableNodes = [];\n        for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n            projectableNodes[i] = [];\n        }\n        for (var j = 0, jj = nodes.length; j < jj; ++j) {\n            var node = nodes[j];\n            var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n            if (ngContentIndex != null) {\n                projectableNodes[ngContentIndex].push(node);\n            }\n        }\n        return projectableNodes;\n    }\n    function findMatchingNgContentIndex(element, ngContentSelectors) {\n        var ngContentIndices = [];\n        var wildcardNgContentIndex = -1;\n        for (var i = 0; i < ngContentSelectors.length; i++) {\n            var selector = ngContentSelectors[i];\n            if (selector === '*') {\n                wildcardNgContentIndex = i;\n            }\n            else {\n                if (matchesSelector(element, selector)) {\n                    ngContentIndices.push(i);\n                }\n            }\n        }\n        ngContentIndices.sort();\n        if (wildcardNgContentIndex !== -1) {\n            ngContentIndices.push(wildcardNgContentIndex);\n        }\n        return ngContentIndices.length ? ngContentIndices[0] : null;\n    }\n    var _matches;\n    function matchesSelector(el, selector) {\n        if (!_matches) {\n            var elProto = Element.prototype;\n            _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n                elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n        }\n        return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function that allows an Angular component to be used from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function to be used for registering\n     * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n     *\n     * ### Examples\n     *\n     * Let's assume that you have an Angular component called `ng2Heroes` that needs\n     * to be made available in AngularJS templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n     *\n     * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n     * that will make this Angular component available inside AngularJS templates.\n     * The `downgradeComponent()` function returns a factory function that we\n     * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n     *\n     * @param info contains information about the Component that is being downgraded:\n     *\n     * * `component: Type<any>`: The type of the Component that will be downgraded\n     * * `propagateDigest?: boolean`: Whether to perform {@link ChangeDetectorRef#detectChanges\n     *   change detection} on the component on every\n     *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n     *   change detection will still be performed when any of the component's inputs changes.\n     *   (Default: true)\n     *\n     * @returns a factory function that can be used to register the component in an\n     * AngularJS module.\n     *\n     * @experimental\n     */\n    function downgradeComponent(info) {\n        var directiveFactory = function ($compile, $injector, $parse) {\n            // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n            // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n            // (except if explicitly escaped, in which case we shouldn't force it back in).\n            // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n            // Angular zone.\n            var needsNgZone = false;\n            var wrapCallback = function (cb) { return cb; };\n            var ngZone;\n            return {\n                restrict: 'E',\n                terminal: true,\n                require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n                link: function (scope, element, attrs, required) {\n                    // We might have to compile the contents asynchronously, because this might have been\n                    // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                    // been compiled.\n                    var ngModel = required[1];\n                    var parentInjector = required[0];\n                    var ranAsync = false;\n                    if (!parentInjector) {\n                        var lazyModuleRef = $injector.get(LAZY_MODULE_REF);\n                        needsNgZone = lazyModuleRef.needsNgZone;\n                        parentInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                    }\n                    var doDowngrade = function (injector) {\n                        var componentFactoryResolver = injector.get(core.ComponentFactoryResolver);\n                        var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);\n                        if (!componentFactory) {\n                            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                        }\n                        var injectorPromise = new ParentInjectorPromise(element);\n                        var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                        var projectableNodes = facade.compileContents();\n                        facade.createComponent(projectableNodes);\n                        facade.setupInputs(needsNgZone, info.propagateDigest);\n                        facade.setupOutputs();\n                        facade.registerCleanup();\n                        injectorPromise.resolve(facade.getInjector());\n                        if (ranAsync) {\n                            // If this is run async, it is possible that it is not run inside a\n                            // digest and initial input values will not be detected.\n                            scope.$evalAsync(function () { });\n                        }\n                    };\n                    var downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                        if (!ngZone) {\n                            ngZone = injector.get(core.NgZone);\n                            wrapCallback = function (cb) { return function () {\n                                return core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                            }; };\n                        }\n                        wrapCallback(function () { return doDowngrade(injector); })();\n                    };\n                    if (isThenable(parentInjector)) {\n                        parentInjector.then(downgradeFn);\n                    }\n                    else {\n                        downgradeFn(parentInjector);\n                    }\n                    ranAsync = true;\n                }\n            };\n        };\n        // bracket-notation because of closure - see #14441\n        directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n        return directiveFactory;\n    }\n    /**\n     * Synchronous promise-like object to wrap parent injectors,\n     * to preserve the synchronous nature of Angular 1's $compile.\n     */\n    var ParentInjectorPromise = /** @class */ (function () {\n        function ParentInjectorPromise(element) {\n            this.element = element;\n            this.injectorKey = controllerKey(INJECTOR_KEY);\n            this.callbacks = [];\n            // Store the promise on the element.\n            element.data(this.injectorKey, this);\n        }\n        ParentInjectorPromise.prototype.then = function (callback) {\n            if (this.injector) {\n                callback(this.injector);\n            }\n            else {\n                this.callbacks.push(callback);\n            }\n        };\n        ParentInjectorPromise.prototype.resolve = function (injector) {\n            this.injector = injector;\n            // Store the real injector on the element.\n            this.element.data(this.injectorKey, injector);\n            // Release the element to prevent memory leaks.\n            this.element = null;\n            // Run the queued callbacks.\n            this.callbacks.forEach(function (callback) { return callback(injector); });\n            this.callbacks.length = 0;\n        };\n        return ParentInjectorPromise;\n    }());\n    function isThenable(obj) {\n        return isFunction(obj.then);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function to allow an Angular service to be accessible from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function that provides access to the Angular\n     * service identified by the `token` parameter.\n     *\n     * ### Examples\n     *\n     * First ensure that the service to be downgraded is provided in an `NgModule`\n     * that will be part of the upgrade application. For example, let's assume we have\n     * defined `HeroesService`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n     *\n     * and that we have included this in our upgrade app `NgModule`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n     *\n     * Now we can register the `downgradeInjectable` factory function for the service\n     * on an AngularJS module.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n     *\n     * Inside an AngularJS component's controller we can get hold of the\n     * downgraded service via the name we gave when downgrading.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n     *\n     * @param token an `InjectionToken` that identifies a service provided from Angular.\n     *\n     * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n     * used to register the service on an AngularJS module.\n     *\n     * @experimental\n     */\n    function downgradeInjectable(token) {\n        var factory = function (i) { return i.get(token); };\n        factory['$inject'] = [INJECTOR_KEY];\n        return factory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Constants\n    var REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n    // Classes\n    var UpgradeHelper = /** @class */ (function () {\n        function UpgradeHelper(injector, name, elementRef, directive) {\n            this.injector = injector;\n            this.name = name;\n            this.$injector = injector.get($INJECTOR);\n            this.$compile = this.$injector.get($COMPILE);\n            this.$controller = this.$injector.get($CONTROLLER);\n            this.element = elementRef.nativeElement;\n            this.$element = element(this.element);\n            this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n        }\n        UpgradeHelper.getDirective = function ($injector, name) {\n            var directives = $injector.get(name + 'Directive');\n            if (directives.length > 1) {\n                throw new Error(\"Only support single directive definition for: \" + name);\n            }\n            var directive = directives[0];\n            // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n            // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n            if (directive.compile && !directive.link)\n                notSupported(name, 'compile');\n            if (directive.replace)\n                notSupported(name, 'replace');\n            if (directive.terminal)\n                notSupported(name, 'terminal');\n            return directive;\n        };\n        UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate) {\n            if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n            if (directive.template !== undefined) {\n                return getOrCall(directive.template);\n            }\n            else if (directive.templateUrl) {\n                var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n                var url_1 = getOrCall(directive.templateUrl);\n                var template = $templateCache_1.get(url_1);\n                if (template !== undefined) {\n                    return template;\n                }\n                else if (!fetchRemoteTemplate) {\n                    throw new Error('loading directive templates asynchronously is not supported');\n                }\n                return new Promise(function (resolve, reject) {\n                    var $httpBackend = $injector.get($HTTP_BACKEND);\n                    $httpBackend('GET', url_1, null, function (status, response) {\n                        if (status === 200) {\n                            resolve($templateCache_1.put(url_1, response));\n                        }\n                        else {\n                            reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                        }\n                    });\n                });\n            }\n            else {\n                throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n            }\n        };\n        UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n            // TODO: Document that we do not pre-assign bindings on the controller instance.\n            // Quoted properties below so that this code can be optimized with Closure Compiler.\n            var locals = { '$scope': $scope, '$element': this.$element };\n            var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n            this.$element.data(controllerKey(this.directive.name), controller);\n            return controller;\n        };\n        UpgradeHelper.prototype.compileTemplate = function (template) {\n            if (template === undefined) {\n                template = UpgradeHelper.getTemplate(this.$injector, this.directive);\n            }\n            return this.compileHtml(template);\n        };\n        UpgradeHelper.prototype.prepareTransclusion = function () {\n            var _this = this;\n            var transclude = this.directive.transclude;\n            var contentChildNodes = this.extractChildNodes();\n            var attachChildrenFn = function (scope, cloneAttachFn) {\n                // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n                // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n                // there will be no transclusion scope here.\n                // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n                scope = scope || { $destroy: function () { return undefined; } };\n                return cloneAttachFn($template, scope);\n            };\n            var $template = contentChildNodes;\n            if (transclude) {\n                var slots_1 = Object.create(null);\n                if (typeof transclude === 'object') {\n                    $template = [];\n                    var slotMap_1 = Object.create(null);\n                    var filledSlots_1 = Object.create(null);\n                    // Parse the element selectors.\n                    Object.keys(transclude).forEach(function (slotName) {\n                        var selector = transclude[slotName];\n                        var optional = selector.charAt(0) === '?';\n                        selector = optional ? selector.substring(1) : selector;\n                        slotMap_1[selector] = slotName;\n                        slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                        filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                    });\n                    // Add the matching elements into their slot.\n                    contentChildNodes.forEach(function (node) {\n                        var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                        if (slotName) {\n                            filledSlots_1[slotName] = true;\n                            slots_1[slotName] = slots_1[slotName] || [];\n                            slots_1[slotName].push(node);\n                        }\n                        else {\n                            $template.push(node);\n                        }\n                    });\n                    // Check for required slots that were not filled.\n                    Object.keys(filledSlots_1).forEach(function (slotName) {\n                        if (!filledSlots_1[slotName]) {\n                            throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                        }\n                    });\n                    Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                        var nodes = slots_1[slotName];\n                        slots_1[slotName] = function (scope, cloneAttach) {\n                            return cloneAttach(nodes, scope);\n                        };\n                    });\n                }\n                // Attach `$$slots` to default slot transclude fn.\n                attachChildrenFn.$$slots = slots_1;\n                // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n                // removes all text content after the first interpolation and updates it later, after\n                // evaluating the expressions. This would result in AngularJS failing to recognize text\n                // nodes that start with an interpolation as transcluded content and use the fallback\n                // content instead.\n                // To avoid this issue, we add a\n                // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n                // to empty text nodes (which can only be a result of Angular removing their initial content).\n                // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n                //       will still fail to be detected by AngularJS v1.6+\n                $template.forEach(function (node) {\n                    if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                        node.nodeValue = '\\u200C';\n                    }\n                });\n            }\n            return attachChildrenFn;\n        };\n        UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n            var directiveRequire = this.getDirectiveRequire();\n            var requiredControllers = this.resolveRequire(directiveRequire);\n            if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n                var requiredControllersMap_1 = requiredControllers;\n                Object.keys(requiredControllersMap_1).forEach(function (key) {\n                    controllerInstance[key] = requiredControllersMap_1[key];\n                });\n            }\n            return requiredControllers;\n        };\n        UpgradeHelper.prototype.compileHtml = function (html) {\n            this.element.innerHTML = html;\n            return this.$compile(this.element.childNodes);\n        };\n        UpgradeHelper.prototype.extractChildNodes = function () {\n            var childNodes = [];\n            var childNode;\n            while (childNode = this.element.firstChild) {\n                this.element.removeChild(childNode);\n                childNodes.push(childNode);\n            }\n            return childNodes;\n        };\n        UpgradeHelper.prototype.getDirectiveRequire = function () {\n            var require = this.directive.require || (this.directive.controller && this.directive.name);\n            if (isMap(require)) {\n                Object.keys(require).forEach(function (key) {\n                    var value = require[key];\n                    var match = value.match(REQUIRE_PREFIX_RE);\n                    var name = value.substring(match[0].length);\n                    if (!name) {\n                        require[key] = match[0] + key;\n                    }\n                });\n            }\n            return require;\n        };\n        UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n            var _this = this;\n            if (!require) {\n                return null;\n            }\n            else if (Array.isArray(require)) {\n                return require.map(function (req) { return _this.resolveRequire(req); });\n            }\n            else if (typeof require === 'object') {\n                var value_1 = {};\n                Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(require[key]); });\n                return value_1;\n            }\n            else if (typeof require === 'string') {\n                var match = require.match(REQUIRE_PREFIX_RE);\n                var inheritType = match[1] || match[3];\n                var name_1 = require.substring(match[0].length);\n                var isOptional = !!match[2];\n                var searchParents = !!inheritType;\n                var startOnParent = inheritType === '^^';\n                var ctrlKey = controllerKey(name_1);\n                var elem = startOnParent ? this.$element.parent() : this.$element;\n                var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n                if (!value && !isOptional) {\n                    throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n                }\n                return value;\n            }\n            else {\n                throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n            }\n        };\n        return UpgradeHelper;\n    }());\n    function getOrCall(property) {\n        return isFunction(property) ? property() : property;\n    }\n    // NOTE: Only works for `typeof T !== 'object'`.\n    function isMap(value) {\n        return value && !Array.isArray(value) && typeof value === 'object';\n    }\n    function notSupported(name, feature) {\n        throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var CAMEL_CASE = /([A-Z])/g;\n    var INITIAL_VALUE$1 = {\n        __UNINITIALIZED__: true\n    };\n    var NOT_SUPPORTED = 'NOT_SUPPORTED';\n    var UpgradeNg1ComponentAdapterBuilder = /** @class */ (function () {\n        function UpgradeNg1ComponentAdapterBuilder(name) {\n            this.name = name;\n            this.inputs = [];\n            this.inputsRename = [];\n            this.outputs = [];\n            this.outputsRename = [];\n            this.propertyOutputs = [];\n            this.checkProperties = [];\n            this.propertyMap = {};\n            this.directive = null;\n            var selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });\n            var self = this;\n            // Note: There is a bug in TS 2.4 that prevents us from\n            // inlining this into @Directive\n            // TODO(tbosch): find or file a bug against TypeScript for this.\n            var directive = { selector: selector, inputs: this.inputsRename, outputs: this.outputsRename };\n            var MyClass = /** @class */ (function () {\n                function MyClass(scope, injector, elementRef) {\n                    var helper = new UpgradeHelper(injector, name, elementRef, this.directive);\n                    return new UpgradeNg1ComponentAdapter(helper, scope, self.template, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap);\n                }\n                MyClass.prototype.ngOnInit = function () {\n                };\n                MyClass.prototype.ngOnChanges = function () {\n                };\n                MyClass.prototype.ngDoCheck = function () {\n                };\n                MyClass.prototype.ngOnDestroy = function () {\n                };\n                MyClass.decorators = [\n                    { type: core.Directive, args: [__assign({ jit: true }, directive),] },\n                ];\n                /** @nocollapse */\n                MyClass.ctorParameters = function () { return [\n                    { type: undefined, decorators: [{ type: core.Inject, args: [$SCOPE,] }] },\n                    { type: core.Injector },\n                    { type: core.ElementRef }\n                ]; };\n                return MyClass;\n            }());\n            this.type = MyClass;\n        }\n        UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = function () {\n            var _this = this;\n            var btcIsObject = typeof this.directive.bindToController === 'object';\n            if (btcIsObject && Object.keys(this.directive.scope).length) {\n                throw new Error(\"Binding definitions on scope and controller at the same time are not supported.\");\n            }\n            var context = (btcIsObject) ? this.directive.bindToController : this.directive.scope;\n            if (typeof context == 'object') {\n                Object.keys(context).forEach(function (propName) {\n                    var definition = context[propName];\n                    var bindingType = definition.charAt(0);\n                    var bindingOptions = definition.charAt(1);\n                    var attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n                    // QUESTION: What about `=*`? Ignore? Throw? Support?\n                    var inputName = \"input_\" + attrName;\n                    var inputNameRename = inputName + \": \" + attrName;\n                    var outputName = \"output_\" + attrName;\n                    var outputNameRename = outputName + \": \" + attrName;\n                    var outputNameRenameChange = outputNameRename + \"Change\";\n                    switch (bindingType) {\n                        case '@':\n                        case '<':\n                            _this.inputs.push(inputName);\n                            _this.inputsRename.push(inputNameRename);\n                            _this.propertyMap[inputName] = propName;\n                            break;\n                        case '=':\n                            _this.inputs.push(inputName);\n                            _this.inputsRename.push(inputNameRename);\n                            _this.propertyMap[inputName] = propName;\n                            _this.outputs.push(outputName);\n                            _this.outputsRename.push(outputNameRenameChange);\n                            _this.propertyMap[outputName] = propName;\n                            _this.checkProperties.push(propName);\n                            _this.propertyOutputs.push(outputName);\n                            break;\n                        case '&':\n                            _this.outputs.push(outputName);\n                            _this.outputsRename.push(outputNameRename);\n                            _this.propertyMap[outputName] = propName;\n                            break;\n                        default:\n                            var json = JSON.stringify(context);\n                            throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                    }\n                });\n            }\n        };\n        /**\n         * Upgrade ng1 components into Angular.\n         */\n        UpgradeNg1ComponentAdapterBuilder.resolve = function (exportedComponents, $injector) {\n            var promises = Object.keys(exportedComponents).map(function (name) {\n                var exportedComponent = exportedComponents[name];\n                exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n                exportedComponent.extractBindings();\n                return Promise\n                    .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n                    .then(function (template) { return exportedComponent.template = template; });\n            });\n            return Promise.all(promises);\n        };\n        return UpgradeNg1ComponentAdapterBuilder;\n    }());\n    var UpgradeNg1ComponentAdapter = /** @class */ (function () {\n        function UpgradeNg1ComponentAdapter(helper, scope, template, inputs, outputs, propOuts, checkProperties, propertyMap) {\n            this.helper = helper;\n            this.template = template;\n            this.inputs = inputs;\n            this.outputs = outputs;\n            this.propOuts = propOuts;\n            this.checkProperties = checkProperties;\n            this.propertyMap = propertyMap;\n            this.controllerInstance = null;\n            this.destinationObj = null;\n            this.checkLastValues = [];\n            this.$element = null;\n            this.directive = helper.directive;\n            this.element = helper.element;\n            this.$element = helper.$element;\n            this.componentScope = scope.$new(!!this.directive.scope);\n            var controllerType = this.directive.controller;\n            if (this.directive.bindToController && controllerType) {\n                this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n                this.destinationObj = this.controllerInstance;\n            }\n            else {\n                this.destinationObj = this.componentScope;\n            }\n            for (var i = 0; i < inputs.length; i++) {\n                this[inputs[i]] = null;\n            }\n            for (var j = 0; j < outputs.length; j++) {\n                var emitter = this[outputs[j]] = new core.EventEmitter();\n                if (this.propOuts.indexOf(outputs[j]) === -1) {\n                    this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.emit(value); }; })(emitter));\n                }\n            }\n            for (var k = 0; k < propOuts.length; k++) {\n                this.checkLastValues.push(INITIAL_VALUE$1);\n            }\n        }\n        UpgradeNg1ComponentAdapter.prototype.ngOnInit = function () {\n            // Collect contents, insert and compile template\n            var attachChildNodes = this.helper.prepareTransclusion();\n            var linkFn = this.helper.compileTemplate(this.template);\n            // Instantiate controller (if not already done so)\n            var controllerType = this.directive.controller;\n            var bindToController = this.directive.bindToController;\n            if (controllerType && !bindToController) {\n                this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n            }\n            // Require other controllers\n            var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n            // Hook: $onInit\n            if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n                this.controllerInstance.$onInit();\n            }\n            // Linking\n            var link = this.directive.link;\n            var preLink = (typeof link == 'object') && link.pre;\n            var postLink = (typeof link == 'object') ? link.post : link;\n            var attrs = NOT_SUPPORTED;\n            var transcludeFn = NOT_SUPPORTED;\n            if (preLink) {\n                preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            linkFn(this.componentScope, null, { parentBoundTranscludeFn: attachChildNodes });\n            if (postLink) {\n                postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            // Hook: $postLink\n            if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n                this.controllerInstance.$postLink();\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngOnChanges = function (changes) {\n            var _this = this;\n            var ng1Changes = {};\n            Object.keys(changes).forEach(function (name) {\n                var change = changes[name];\n                _this.setComponentProperty(name, change.currentValue);\n                ng1Changes[_this.propertyMap[name]] = change;\n            });\n            if (isFunction(this.destinationObj.$onChanges)) {\n                this.destinationObj.$onChanges(ng1Changes);\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngDoCheck = function () {\n            var _this = this;\n            var destinationObj = this.destinationObj;\n            var lastValues = this.checkLastValues;\n            var checkProperties = this.checkProperties;\n            var propOuts = this.propOuts;\n            checkProperties.forEach(function (propName, i) {\n                var value = destinationObj[propName];\n                var last = lastValues[i];\n                if (!strictEquals(last, value)) {\n                    var eventEmitter = _this[propOuts[i]];\n                    eventEmitter.emit(lastValues[i] = value);\n                }\n            });\n            if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n                this.controllerInstance.$doCheck();\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngOnDestroy = function () {\n            if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n                this.controllerInstance.$onDestroy();\n            }\n            this.componentScope.$destroy();\n        };\n        UpgradeNg1ComponentAdapter.prototype.setComponentProperty = function (name, value) {\n            this.destinationObj[this.propertyMap[name]] = value;\n        };\n        return UpgradeNg1ComponentAdapter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var upgradeCount = 0;\n    /**\n     * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n     *\n     * The `UpgradeAdapter` allows:\n     * 1. creation of Angular component from AngularJS component directive\n     *    (See [UpgradeAdapter#upgradeNg1Component()])\n     * 2. creation of AngularJS directive from Angular component.\n     *    (See [UpgradeAdapter#downgradeNg2Component()])\n     * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n     *    coexisting in a single application.\n     *\n     * ## Mental Model\n     *\n     * When reasoning about how a hybrid application works it is useful to have a mental model which\n     * describes what is happening and explains what is happening at the lowest level.\n     *\n     * 1. There are two independent frameworks running in a single application, each framework treats\n     *    the other as a black box.\n     * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n     *    instantiated the element is the owner. Each framework only updates/interacts with its own\n     *    DOM elements and ignores others.\n     * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n     *    where they are instantiated.\n     * 4. Angular components always execute inside Angular framework codebase regardless of\n     *    where they are instantiated.\n     * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n     *    Angular directive, which bootstraps the AngularJS component directive in that location.\n     * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n     *    an AngularJS directive, which bootstraps the Angular component in that location.\n     * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n     *    doing the instantiation. The other framework then instantiates and owns the view for that\n     *    component. This implies that component bindings will always follow the semantics of the\n     *    instantiation framework. The syntax is always that of Angular syntax.\n     * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n     * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n     *    `$apply()`.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * module.directive('ng1Hello', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * @Component({\n     *   selector: 'ng2-comp',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n     *   directives:\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     *\n     * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     *\n     * ```\n     *\n     * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n     * [Ahead-of-Time compilation](guide/aot-compiler).\n     */\n    var UpgradeAdapter = /** @class */ (function () {\n        function UpgradeAdapter(ng2AppModule, compilerOptions) {\n            this.ng2AppModule = ng2AppModule;\n            this.compilerOptions = compilerOptions;\n            this.idPrefix = \"NG2_UPGRADE_\" + upgradeCount++ + \"_\";\n            this.downgradedComponents = [];\n            /**\n             * An internal map of ng1 components which need to up upgraded to ng2.\n             *\n             * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n             * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n             *\n             * @internal\n             */\n            this.ng1ComponentsToBeUpgraded = {};\n            this.upgradedProviders = [];\n            this.moduleRef = null;\n            if (!ng2AppModule) {\n                throw new Error('UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n            }\n        }\n        /**\n         * Allows Angular Component to be used from AngularJS.\n         *\n         * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n         * Angular Component. The adapter will bootstrap Angular component from within the\n         * AngularJS template.\n         *\n         * ## Mental Model\n         *\n         * 1. The component is instantiated by being listed in AngularJS template. This means that the\n         *    host element is controlled by AngularJS, but the component's view will be controlled by\n         *    Angular.\n         * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n         *    syntax. This has to be done, this way because we must follow Angular components do not\n         *    declare how the attributes should be interpreted.\n         * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n         *    by way of the `ControlValueAccessor` interface from @angular/forms. Only components that\n         *    implement this interface are eligible.\n         *\n         * ## Supported Features\n         *\n         * - Bindings:\n         *   - Attribute: `<comp name=\"World\">`\n         *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n         *   - Expression:  `<comp [name]=\"username\">`\n         *   - Event:  `<comp (close)=\"doSomething()\">`\n         *   - ng-model: `<comp ng-model=\"name\">`\n         * - Content projection: yes\n         *\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n         * const module = angular.module('myExample', []);\n         * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n         *\n         * @Component({\n         *   selector: 'greet',\n         *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n         * })\n         * class Greeter {\n         *   @Input() salutation: string;\n         *   @Input() name: string;\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Greeter],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML =\n         *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.downgradeNg2Component = function (component) {\n            this.downgradedComponents.push(component);\n            return downgradeComponent({ component: component });\n        };\n        /**\n         * Allows AngularJS Component to be used from Angular.\n         *\n         * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n         * directive. The adapter will bootstrap AngularJS component from within the Angular\n         * template.\n         *\n         * ## Mental Model\n         *\n         * 1. The component is instantiated by being listed in Angular template. This means that the\n         *    host element is controlled by Angular, but the component's view will be controlled by\n         *    AngularJS.\n         *\n         * ## Supported Features\n         *\n         * - Bindings:\n         *   - Attribute: `<comp name=\"World\">`\n         *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n         *   - Expression:  `<comp [name]=\"username\">`\n         *   - Event:  `<comp (close)=\"doSomething()\">`\n         * - Transclusion: yes\n         * - Only some of the features of\n         *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n         *   supported:\n         *   - `compile`: not supported because the host element is owned by Angular, which does\n         *     not allow modifying DOM structure during compilation.\n         *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n         *   - `controllerAs`: supported.\n         *   - `bindToController`: supported.\n         *   - `link`: supported. (NOTE: only pre-link function is supported.)\n         *   - `name`: supported.\n         *   - `priority`: ignored.\n         *   - `replace`: not supported.\n         *   - `require`: supported.\n         *   - `restrict`: must be set to 'E'.\n         *   - `scope`: supported.\n         *   - `template`: supported.\n         *   - `templateUrl`: supported.\n         *   - `terminal`: ignored.\n         *   - `transclude`: supported.\n         *\n         *\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n         * const module = angular.module('myExample', []);\n         *\n         * module.directive('greet', function() {\n         *   return {\n         *     scope: {salutation: '=', name: '=' },\n         *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n         *   };\n         * });\n         *\n         * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n         *\n         * @Component({\n         *   selector: 'ng2',\n         *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n         * })\n         * class Ng2Component {\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML = '<ng2></ng2>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.upgradeNg1Component = function (name) {\n            if (this.ng1ComponentsToBeUpgraded.hasOwnProperty(name)) {\n                return this.ng1ComponentsToBeUpgraded[name].type;\n            }\n            else {\n                return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n                    .type;\n            }\n        };\n        /**\n         * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n         * Use this instead of `angular.mock.module()` to load the upgrade module into\n         * the AngularJS testing injector.\n         *\n         * ### Example\n         *\n         * ```\n         * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n         *\n         * // configure the adapter with upgrade/downgrade components and services\n         * upgradeAdapter.downgradeNg2Component(MyComponent);\n         *\n         * let upgradeAdapterRef: UpgradeAdapterRef;\n         * let $compile, $rootScope;\n         *\n         * // We must register the adapter before any calls to `inject()`\n         * beforeEach(() => {\n         *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n         * });\n         *\n         * beforeEach(inject((_$compile_, _$rootScope_) => {\n         *   $compile = _$compile_;\n         *   $rootScope = _$rootScope_;\n         * }));\n         *\n         * it(\"says hello\", (done) => {\n         *   upgradeAdapterRef.ready(() => {\n         *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n         *     $rootScope.$apply();\n         *     expect(element.html()).toContain(\"Hello World\");\n         *     done();\n         *   })\n         * });\n         *\n         * ```\n         *\n         * @param modules any AngularJS modules that the upgrade module should depend upon\n         * @returns an `UpgradeAdapterRef`, which lets you register a `ready()` callback to\n         * run assertions once the Angular components are ready to test through AngularJS.\n         */\n        UpgradeAdapter.prototype.registerForNg1Tests = function (modules) {\n            var _this = this;\n            var windowNgMock = window['angular'].mock;\n            if (!windowNgMock || !windowNgMock.module) {\n                throw new Error('Failed to find \\'angular.mock.module\\'.');\n            }\n            this.declareNg1Module(modules);\n            windowNgMock.module(this.ng1Module.name);\n            var upgrade = new UpgradeAdapterRef();\n            this.ng2BootstrapDeferred.promise.then(function (ng1Injector) { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); }, onError);\n            return upgrade;\n        };\n        /**\n         * Bootstrap a hybrid AngularJS / Angular application.\n         *\n         * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n         * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n         * AngularJS, this bootstrap is asynchronous.\n         *\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         * const module = angular.module('myExample', []);\n         * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n         *\n         * module.directive('ng1', function() {\n         *   return {\n         *      scope: { title: '=' },\n         *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n         *   };\n         * });\n         *\n         *\n         * @Component({\n         *   selector: 'ng2',\n         *   inputs: ['name'],\n         *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n         * })\n         * class Ng2 {\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\n         *       \"ng2[ng1[Hello World!](transclude)](project)\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.bootstrap = function (element$$1, modules, config) {\n            var _this = this;\n            this.declareNg1Module(modules);\n            var upgrade = new UpgradeAdapterRef();\n            // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n            var windowAngular = window /** TODO #???? */['angular'];\n            windowAngular.resumeBootstrap = undefined;\n            this.ngZone.run(function () { bootstrap(element$$1, [_this.ng1Module.name], config); });\n            var ng1BootstrapPromise = new Promise(function (resolve) {\n                if (windowAngular.resumeBootstrap) {\n                    var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                    windowAngular.resumeBootstrap = function () {\n                        windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                        var r = windowAngular.resumeBootstrap.apply(this, arguments);\n                        resolve();\n                        return r;\n                    };\n                }\n                else {\n                    resolve();\n                }\n            });\n            Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(function (_a) {\n                var _b = __read(_a, 1), ng1Injector = _b[0];\n                element(element$$1).data(controllerKey(INJECTOR_KEY), _this.moduleRef.injector);\n                _this.moduleRef.injector.get(core.NgZone).run(function () { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); });\n            }, onError);\n            return upgrade;\n        };\n        /**\n         * Allows AngularJS service to be accessible from Angular.\n         *\n         *\n         * ### Example\n         *\n         * ```\n         * class Login { ... }\n         * class Server { ... }\n         *\n         * @Injectable()\n         * class Example {\n         *   constructor(@Inject('server') server, login: Login) {\n         *     ...\n         *   }\n         * }\n         *\n         * const module = angular.module('myExample', []);\n         * module.service('server', Server);\n         * module.service('login', Login);\n         *\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         * adapter.upgradeNg1Provider('server');\n         * adapter.upgradeNg1Provider('login', {asToken: Login});\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n         *   const example: Example = ref.ng2Injector.get(Example);\n         * });\n         *\n         * ```\n         */\n        UpgradeAdapter.prototype.upgradeNg1Provider = function (name, options) {\n            var token = options && options.asToken || name;\n            this.upgradedProviders.push({\n                provide: token,\n                useFactory: function ($injector) { return $injector.get(name); },\n                deps: [$INJECTOR]\n            });\n        };\n        /**\n         * Allows Angular service to be accessible from AngularJS.\n         *\n         *\n         * ### Example\n         *\n         * ```\n         * class Example {\n         * }\n         *\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         *\n         * const module = angular.module('myExample', []);\n         * module.factory('example', adapter.downgradeNg2Provider(Example));\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n         *   const example: Example = ref.ng1Injector.get('example');\n         * });\n         *\n         * ```\n         */\n        UpgradeAdapter.prototype.downgradeNg2Provider = function (token) { return downgradeInjectable(token); };\n        /**\n         * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n         * hybrid application.\n         *\n         * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n         *\n         * @param modules The AngularJS modules that this upgrade module should depend upon.\n         * @returns The AngularJS upgrade module that is declared by this method\n         *\n         * ### Example\n         *\n         * ```\n         * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n         * upgradeAdapter.declareNg1Module(['heroApp']);\n         * ```\n         */\n        UpgradeAdapter.prototype.declareNg1Module = function (modules) {\n            var _this = this;\n            if (modules === void 0) { modules = []; }\n            var delayApplyExps = [];\n            var original$applyFn;\n            var rootScopePrototype;\n            var rootScope;\n            var upgradeAdapter = this;\n            var ng1Module = this.ng1Module = module$1(this.idPrefix, modules);\n            var platformRef = platformBrowserDynamic.platformBrowserDynamic();\n            this.ngZone = new core.NgZone({ enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec') });\n            this.ng2BootstrapDeferred = new Deferred();\n            ng1Module.factory(INJECTOR_KEY, function () { return _this.moduleRef.injector.get(core.Injector); })\n                .factory(LAZY_MODULE_REF, [\n                INJECTOR_KEY,\n                function (injector) { return ({ injector: injector, needsNgZone: false }); }\n            ])\n                .constant(NG_ZONE_KEY, this.ngZone)\n                .factory(COMPILER_KEY, function () { return _this.moduleRef.injector.get(core.Compiler); })\n                .config([\n                '$provide', '$injector',\n                function (provide, ng1Injector) {\n                    provide.decorator($ROOT_SCOPE, [\n                        '$delegate',\n                        function (rootScopeDelegate) {\n                            // Capture the root apply so that we can delay first call to $apply until we\n                            // bootstrap Angular and then we replay and restore the $apply.\n                            rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                            if (rootScopePrototype.hasOwnProperty('$apply')) {\n                                original$applyFn = rootScopePrototype.$apply;\n                                rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };\n                            }\n                            else {\n                                throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                            }\n                            return rootScope = rootScopeDelegate;\n                        }\n                    ]);\n                    if (ng1Injector.has($$TESTABILITY)) {\n                        provide.decorator($$TESTABILITY, [\n                            '$delegate',\n                            function (testabilityDelegate) {\n                                var originalWhenStable = testabilityDelegate.whenStable;\n                                // Cannot use arrow function below because we need the context\n                                var newWhenStable = function (callback) {\n                                    originalWhenStable.call(this, function () {\n                                        var ng2Testability = upgradeAdapter.moduleRef.injector.get(core.Testability);\n                                        if (ng2Testability.isStable()) {\n                                            callback.apply(this, arguments);\n                                        }\n                                        else {\n                                            ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                                        }\n                                    });\n                                };\n                                testabilityDelegate.whenStable = newWhenStable;\n                                return testabilityDelegate;\n                            }\n                        ]);\n                    }\n                }\n            ]);\n            ng1Module.run([\n                '$injector', '$rootScope',\n                function (ng1Injector, rootScope) {\n                    UpgradeNg1ComponentAdapterBuilder.resolve(_this.ng1ComponentsToBeUpgraded, ng1Injector)\n                        .then(function () {\n                        // Note: There is a bug in TS 2.4 that prevents us from\n                        // inlining this into @NgModule\n                        // TODO(tbosch): find or file a bug against TypeScript for this.\n                        var ngModule = {\n                            providers: [\n                                { provide: $INJECTOR, useFactory: function () { return ng1Injector; } },\n                                { provide: $COMPILE, useFactory: function () { return ng1Injector.get($COMPILE); } },\n                                _this.upgradedProviders\n                            ],\n                            imports: [_this.ng2AppModule],\n                            entryComponents: _this.downgradedComponents\n                        };\n                        // At this point we have ng1 injector and we have prepared\n                        // ng1 components to be upgraded, we now can bootstrap ng2.\n                        var DynamicNgUpgradeModule = /** @class */ (function () {\n                            function DynamicNgUpgradeModule() {\n                            }\n                            DynamicNgUpgradeModule.prototype.ngDoBootstrap = function () { };\n                            DynamicNgUpgradeModule.decorators = [\n                                { type: core.NgModule, args: [__assign({ jit: true }, ngModule),] },\n                            ];\n                            /** @nocollapse */\n                            DynamicNgUpgradeModule.ctorParameters = function () { return []; };\n                            return DynamicNgUpgradeModule;\n                        }());\n                        platformRef\n                            .bootstrapModule(DynamicNgUpgradeModule, [_this.compilerOptions, { ngZone: _this.ngZone }])\n                            .then(function (ref) {\n                            _this.moduleRef = ref;\n                            _this.ngZone.run(function () {\n                                if (rootScopePrototype) {\n                                    rootScopePrototype.$apply = original$applyFn; // restore original $apply\n                                    while (delayApplyExps.length) {\n                                        rootScope.$apply(delayApplyExps.shift());\n                                    }\n                                    rootScopePrototype = null;\n                                }\n                            });\n                        })\n                            .then(function () { return _this.ng2BootstrapDeferred.resolve(ng1Injector); }, onError)\n                            .then(function () {\n                            var subscription = _this.ngZone.onMicrotaskEmpty.subscribe({ next: function () { return rootScope.$digest(); } });\n                            rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                        });\n                    })\n                        .catch(function (e) { return _this.ng2BootstrapDeferred.reject(e); });\n                }\n            ]);\n            return ng1Module;\n        };\n        return UpgradeAdapter;\n    }());\n    /**\n     * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n     *\n     * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n     * [Ahead-of-Time compilation](guide/aot-compiler).\n     */\n    var UpgradeAdapterRef = /** @class */ (function () {\n        function UpgradeAdapterRef() {\n            /* @internal */\n            this._readyFn = null;\n            this.ng1RootScope = null;\n            this.ng1Injector = null;\n            this.ng2ModuleRef = null;\n            this.ng2Injector = null;\n        }\n        /* @internal */\n        UpgradeAdapterRef.prototype._bootstrapDone = function (ngModuleRef, ng1Injector) {\n            this.ng2ModuleRef = ngModuleRef;\n            this.ng2Injector = ngModuleRef.injector;\n            this.ng1Injector = ng1Injector;\n            this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n            this._readyFn && this._readyFn(this);\n        };\n        /**\n         * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n         * application has been bootstrapped.\n         *\n         * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n         * require a call to `$apply()`.\n         */\n        UpgradeAdapterRef.prototype.ready = function (fn) { this._readyFn = fn; };\n        /**\n         * Dispose of running hybrid AngularJS / Angular application.\n         */\n        UpgradeAdapterRef.prototype.dispose = function () {\n            this.ng1Injector.get($ROOT_SCOPE).$destroy();\n            this.ng2ModuleRef.destroy();\n        };\n        return UpgradeAdapterRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only re-exports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.VERSION = VERSION;\n    exports.UpgradeAdapter = UpgradeAdapter;\n    exports.UpgradeAdapterRef = UpgradeAdapterRef;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=upgrade.umd.js.map\n"]}
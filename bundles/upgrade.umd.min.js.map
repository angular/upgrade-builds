{"version":3,"sources":["/home/travis/build/angular/angular/dist/packages-dist/upgrade/bundles/upgrade.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","upgrade","core","platformBrowserDynamic","this","_angular_core","_angular_platformBrowserDynamic","noNg","Error","onError","e","console","error","stack","log","controllerKey","name","directiveNormalize","replace","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","_","letter","toUpperCase","getComponentName","component","overriddenName","toString","split","isFunction","value","supportsNgModel","writeValue","registerOnChange","hookupNgModel","ngModel","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","strictEquals","val1","val2","groupNodesBySelector","ngContentSelectors","nodes","projectableNodes","i","ii","length","j","jj","node","ngContentIndex","findMatchingNgContentIndex","push","element","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","_matches","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","call","downgradeComponent","info","directiveFactory","$compile","$injector","$parse","ngZone","needsNgZone","wrapCallback","cb","restrict","terminal","REQUIRE_INJECTOR","REQUIRE_NG_MODEL","link","scope","attrs","required","parentInjector","ranAsync","lazyModuleRef","get","LAZY_MODULE_REF","injector","doDowngrade","componentFactoryResolver","ComponentFactoryResolver","componentFactory","resolveComponentFactory","injectorPromise","ParentInjectorPromise$1","facade","DowngradeComponentAdapter","compileContents","createComponent","setupInputs","propagateDigest","setupOutputs","registerCleanup","resolve","getInjector","$evalAsync","downgradeFn","NgZone","isInAngularZone","run","isThenable","then","$COMPILE","$INJECTOR","$PARSE","obj","downgradeInjectable","token","INJECTOR_KEY","getOrCall","property","isMap","Array","isArray","notSupported","feature","VERSION","Version","angular","bootstrap","version","resumeBootstrap","getTestability","window","hasOwnProperty","modules","config","module$1","prefix","dependencies","$CONTROLLER","$HTTP_BACKEND","$ROOT_SCOPE","$SCOPE","$TEMPLATE_CACHE","$$TESTABILITY","COMPILER_KEY","NG_ZONE_KEY","PropertyBinding","prop","attr","parseBinding","prototype","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","substr","onAttr","bindAttr","bindonAttr","Deferred","_this","promise","Promise","res","rej","reject","INITIAL_VALUE","__UNINITIALIZED__","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","appRef","ApplicationRef","compiledProjectableNodes","groupProjectableNodes","linkFns","map","forEach","linkFn","clone","childInjector","Injector","create","provide","useValue","componentRef","changeDetector","changeDetectorRef","instance","inputs","_loop_1","input","propName","templateName","expr","observeFn_1","prevValue","currValue","updateInput","$observe","unwatch_1","this_1","$watch","watchFn","detectChanges","componentType","ngOnChanges","attachView","hostView","outputs","_loop_2","output","assignExpr","substring","getter_1","this_2","setter_1","assign","emitter","subscribe","next","v","$event","$destroy","destroy","detachView","SimpleChange","ParentInjectorPromise","injectorKey","callbacks","callback","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","nativeElement","$element","getDirective","directives","compile","getTemplate","fetchRemoteTemplate","undefined","template","templateUrl","$templateCache_1","url_1","$httpBackend","status","response","put","buildController","controllerType","$scope","locals","controller","controllerAs","compileTemplate","compileHtml","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","$template","attachChildrenFn","cloneAttach","slots_1","Object","slotMap_1","filledSlots_1","keys","slotName","optional","nodeName","toLowerCase","filter","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","controllerInstance","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","requiredControllersMap_1","key","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","CAMEL_CASE","INITIAL_VALUE$1","NOT_SUPPORTED","UpgradeNg1ComponentAdapterBuilder","inputsRename","outputsRename","propertyOutputs","checkProperties","propertyMap","all","self","MyClass","helper","UpgradeNg1ComponentAdapter","ngOnInit","ngDoCheck","ngOnDestroy","decorators","type","Directive","args","ctorParameters","Inject","ElementRef","extractBindings","btcIsObject","context","definition","bindingType","bindingOptions","attrName","inputName","inputNameRename","outputName","outputNameRename","outputNameRenameChange","json","JSON","stringify","exportedComponents","promises","exportedComponent","propOuts","destinationObj","checkLastValues","EventEmitter","setComponentProperty","emit","k","attachChildNodes","$onInit","preLink","pre","postLink","post","transcludeFn","parentBoundTranscludeFn","$postLink","changes","ng1Changes","change","currentValue","$onChanges","lastValues","last","eventEmitter","$doCheck","$onDestroy","upgradeCount","UpgradeAdapter","ng2AppModule","compilerOptions","idPrefix","downgradedComponents","ng1ComponentsToBeUpgraded","upgradedProviders","moduleRef","downgradeNg2Component","upgradeNg1Component","registerForNg1Tests","windowNgMock","mock","declareNg1Module","ng1Module","UpgradeAdapterRef","ng2BootstrapDeferred","ng1Injector","_bootstrapDone","element$$1","windowAngular","ng1BootstrapPromise","originalResumeBootstrap_1","apply","arguments","_a","upgradeNg1Provider","options","asToken","useFactory","deps","downgradeNg2Provider","original$applyFn","rootScopePrototype","rootScope","delayApplyExps","upgradeAdapter","platformRef","enableLongStackTrace","Zone","needsInNgZone","constant","Compiler","decorator","rootScopeDelegate","constructor","$apply","exp","has","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","Testability","isStable","DynamicNgUpgradeModule","ngDoBootstrap","NgModule","providers","imports","entryComponents","_bootstrapModuleWithZone","ref","shift","subscription","onMicrotaskEmpty","$digest","$on","unsubscribe","catch","_readyFn","ng1RootScope","ng2ModuleRef","ng2Injector","ngModuleRef","ready","fn","dispose","defineProperty"],"mappings":"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","file":"/home/travis/build/angular/angular/dist/packages-dist/upgrade/bundles/upgrade.umd.min.js","sourcesContent":["/**\n * @license Angular v5.0.0-beta.6-b6833d1\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser-dynamic')) :\n\ttypeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/platform-browser-dynamic'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.upgrade = {}),global.ng.core,global.ng.platformBrowserDynamic));\n}(this, (function (exports,_angular_core,_angular_platformBrowserDynamic) { 'use strict';\n\n/**\n * @license Angular v5.0.0-beta.6-b6833d1\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new _angular_core.Version('5.0.0-beta.6-b6833d1');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @return {?}\n */\nfunction noNg() {\n    throw new Error('AngularJS v1.x is not loaded!');\n}\nvar angular = ({\n    bootstrap: noNg,\n    module: noNg,\n    element: noNg,\n    version: noNg,\n    resumeBootstrap: noNg,\n    getTestability: noNg\n});\ntry {\n    if (window.hasOwnProperty('angular')) {\n        angular = ((window)).angular;\n    }\n}\ncatch (e) {\n    // ignore in CJS mode.\n}\n/**\n * Resets the AngularJS library.\n *\n * Used when angularjs is loaded lazily, and not available on `window`.\n *\n * \\@stable\n * @param {?} ng\n * @return {?}\n */\n\n/**\n * Returns the current version of the AngularJS library.\n *\n * \\@stable\n * @return {?}\n */\n\nvar bootstrap = function (e, modules, config) {\n    return angular.bootstrap(e, modules, config);\n};\nvar module$1 = function (prefix, dependencies) {\n    return angular.module(prefix, dependencies);\n};\nvar element = function (e) { return angular.element(e); };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */ var $COMPILE = '$compile';\nvar $CONTROLLER = '$controller';\n\nvar $HTTP_BACKEND = '$httpBackend';\nvar $INJECTOR = '$injector';\n\nvar $PARSE = '$parse';\n\nvar $ROOT_SCOPE = '$rootScope';\nvar $SCOPE = '$scope';\nvar $TEMPLATE_CACHE = '$templateCache';\n\nvar $$TESTABILITY = '$$testability';\nvar COMPILER_KEY = '$$angularCompiler';\n\nvar INJECTOR_KEY = '$$angularInjector';\nvar LAZY_MODULE_REF = '$$angularLazyModuleRef';\nvar NG_ZONE_KEY = '$$angularNgZone';\nvar REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nvar REQUIRE_NG_MODEL = '?ngModel';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nvar PropertyBinding = (function () {\n    /**\n     * @param {?} prop\n     * @param {?} attr\n     */\n    function PropertyBinding(prop, attr) {\n        this.prop = prop;\n        this.attr = attr;\n        this.parseBinding();\n    }\n    /**\n     * @return {?}\n     */\n    PropertyBinding.prototype.parseBinding = function () {\n        this.bracketAttr = \"[\" + this.attr + \"]\";\n        this.parenAttr = \"(\" + this.attr + \")\";\n        this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n        var /** @type {?} */ capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n        this.onAttr = \"on\" + capitalAttr;\n        this.bindAttr = \"bind\" + capitalAttr;\n        this.bindonAttr = \"bindon\" + capitalAttr;\n    };\n    return PropertyBinding;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\nvar DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n/**\n * @param {?} e\n * @return {?}\n */\nfunction onError(e) {\n    // TODO: (misko): We seem to not have a stack trace here!\n    if (console.error) {\n        console.error(e, e.stack);\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.log(e, e.stack);\n    }\n    throw e;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction controllerKey(name) {\n    return '$' + name + 'Controller';\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction directiveNormalize(name) {\n    return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n        .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n}\n/**\n * @param {?} node\n * @return {?}\n */\n\n/**\n * @param {?} component\n * @return {?}\n */\nfunction getComponentName(component) {\n    // Return the name of the component or the first line of its stringified version.\n    return ((component)).overriddenName || component.name || component.toString().split('\\n')[0];\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nvar Deferred = (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    return Deferred;\n}());\n/**\n * @record\n */\n\n/**\n * @param {?} component\n * @return {?} Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component) {\n    return typeof component.writeValue === 'function' &&\n        typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n * @param {?} ngModel\n * @param {?} component\n * @return {?}\n */\nfunction hookupNgModel(ngModel, component) {\n    if (ngModel && supportsNgModel(component)) {\n        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n        if (typeof component.registerOnTouched === 'function') {\n            component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n        }\n    }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n * @param {?} val1\n * @param {?} val2\n * @return {?}\n */\nfunction strictEquals(val1, val2) {\n    return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar DowngradeComponentAdapter = (function () {\n    /**\n     * @param {?} element\n     * @param {?} attrs\n     * @param {?} scope\n     * @param {?} ngModel\n     * @param {?} parentInjector\n     * @param {?} $injector\n     * @param {?} $compile\n     * @param {?} $parse\n     * @param {?} componentFactory\n     * @param {?} wrapCallback\n     */\n    function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n        this.element = element;\n        this.attrs = attrs;\n        this.scope = scope;\n        this.ngModel = ngModel;\n        this.parentInjector = parentInjector;\n        this.$injector = $injector;\n        this.$compile = $compile;\n        this.$parse = $parse;\n        this.componentFactory = componentFactory;\n        this.wrapCallback = wrapCallback;\n        this.implementsOnChanges = false;\n        this.inputChangeCount = 0;\n        this.inputChanges = {};\n        this.componentScope = scope.$new();\n        this.appRef = parentInjector.get(_angular_core.ApplicationRef);\n    }\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.compileContents = function () {\n        var _this = this;\n        var /** @type {?} */ compiledProjectableNodes = [];\n        var /** @type {?} */ projectableNodes = this.groupProjectableNodes();\n        var /** @type {?} */ linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); }); /** @type {?} */\n        ((this.element.empty))();\n        linkFns.forEach(function (linkFn) {\n            linkFn(_this.scope, function (clone) {\n                compiledProjectableNodes.push(clone); /** @type {?} */\n                ((_this.element.append))(clone);\n            });\n        });\n        return compiledProjectableNodes;\n    };\n    /**\n     * @param {?} projectableNodes\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n        var /** @type {?} */ childInjector = _angular_core.Injector.create([{ provide: $SCOPE, useValue: this.componentScope }], this.parentInjector);\n        this.componentRef =\n            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n        this.changeDetector = this.componentRef.changeDetectorRef;\n        this.component = this.componentRef.instance;\n        hookupNgModel(this.ngModel, this.component);\n    };\n    /**\n     * @param {?} needsNgZone\n     * @param {?=} propagateDigest\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.setupInputs = function (needsNgZone, propagateDigest) {\n        var _this = this;\n        if (propagateDigest === void 0) { propagateDigest = true; }\n        var /** @type {?} */ attrs = this.attrs;\n        var /** @type {?} */ inputs = this.componentFactory.inputs || [];\n        var _loop_1 = function (i) {\n            var /** @type {?} */ input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n            var /** @type {?} */ expr = null;\n            if (attrs.hasOwnProperty(input.attr)) {\n                var /** @type {?} */ observeFn_1 = (function (prop) {\n                    var /** @type {?} */ prevValue = INITIAL_VALUE;\n                    return function (currValue) {\n                        // Initially, both `$observe()` and `$watch()` will call this function.\n                        if (!strictEquals(prevValue, currValue)) {\n                            if (prevValue === INITIAL_VALUE) {\n                                prevValue = currValue;\n                            }\n                            _this.updateInput(prop, prevValue, currValue);\n                            prevValue = currValue;\n                        }\n                    };\n                })(input.prop);\n                attrs.$observe(input.attr, observeFn_1);\n                // Use `$watch()` (in addition to `$observe()`) in order to initialize the input  in time\n                // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                var /** @type {?} */ unwatch_1 = this_1.componentScope.$watch(function () {\n                    ((unwatch_1))();\n                    unwatch_1 = null;\n                    observeFn_1(attrs[input.attr]);\n                });\n            }\n            else if (attrs.hasOwnProperty(input.bindAttr)) {\n                expr = attrs[input.bindAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                expr = attrs[input.bracketAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                expr = attrs[input.bindonAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                expr = attrs[input.bracketParenAttr];\n            }\n            if (expr != null) {\n                var /** @type {?} */ watchFn = (function (prop) { return function (currValue, prevValue) {\n                    return _this.updateInput(prop, prevValue, currValue);\n                }; })(input.prop);\n                this_1.componentScope.$watch(expr, watchFn);\n            }\n        };\n        var this_1 = this;\n        for (var /** @type {?} */ i = 0; i < inputs.length; i++) {\n            _loop_1(/** @type {?} */ i);\n        }\n        // Invoke `ngOnChanges()` and Change Detection (when necessary)\n        var /** @type {?} */ detectChanges = function () { return _this.changeDetector.detectChanges(); };\n        var /** @type {?} */ prototype = this.componentFactory.componentType.prototype;\n        this.implementsOnChanges = !!(prototype && ((prototype)).ngOnChanges);\n        this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n            // Invoke `ngOnChanges()`\n            if (_this.implementsOnChanges) {\n                var /** @type {?} */ inputChanges = _this.inputChanges;\n                _this.inputChanges = {};\n                ((_this.component)).ngOnChanges(/** @type {?} */ ((inputChanges)));\n            }\n            // If opted out of propagating digests, invoke change detection\n            // when inputs change\n            if (!propagateDigest) {\n                detectChanges();\n            }\n        }));\n        // If not opted out of propagating digests, invoke change detection on every digest\n        if (propagateDigest) {\n            this.componentScope.$watch(this.wrapCallback(detectChanges));\n        }\n        // Attach the view so that it will be dirty-checked.\n        if (needsNgZone) {\n            this.appRef.attachView(this.componentRef.hostView);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.setupOutputs = function () {\n        var _this = this;\n        var /** @type {?} */ attrs = this.attrs;\n        var /** @type {?} */ outputs = this.componentFactory.outputs || [];\n        var _loop_2 = function (j) {\n            var /** @type {?} */ output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n            var /** @type {?} */ expr = null;\n            var /** @type {?} */ assignExpr = false;\n            var /** @type {?} */ bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n            var /** @type {?} */ bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n            if (attrs.hasOwnProperty(output.onAttr)) {\n                expr = attrs[output.onAttr];\n            }\n            else if (attrs.hasOwnProperty(output.parenAttr)) {\n                expr = attrs[output.parenAttr];\n            }\n            else if (attrs.hasOwnProperty(bindonAttr)) {\n                expr = attrs[bindonAttr];\n                assignExpr = true;\n            }\n            else if (attrs.hasOwnProperty(bracketParenAttr)) {\n                expr = attrs[bracketParenAttr];\n                assignExpr = true;\n            }\n            if (expr != null && assignExpr != null) {\n                var /** @type {?} */ getter_1 = this_2.$parse(expr);\n                var /** @type {?} */ setter_1 = getter_1.assign;\n                if (assignExpr && !setter_1) {\n                    throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n                }\n                var /** @type {?} */ emitter = (this_2.component[output.prop]);\n                if (emitter) {\n                    emitter.subscribe({\n                        next: assignExpr ? function (v) { /** @type {?} */ return ((setter_1))(_this.scope, v); } :\n                            function (v) { return getter_1(_this.scope, { '$event': v }); }\n                    });\n                }\n                else {\n                    throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this_2.componentFactory.componentType) + \"'!\");\n                }\n            }\n        };\n        var this_2 = this;\n        for (var /** @type {?} */ j = 0; j < outputs.length; j++) {\n            _loop_2(/** @type {?} */ j);\n        }\n    };\n    /**\n     * @param {?} needsNgZone\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.registerCleanup = function (needsNgZone) {\n        var _this = this;\n        ((this.element.on))('$destroy', function () {\n            _this.componentScope.$destroy();\n            _this.componentRef.destroy();\n            if (needsNgZone) {\n                _this.appRef.detachView(_this.componentRef.hostView);\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n    /**\n     * @param {?} prop\n     * @param {?} prevValue\n     * @param {?} currValue\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n        if (this.implementsOnChanges) {\n            this.inputChanges[prop] = new _angular_core.SimpleChange(prevValue, currValue, prevValue === currValue);\n        }\n        this.inputChangeCount++;\n        this.component[prop] = currValue;\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n        var /** @type {?} */ ngContentSelectors = this.componentFactory.ngContentSelectors;\n        return groupNodesBySelector(ngContentSelectors, /** @type {?} */ ((this.element.contents))());\n    };\n    return DowngradeComponentAdapter;\n}());\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n * @param {?} ngContentSelectors\n * @param {?} nodes\n * @return {?}\n */\nfunction groupNodesBySelector(ngContentSelectors, nodes) {\n    var /** @type {?} */ projectableNodes = [];\n    var /** @type {?} */ wildcardNgContentIndex;\n    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = ngContentSelectors.length; i < ii; ++i) {\n        projectableNodes[i] = [];\n    }\n    for (var /** @type {?} */ j = 0, /** @type {?} */ jj = nodes.length; j < jj; ++j) {\n        var /** @type {?} */ node = nodes[j];\n        var /** @type {?} */ ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n        if (ngContentIndex != null) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\n/**\n * @param {?} element\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction findMatchingNgContentIndex(element, ngContentSelectors) {\n    var /** @type {?} */ ngContentIndices = [];\n    var /** @type {?} */ wildcardNgContentIndex = -1;\n    for (var /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {\n        var /** @type {?} */ selector = ngContentSelectors[i];\n        if (selector === '*') {\n            wildcardNgContentIndex = i;\n        }\n        else {\n            if (matchesSelector(element, selector)) {\n                ngContentIndices.push(i);\n            }\n        }\n    }\n    ngContentIndices.sort();\n    if (wildcardNgContentIndex !== -1) {\n        ngContentIndices.push(wildcardNgContentIndex);\n    }\n    return ngContentIndices.length ? ngContentIndices[0] : null;\n}\nvar _matches;\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nfunction matchesSelector(el, selector) {\n    if (!_matches) {\n        var /** @type {?} */ elProto = (Element.prototype);\n        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    }\n    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows an Angular component to be used from AngularJS.\n *\n * \\@howToUse\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * \\@description\n *\n * A helper function that returns a factory function to be used for registering an\n * AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * The parameter contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n *\n * \\@experimental\n * @param {?} info\n * @return {?}\n */\nfunction downgradeComponent(info) {\n    var /** @type {?} */ directiveFactory = function ($compile, $injector, $parse) {\n        // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n        // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n        // (except if explicitly escaped, in which case we shouldn't force it back in).\n        // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n        // Angular zone.\n        var /** @type {?} */ needsNgZone = false;\n        var /** @type {?} */ wrapCallback = function (cb) { return cb; };\n        var /** @type {?} */ ngZone;\n        return {\n            restrict: 'E',\n            terminal: true,\n            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n            link: function (scope, element, attrs, required) {\n                // We might have to compile the contents asynchronously, because this might have been\n                // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                // been compiled.\n                var /** @type {?} */ ngModel = required[1];\n                var /** @type {?} */ parentInjector = required[0];\n                var /** @type {?} */ ranAsync = false;\n                if (!parentInjector) {\n                    var /** @type {?} */ lazyModuleRef = ($injector.get(LAZY_MODULE_REF));\n                    needsNgZone = lazyModuleRef.needsNgZone;\n                    parentInjector = lazyModuleRef.injector || (lazyModuleRef.promise);\n                }\n                var /** @type {?} */ doDowngrade = function (injector) {\n                    var /** @type {?} */ componentFactoryResolver = injector.get(_angular_core.ComponentFactoryResolver);\n                    var /** @type {?} */ componentFactory = ((componentFactoryResolver.resolveComponentFactory(info.component)));\n                    if (!componentFactory) {\n                        throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                    }\n                    var /** @type {?} */ injectorPromise = new ParentInjectorPromise$1(element);\n                    var /** @type {?} */ facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                    var /** @type {?} */ projectableNodes = facade.compileContents();\n                    facade.createComponent(projectableNodes);\n                    facade.setupInputs(needsNgZone, info.propagateDigest);\n                    facade.setupOutputs();\n                    facade.registerCleanup(needsNgZone);\n                    injectorPromise.resolve(facade.getInjector());\n                    if (ranAsync) {\n                        // If this is run async, it is possible that it is not run inside a\n                        // digest and initial input values will not be detected.\n                        scope.$evalAsync(function () { });\n                    }\n                };\n                var /** @type {?} */ downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                    if (!ngZone) {\n                        ngZone = injector.get(_angular_core.NgZone);\n                        wrapCallback = function (cb) { return function () {\n                            return _angular_core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                        }; };\n                    }\n                    wrapCallback(function () { return doDowngrade(injector); })();\n                };\n                if (isThenable(parentInjector)) {\n                    parentInjector.then(downgradeFn);\n                }\n                else {\n                    downgradeFn(parentInjector);\n                }\n                ranAsync = true;\n            }\n        };\n    };\n    // bracket-notation because of closure - see #14441\n    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n    return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nvar ParentInjectorPromise$1 = (function () {\n    /**\n     * @param {?} element\n     */\n    function ParentInjectorPromise(element) {\n        this.element = element;\n        this.injectorKey = controllerKey(INJECTOR_KEY);\n        this.callbacks = [];\n        ((\n        // Store the promise on the element.\n        element.data))(this.injectorKey, this);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.then = function (callback) {\n        if (this.injector) {\n            callback(this.injector);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    /**\n     * @param {?} injector\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.resolve = function (injector) {\n        this.injector = injector; /** @type {?} */\n        ((\n        // Store the real injector on the element.\n        this.element.data))(this.injectorKey, injector);\n        // Release the element to prevent memory leaks.\n        this.element = ((null));\n        // Run the queued callbacks.\n        this.callbacks.forEach(function (callback) { return callback(injector); });\n        this.callbacks.length = 0;\n    };\n    return ParentInjectorPromise;\n}());\n/**\n * @template T\n * @param {?} obj\n * @return {?}\n */\nfunction isThenable(obj) {\n    return isFunction(((obj)).then);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@whatItDoes\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allow an Angular service to be accessible from AngularJS.\n *\n * \\@howToUse\n *\n * First ensure that the service to be downgraded is provided in an {\\@link NgModule}\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app {\\@link NgModule}\n *\n * {\\@example upgrade/static/ts/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {\\@example upgrade/static/ts/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {\\@example upgrade/static/ts/module.ts region=\"example-app\"}\n *\n * \\@description\n *\n * Takes a `token` that identifies a service provided from Angular.\n *\n * Returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n * The factory function provides access to the Angular service that\n * is identified by the `token` parameter.\n *\n * \\@experimental\n * @param {?} token\n * @return {?}\n */\nfunction downgradeInjectable(token) {\n    var /** @type {?} */ factory = function (i) { return i.get(token); };\n    ((factory))['$inject'] = [INJECTOR_KEY];\n    return factory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n// Constants\nvar REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n/**\n * @record\n */\n\n/**\n * @record\n */\n\nvar UpgradeHelper = (function () {\n    /**\n     * @param {?} injector\n     * @param {?} name\n     * @param {?} elementRef\n     * @param {?=} directive\n     */\n    function UpgradeHelper(injector, name, elementRef, directive) {\n        this.injector = injector;\n        this.name = name;\n        this.$injector = injector.get($INJECTOR);\n        this.$compile = this.$injector.get($COMPILE);\n        this.$controller = this.$injector.get($CONTROLLER);\n        this.element = elementRef.nativeElement;\n        this.$element = element(this.element);\n        this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n    }\n    /**\n     * @param {?} $injector\n     * @param {?} name\n     * @return {?}\n     */\n    UpgradeHelper.getDirective = function ($injector, name) {\n        var /** @type {?} */ directives = $injector.get(name + 'Directive');\n        if (directives.length > 1) {\n            throw new Error(\"Only support single directive definition for: \" + name);\n        }\n        var /** @type {?} */ directive = directives[0];\n        // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n        // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n        if (directive.compile && !directive.link)\n            notSupported(name, 'compile');\n        if (directive.replace)\n            notSupported(name, 'replace');\n        if (directive.terminal)\n            notSupported(name, 'terminal');\n        return directive;\n    };\n    /**\n     * @param {?} $injector\n     * @param {?} directive\n     * @param {?=} fetchRemoteTemplate\n     * @return {?}\n     */\n    UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate) {\n        if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n        if (directive.template !== undefined) {\n            return getOrCall(directive.template);\n        }\n        else if (directive.templateUrl) {\n            var /** @type {?} */ $templateCache_1 = ($injector.get($TEMPLATE_CACHE));\n            var /** @type {?} */ url_1 = getOrCall(directive.templateUrl);\n            var /** @type {?} */ template = $templateCache_1.get(url_1);\n            if (template !== undefined) {\n                return template;\n            }\n            else if (!fetchRemoteTemplate) {\n                throw new Error('loading directive templates asynchronously is not supported');\n            }\n            return new Promise(function (resolve, reject) {\n                var /** @type {?} */ $httpBackend = ($injector.get($HTTP_BACKEND));\n                $httpBackend('GET', url_1, null, function (status, response) {\n                    if (status === 200) {\n                        resolve($templateCache_1.put(url_1, response));\n                    }\n                    else {\n                        reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                    }\n                });\n            });\n        }\n        else {\n            throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n        }\n    };\n    /**\n     * @param {?} controllerType\n     * @param {?} $scope\n     * @return {?}\n     */\n    UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n        // TODO: Document that we do not pre-assign bindings on the controller instance.\n        // Quoted properties below so that this code can be optimized with Closure Compiler.\n        var /** @type {?} */ locals = { '$scope': $scope, '$element': this.$element };\n        var /** @type {?} */ controller = this.$controller(controllerType, locals, null, this.directive.controllerAs); /** @type {?} */\n        ((this.$element.data))(controllerKey(/** @type {?} */ ((this.directive.name))), controller);\n        return controller;\n    };\n    /**\n     * @param {?=} template\n     * @return {?}\n     */\n    UpgradeHelper.prototype.compileTemplate = function (template) {\n        if (template === undefined) {\n            template = (UpgradeHelper.getTemplate(this.$injector, this.directive));\n        }\n        return this.compileHtml(template);\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.prepareTransclusion = function () {\n        var _this = this;\n        var /** @type {?} */ transclude = this.directive.transclude;\n        var /** @type {?} */ contentChildNodes = this.extractChildNodes();\n        var /** @type {?} */ $template = contentChildNodes;\n        var /** @type {?} */ attachChildrenFn = function (scope, cloneAttach) { /** @type {?} */ return ((cloneAttach))($template, scope); };\n        if (transclude) {\n            var /** @type {?} */ slots_1 = Object.create(null);\n            if (typeof transclude === 'object') {\n                $template = [];\n                var /** @type {?} */ slotMap_1 = Object.create(null);\n                var /** @type {?} */ filledSlots_1 = Object.create(null);\n                // Parse the element selectors.\n                Object.keys(transclude).forEach(function (slotName) {\n                    var /** @type {?} */ selector = transclude[slotName];\n                    var /** @type {?} */ optional = selector.charAt(0) === '?';\n                    selector = optional ? selector.substring(1) : selector;\n                    slotMap_1[selector] = slotName;\n                    slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                    filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                });\n                // Add the matching elements into their slot.\n                contentChildNodes.forEach(function (node) {\n                    var /** @type {?} */ slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                    if (slotName) {\n                        filledSlots_1[slotName] = true;\n                        slots_1[slotName] = slots_1[slotName] || [];\n                        slots_1[slotName].push(node);\n                    }\n                    else {\n                        $template.push(node);\n                    }\n                });\n                // Check for required slots that were not filled.\n                Object.keys(filledSlots_1).forEach(function (slotName) {\n                    if (!filledSlots_1[slotName]) {\n                        throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                    }\n                });\n                Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                    var /** @type {?} */ nodes = slots_1[slotName];\n                    slots_1[slotName] = function (scope, cloneAttach) { /** @type {?} */ return ((cloneAttach))(nodes, scope); };\n                });\n            }\n            // Attach `$$slots` to default slot transclude fn.\n            attachChildrenFn.$$slots = slots_1;\n            // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n            // removes all text content after the first interpolation and updates it later, after\n            // evaluating the expressions. This would result in AngularJS failing to recognize text\n            // nodes that start with an interpolation as transcluded content and use the fallback\n            // content instead.\n            // To avoid this issue, we add a\n            // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n            // to empty text nodes (which can only be a result of Angular removing their initial content).\n            // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n            //       will still fail to be detected by AngularJS v1.6+\n            $template.forEach(function (node) {\n                if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                    node.nodeValue = '\\u200C';\n                }\n            });\n        }\n        return attachChildrenFn;\n    };\n    /**\n     * @param {?} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n        var /** @type {?} */ directiveRequire = this.getDirectiveRequire();\n        var /** @type {?} */ requiredControllers = this.resolveRequire(directiveRequire);\n        if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n            var /** @type {?} */ requiredControllersMap_1 = (requiredControllers);\n            Object.keys(requiredControllersMap_1).forEach(function (key) {\n                controllerInstance[key] = requiredControllersMap_1[key];\n            });\n        }\n        return requiredControllers;\n    };\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    UpgradeHelper.prototype.compileHtml = function (html) {\n        this.element.innerHTML = html;\n        return this.$compile(this.element.childNodes);\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.extractChildNodes = function () {\n        var /** @type {?} */ childNodes = [];\n        var /** @type {?} */ childNode;\n        while (childNode = this.element.firstChild) {\n            this.element.removeChild(childNode);\n            childNodes.push(childNode);\n        }\n        return childNodes;\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.getDirectiveRequire = function () {\n        var /** @type {?} */ require = this.directive.require || (((this.directive.controller && this.directive.name)));\n        if (isMap(require)) {\n            Object.keys(require).forEach(function (key) {\n                var /** @type {?} */ value = require[key];\n                var /** @type {?} */ match = ((value.match(REQUIRE_PREFIX_RE)));\n                var /** @type {?} */ name = value.substring(match[0].length);\n                if (!name) {\n                    require[key] = match[0] + key;\n                }\n            });\n        }\n        return require;\n    };\n    /**\n     * @param {?} require\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n        var _this = this;\n        if (!require) {\n            return null;\n        }\n        else if (Array.isArray(require)) {\n            return require.map(function (req) { return _this.resolveRequire(req); });\n        }\n        else if (typeof require === 'object') {\n            var /** @type {?} */ value_1 = {};\n            Object.keys(require).forEach(function (key) { return value_1[key] = ((_this.resolveRequire(require[key]))); });\n            return value_1;\n        }\n        else if (typeof require === 'string') {\n            var /** @type {?} */ match = ((require.match(REQUIRE_PREFIX_RE)));\n            var /** @type {?} */ inheritType = match[1] || match[3];\n            var /** @type {?} */ name_1 = require.substring(match[0].length);\n            var /** @type {?} */ isOptional = !!match[2];\n            var /** @type {?} */ searchParents = !!inheritType;\n            var /** @type {?} */ startOnParent = inheritType === '^^';\n            var /** @type {?} */ ctrlKey = controllerKey(name_1);\n            var /** @type {?} */ elem = startOnParent ? ((this.$element.parent))() : this.$element;\n            var /** @type {?} */ value = searchParents ? ((elem.inheritedData))(ctrlKey) : ((elem.data))(ctrlKey);\n            if (!value && !isOptional) {\n                throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n            }\n            return value;\n        }\n        else {\n            throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n        }\n    };\n    return UpgradeHelper;\n}());\n/**\n * @template T\n * @param {?} property\n * @return {?}\n */\nfunction getOrCall(property) {\n    return isFunction(property) ? property() : property;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isMap(value) {\n    return value && !Array.isArray(value) && typeof value === 'object';\n}\n/**\n * @param {?} name\n * @param {?} feature\n * @return {?}\n */\nfunction notSupported(name, feature) {\n    throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CAMEL_CASE = /([A-Z])/g;\nvar INITIAL_VALUE$1 = {\n    __UNINITIALIZED__: true\n};\nvar NOT_SUPPORTED = 'NOT_SUPPORTED';\nvar UpgradeNg1ComponentAdapterBuilder = (function () {\n    /**\n     * @param {?} name\n     */\n    function UpgradeNg1ComponentAdapterBuilder(name) {\n        this.name = name;\n        this.inputs = [];\n        this.inputsRename = [];\n        this.outputs = [];\n        this.outputsRename = [];\n        this.propertyOutputs = [];\n        this.checkProperties = [];\n        this.propertyMap = {};\n        this.directive = null;\n        var /** @type {?} */ selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });\n        var /** @type {?} */ self = this;\n        var MyClass = (function () {\n            /**\n             * @param {?} scope\n             * @param {?} injector\n             * @param {?} elementRef\n             */\n            function MyClass(scope, injector, elementRef) {\n                var /** @type {?} */ helper = new UpgradeHelper(injector, name, elementRef, this.directive);\n                return (new UpgradeNg1ComponentAdapter(helper, scope, self.template, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap));\n            }\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnInit = function () {\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnChanges = function () {\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngDoCheck = function () {\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnDestroy = function () {\n            };\n            return MyClass;\n        }());\n        MyClass.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: selector, inputs: this.inputsRename, outputs: this.outputsRename },] },\n        ];\n        /** @nocollapse */\n        MyClass.ctorParameters = function () { return [\n            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [$SCOPE,] },] },\n            { type: _angular_core.Injector, },\n            { type: _angular_core.ElementRef, },\n        ]; };\n        \n        this.type = MyClass;\n    }\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = function () {\n        var _this = this;\n        var /** @type {?} */ btcIsObject = typeof ((this.directive)).bindToController === 'object';\n        if (btcIsObject && Object.keys(/** @type {?} */ ((this.directive)).scope).length) {\n            throw new Error(\"Binding definitions on scope and controller at the same time are not supported.\");\n        }\n        var /** @type {?} */ context = (btcIsObject) ? ((this.directive)).bindToController : ((this.directive)).scope;\n        if (typeof context == 'object') {\n            Object.keys(context).forEach(function (propName) {\n                var /** @type {?} */ definition = context[propName];\n                var /** @type {?} */ bindingType = definition.charAt(0);\n                var /** @type {?} */ bindingOptions = definition.charAt(1);\n                var /** @type {?} */ attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n                // QUESTION: What about `=*`? Ignore? Throw? Support?\n                var /** @type {?} */ inputName = \"input_\" + attrName;\n                var /** @type {?} */ inputNameRename = inputName + \": \" + attrName;\n                var /** @type {?} */ outputName = \"output_\" + attrName;\n                var /** @type {?} */ outputNameRename = outputName + \": \" + attrName;\n                var /** @type {?} */ outputNameRenameChange = outputNameRename + \"Change\";\n                switch (bindingType) {\n                    case '@':\n                    case '<':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        break;\n                    case '=':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRenameChange);\n                        _this.propertyMap[outputName] = propName;\n                        _this.checkProperties.push(propName);\n                        _this.propertyOutputs.push(outputName);\n                        break;\n                    case '&':\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRename);\n                        _this.propertyMap[outputName] = propName;\n                        break;\n                    default:\n                        var /** @type {?} */ json = JSON.stringify(context);\n                        throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                }\n            });\n        }\n    };\n    /**\n     * Upgrade ng1 components into Angular.\n     * @param {?} exportedComponents\n     * @param {?} $injector\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapterBuilder.resolve = function (exportedComponents, $injector) {\n        var /** @type {?} */ promises = Object.keys(exportedComponents).map(function (name) {\n            var /** @type {?} */ exportedComponent = exportedComponents[name];\n            exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n            exportedComponent.extractBindings();\n            return Promise\n                .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n                .then(function (template) { return exportedComponent.template = template; });\n        });\n        return Promise.all(promises);\n    };\n    return UpgradeNg1ComponentAdapterBuilder;\n}());\nvar UpgradeNg1ComponentAdapter = (function () {\n    /**\n     * @param {?} helper\n     * @param {?} scope\n     * @param {?} template\n     * @param {?} inputs\n     * @param {?} outputs\n     * @param {?} propOuts\n     * @param {?} checkProperties\n     * @param {?} propertyMap\n     */\n    function UpgradeNg1ComponentAdapter(helper, scope, template, inputs, outputs, propOuts, checkProperties, propertyMap) {\n        this.helper = helper;\n        this.template = template;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.propOuts = propOuts;\n        this.checkProperties = checkProperties;\n        this.propertyMap = propertyMap;\n        this.controllerInstance = null;\n        this.destinationObj = null;\n        this.checkLastValues = [];\n        this.$element = null;\n        this.directive = helper.directive;\n        this.element = helper.element;\n        this.$element = helper.$element;\n        this.componentScope = scope.$new(!!this.directive.scope);\n        var /** @type {?} */ controllerType = this.directive.controller;\n        if (this.directive.bindToController && controllerType) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n            this.destinationObj = this.controllerInstance;\n        }\n        else {\n            this.destinationObj = this.componentScope;\n        }\n        for (var /** @type {?} */ i = 0; i < inputs.length; i++) {\n            ((this))[inputs[i]] = null;\n        }\n        for (var /** @type {?} */ j = 0; j < outputs.length; j++) {\n            var /** @type {?} */ emitter = ((this))[outputs[j]] = new _angular_core.EventEmitter();\n            this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.emit(value); }; })(emitter));\n        }\n        for (var /** @type {?} */ k = 0; k < propOuts.length; k++) {\n            this.checkLastValues.push(INITIAL_VALUE$1);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnInit = function () {\n        // Collect contents, insert and compile template\n        var /** @type {?} */ attachChildNodes = this.helper.prepareTransclusion();\n        var /** @type {?} */ linkFn = this.helper.compileTemplate(this.template);\n        // Instantiate controller (if not already done so)\n        var /** @type {?} */ controllerType = this.directive.controller;\n        var /** @type {?} */ bindToController = this.directive.bindToController;\n        if (controllerType && !bindToController) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n        }\n        // Require other controllers\n        var /** @type {?} */ requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n        // Hook: $onInit\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n            this.controllerInstance.$onInit();\n        }\n        // Linking\n        var /** @type {?} */ link = this.directive.link;\n        var /** @type {?} */ preLink = (typeof link == 'object') && ((link)).pre;\n        var /** @type {?} */ postLink = (typeof link == 'object') ? ((link)).post : link;\n        var /** @type {?} */ attrs = NOT_SUPPORTED;\n        var /** @type {?} */ transcludeFn = NOT_SUPPORTED;\n        if (preLink) {\n            preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        linkFn(this.componentScope, /** @type {?} */ ((null)), { parentBoundTranscludeFn: attachChildNodes });\n        if (postLink) {\n            postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        // Hook: $postLink\n        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n            this.controllerInstance.$postLink();\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        var /** @type {?} */ ng1Changes = {};\n        Object.keys(changes).forEach(function (name) {\n            var /** @type {?} */ change = changes[name];\n            _this.setComponentProperty(name, change.currentValue);\n            ng1Changes[_this.propertyMap[name]] = change;\n        });\n        if (isFunction(/** @type {?} */ ((this.destinationObj)).$onChanges)) {\n            ((((this.destinationObj)).$onChanges))(ng1Changes);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngDoCheck = function () {\n        var _this = this;\n        var /** @type {?} */ destinationObj = this.destinationObj;\n        var /** @type {?} */ lastValues = this.checkLastValues;\n        var /** @type {?} */ checkProperties = this.checkProperties;\n        var /** @type {?} */ propOuts = this.propOuts;\n        checkProperties.forEach(function (propName, i) {\n            var /** @type {?} */ value = ((destinationObj))[propName];\n            var /** @type {?} */ last = lastValues[i];\n            if (!strictEquals(last, value)) {\n                var /** @type {?} */ eventEmitter = ((_this))[propOuts[i]];\n                eventEmitter.emit(lastValues[i] = value);\n            }\n        });\n        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n            this.controllerInstance.$doCheck();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnDestroy = function () {\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n            this.controllerInstance.$onDestroy();\n        }\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.setComponentProperty = function (name, value) {\n        ((this.destinationObj))[this.propertyMap[name]] = value;\n    };\n    return UpgradeNg1ComponentAdapter;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar upgradeCount = 0;\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * ## Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * \\@Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * \\@NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nvar UpgradeAdapter = (function () {\n    /**\n     * @param {?} ng2AppModule\n     * @param {?=} compilerOptions\n     */\n    function UpgradeAdapter(ng2AppModule, compilerOptions) {\n        this.ng2AppModule = ng2AppModule;\n        this.compilerOptions = compilerOptions;\n        this.idPrefix = \"NG2_UPGRADE_\" + upgradeCount++ + \"_\";\n        this.downgradedComponents = [];\n        /**\n         * An internal map of ng1 components which need to up upgraded to ng2.\n         *\n         * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n         * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n         *\n         * \\@internal\n         */\n        this.ng1ComponentsToBeUpgraded = {};\n        this.upgradedProviders = [];\n        this.moduleRef = null;\n        if (!ng2AppModule) {\n            throw new Error('UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n        }\n    }\n    /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from \\@angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * \\@Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     *   \\@Input() salutation: string;\n     *   \\@Input() name: string;\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} component\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.downgradeNg2Component = function (component) {\n        this.downgradedComponents.push(component);\n        return downgradeComponent({ component: component });\n    };\n    /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} name\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.upgradeNg1Component = function (name) {\n        if (((this.ng1ComponentsToBeUpgraded)).hasOwnProperty(name)) {\n            return this.ng1ComponentsToBeUpgraded[name].type;\n        }\n        else {\n            return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n                .type;\n        }\n    };\n    /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param {?=} modules any AngularJS modules that the upgrade module should depend upon\n     * @return {?} an {\\@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    UpgradeAdapter.prototype.registerForNg1Tests = function (modules) {\n        var _this = this;\n        var /** @type {?} */ windowNgMock = ((window))['angular'].mock;\n        if (!windowNgMock || !windowNgMock.module) {\n            throw new Error('Failed to find \\'angular.mock.module\\'.');\n        }\n        this.declareNg1Module(modules);\n        windowNgMock.module(this.ng1Module.name);\n        var /** @type {?} */ upgrade = new UpgradeAdapterRef();\n        this.ng2BootstrapDeferred.promise.then(function (ng1Injector) { ((upgrade))._bootstrapDone(_this.moduleRef, ng1Injector); }, onError);\n        return upgrade;\n    };\n    /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     * @param {?} element\n     * @param {?=} modules\n     * @param {?=} config\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.bootstrap = function (element$$1, modules, config) {\n        var _this = this;\n        this.declareNg1Module(modules);\n        var /** @type {?} */ upgrade = new UpgradeAdapterRef();\n        // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n        var /** @type {?} */ windowAngular = ((window) /** TODO #???? */)['angular'];\n        windowAngular.resumeBootstrap = undefined;\n        this.ngZone.run(function () { bootstrap(element$$1, [_this.ng1Module.name], /** @type {?} */ ((config))); });\n        var /** @type {?} */ ng1BootstrapPromise = new Promise(function (resolve) {\n            if (windowAngular.resumeBootstrap) {\n                var /** @type {?} */ originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                windowAngular.resumeBootstrap = function () {\n                    windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                    windowAngular.resumeBootstrap.apply(this, arguments);\n                    resolve();\n                };\n            }\n            else {\n                resolve();\n            }\n        });\n        Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(function (_a) {\n            var ng1Injector = _a[0];\n            ((element(element$$1).data))(controllerKey(INJECTOR_KEY), /** @type {?} */ ((_this.moduleRef)).injector); /** @type {?} */\n            ((_this.moduleRef)).injector.get(_angular_core.NgZone).run(function () { ((upgrade))._bootstrapDone(_this.moduleRef, ng1Injector); });\n        }, onError);\n        return upgrade;\n    };\n    /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * \\@Injectable()\n     * class Example {\n     *   constructor(\\@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     * @param {?} name\n     * @param {?=} options\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.upgradeNg1Provider = function (name, options) {\n        var /** @type {?} */ token = options && options.asToken || name;\n        this.upgradedProviders.push({\n            provide: token,\n            useFactory: function ($injector) { return $injector.get(name); },\n            deps: [$INJECTOR]\n        });\n    };\n    /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     * @param {?} token\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.downgradeNg2Provider = function (token) { return downgradeInjectable(token); };\n    /**\n     * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n     * hybrid application.\n     *\n     * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n     *\n     * @param {?=} modules The AngularJS modules that this upgrade module should depend upon.\n     * @return {?} The AngularJS upgrade module that is declared by this method\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     * upgradeAdapter.declareNg1Module(['heroApp']);\n     * ```\n     */\n    UpgradeAdapter.prototype.declareNg1Module = function (modules) {\n        var _this = this;\n        if (modules === void 0) { modules = []; }\n        var /** @type {?} */ delayApplyExps = [];\n        var /** @type {?} */ original$applyFn;\n        var /** @type {?} */ rootScopePrototype;\n        var /** @type {?} */ rootScope;\n        var /** @type {?} */ upgradeAdapter = this;\n        var /** @type {?} */ ng1Module = this.ng1Module = module$1(this.idPrefix, modules);\n        var /** @type {?} */ platformRef = _angular_platformBrowserDynamic.platformBrowserDynamic();\n        this.ngZone = new _angular_core.NgZone({ enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec') });\n        this.ng2BootstrapDeferred = new Deferred();\n        ng1Module.factory(INJECTOR_KEY, function () { /** @type {?} */ return ((_this.moduleRef)).injector.get(_angular_core.Injector); })\n            .factory(LAZY_MODULE_REF, [INJECTOR_KEY, function (injector) { return ({ injector: injector, needsInNgZone: false }); }])\n            .constant(NG_ZONE_KEY, this.ngZone)\n            .factory(COMPILER_KEY, function () { /** @type {?} */ return ((_this.moduleRef)).injector.get(_angular_core.Compiler); })\n            .config([\n            '$provide', '$injector',\n            function (provide, ng1Injector) {\n                provide.decorator($ROOT_SCOPE, [\n                    '$delegate',\n                    function (rootScopeDelegate) {\n                        // Capture the root apply so that we can delay first call to $apply until we\n                        // bootstrap Angular and then we replay and restore the $apply.\n                        rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                        if (rootScopePrototype.hasOwnProperty('$apply')) {\n                            original$applyFn = rootScopePrototype.$apply;\n                            rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };\n                        }\n                        else {\n                            throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                        }\n                        return rootScope = rootScopeDelegate;\n                    }\n                ]);\n                if (ng1Injector.has($$TESTABILITY)) {\n                    provide.decorator($$TESTABILITY, [\n                        '$delegate',\n                        function (testabilityDelegate) {\n                            var /** @type {?} */ originalWhenStable = testabilityDelegate.whenStable;\n                            // Cannot use arrow function below because we need the context\n                            var /** @type {?} */ newWhenStable = function (callback) {\n                                originalWhenStable.call(this, function () {\n                                    var /** @type {?} */ ng2Testability = ((upgradeAdapter.moduleRef)).injector.get(_angular_core.Testability);\n                                    if (ng2Testability.isStable()) {\n                                        callback.apply(this, arguments);\n                                    }\n                                    else {\n                                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                                    }\n                                });\n                            };\n                            testabilityDelegate.whenStable = newWhenStable;\n                            return testabilityDelegate;\n                        }\n                    ]);\n                }\n            }\n        ]);\n        ng1Module.run([\n            '$injector', '$rootScope',\n            function (ng1Injector, rootScope) {\n                UpgradeNg1ComponentAdapterBuilder.resolve(_this.ng1ComponentsToBeUpgraded, ng1Injector)\n                    .then(function () {\n                    var DynamicNgUpgradeModule = (function () {\n                        function DynamicNgUpgradeModule() {\n                        }\n                        /**\n                         * @return {?}\n                         */\n                        DynamicNgUpgradeModule.prototype.ngDoBootstrap = function () { };\n                        return DynamicNgUpgradeModule;\n                    }());\n                    DynamicNgUpgradeModule.decorators = [\n                        { type: _angular_core.NgModule, args: [{\n                                    providers: [\n                                        { provide: $INJECTOR, useFactory: function () { return ng1Injector; } },\n                                        { provide: $COMPILE, useFactory: function () { return ng1Injector.get($COMPILE); } },\n                                        _this.upgradedProviders\n                                    ],\n                                    imports: [_this.ng2AppModule],\n                                    entryComponents: _this.downgradedComponents\n                                },] },\n                    ];\n                    /** @nocollapse */\n                    DynamicNgUpgradeModule.ctorParameters = function () { return []; };\n                    ((platformRef))\n                        ._bootstrapModuleWithZone(DynamicNgUpgradeModule, _this.compilerOptions, _this.ngZone)\n                        .then(function (ref) {\n                        _this.moduleRef = ref;\n                        _this.ngZone.run(function () {\n                            if (rootScopePrototype) {\n                                rootScopePrototype.$apply = original$applyFn; // restore original $apply\n                                while (delayApplyExps.length) {\n                                    rootScope.$apply(delayApplyExps.shift());\n                                }\n                                rootScopePrototype = null;\n                            }\n                        });\n                    })\n                        .then(function () { return _this.ng2BootstrapDeferred.resolve(ng1Injector); }, onError)\n                        .then(function () {\n                        var /** @type {?} */ subscription = _this.ngZone.onMicrotaskEmpty.subscribe({ next: function () { return rootScope.$digest(); } });\n                        rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                    });\n                })\n                    .catch(function (e) { return _this.ng2BootstrapDeferred.reject(e); });\n            }\n        ]);\n        return ng1Module;\n    };\n    return UpgradeAdapter;\n}());\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nvar UpgradeAdapterRef = (function () {\n    function UpgradeAdapterRef() {\n        this._readyFn = null;\n        this.ng1RootScope = ((null));\n        this.ng1Injector = ((null));\n        this.ng2ModuleRef = ((null));\n        this.ng2Injector = ((null));\n    }\n    /**\n     * @param {?} ngModuleRef\n     * @param {?} ng1Injector\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype._bootstrapDone = function (ngModuleRef, ng1Injector) {\n        this.ng2ModuleRef = ngModuleRef;\n        this.ng2Injector = ngModuleRef.injector;\n        this.ng1Injector = ng1Injector;\n        this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n        this._readyFn && this._readyFn(this);\n    };\n    /**\n     * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n     * application has been bootstrapped.\n     *\n     * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n     * require a call to `$apply()`.\n     * @param {?} fn\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype.ready = function (fn) { this._readyFn = fn; };\n    /**\n     * Dispose of running hybrid AngularJS / Angular application.\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype.dispose = function () {\n        ((this.ng1Injector)).get($ROOT_SCOPE).$destroy(); /** @type {?} */\n        ((this.ng2ModuleRef)).destroy();\n    };\n    return UpgradeAdapterRef;\n}());\n\nexports.VERSION = VERSION;\nexports.UpgradeAdapter = UpgradeAdapter;\nexports.UpgradeAdapterRef = UpgradeAdapterRef;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=upgrade.umd.js.map\n"]}
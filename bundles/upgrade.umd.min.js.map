{"version":3,"sources":["packages/upgrade/upgrade.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","upgrade","core","platformBrowserDynamic","this","VERSION","Version","__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","noNg","Error","angular","bootstrap","element","version","undefined","resumeBootstrap","getTestability","window","hasOwnProperty","e","$COMPILE","$CONTROLLER","$INJECTOR","$SCOPE","INJECTOR_KEY","REQUIRE_INJECTOR","PropertyBinding","prop","attr","parseBinding","prototype","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","bindAttr","bindonAttr","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","onError","console","error","stack","log","controllerKey","name","getComponentName","component","overriddenName","toString","split","isFunction","value","Deferred","_this","promise","Promise","res","rej","resolve","reject","strictEquals","val1","val2","_matches","INITIAL_VALUE","__UNINITIALIZED__","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$injector","$compile","$parse","componentFactory","wrapCallback","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compileContents","compiledProjectableNodes","linkFns","groupProjectableNodes","map","nodes","empty","forEach","linkFn","clone","push","append","createComponent","projectableNodes","childInjector","Injector","create","providers","provide","useValue","parent","componentRef","viewChangeDetector","injector","get","ChangeDetectorRef","changeDetector","changeDetectorRef","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","hookupNgModel","supportsNgModel","writeValue","registerOnChange","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","setupInputs","needsNgZone","propagateDigest","inputs","_loop_1","prevValue","input","propName","templateName","expr","observeFn_1","currValue","updateInput","$observe","unwatch_1","this_1","$watch","watchFn","detectChanges","componentType","ngOnChanges","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","setupOutputs","outputs","j","output","substring","subscribeToOutput","isAssignment","getter","setter","assign","emitter","subscribe","next","v","$event","registerCleanup","destroyComponentRef","destroy","destroyed","on","$destroy","$on","unregisterApplication","getInjector","SimpleChange","groupNodesBySelector","ngContentSelectors","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","contents","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","call","ParentInjectorPromise","injectorKey","callbacks","data","then","callback","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","link","notSupported","replace","terminal","getTemplate","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","$httpBackend","status","response","put","buildController","controllerType","$scope","controller","controllerAs","compileTemplate","compileHtml","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","attachChildrenFn","cloneAttachFn","$template","slots_1","slotMap_1","filledSlots_1","keys","slotName","optional","directiveNormalize","_","letter","nodeName","toLowerCase","filter","cloneAttach","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","controllerInstance","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","isMap","requiredControllersMap_1","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","Array","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","inheritedData","property","feature","CAMEL_CASE","INITIAL_VALUE$1","UpgradeNg1ComponentAdapterBuilder","inputsRename","outputsRename","propertyOutputs","checkProperties","propertyMap","self","all","MyClass","helper","UpgradeNg1ComponentAdapter","ngOnInit","ngDoCheck","ngOnDestroy","Directive","__param","paramIndex","decorator","Inject","ElementRef","type","extractBindings","btcIsObject","context","definition","bindingType","bindingOptions","attrName","inputName","inputNameRename","outputName","outputNameRename","outputNameRenameChange","json","JSON","stringify","exportedComponents","promises","exportedComponent","propOuts","destinationObj","checkLastValues","EventEmitter","indexOf","setComponentProperty","emit","k","attachChildNodes","$onInit","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ng1Changes","change","currentValue","$onChanges","lastValues","$doCheck","$onDestroy","upgradeCount","UpgradeAdapter","ng2AppModule","compilerOptions","idPrefix","downgradedComponents","ng1ComponentsToBeUpgraded","upgradedProviders","moduleRef","downgradeNg2Component","downgradeComponent","info","directiveFactory","ngZone","cb","restrict","required","ranAsync","lazyModuleRef","doDowngrade","ComponentFactoryResolver","resolveComponentFactory","injectorPromise","facade","$evalAsync","downgradeFn","NgZone","isInAngularZone","run","isThenable","obj","upgradeNg1Component","registerForNg1Tests","modules","windowNgMock","mock","declareNg1Module","ng1Module","UpgradeAdapterRef","ng2BootstrapDeferred","ng1Injector","_bootstrapDone","element$$1","config","windowAngular","ng1BootstrapPromise","originalResumeBootstrap_1","apply","_a","__read","o","n","m","Symbol","iterator","ar","done","upgradeNg1Provider","options","asToken","useFactory","deps","downgradeNg2Provider","token","downgradeInjectable","original$applyFn","rootScopePrototype","delayApplyExps","upgradeAdapter","platformRef","enableLongStackTrace","Zone","constant","Compiler","rootScopeDelegate","constructor","$apply","exp","has","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","rootScope","ngModule","imports","entryComponents","DynamicNgUpgradeModule","ngDoBootstrap","NgModule","bootstrapModule","ref","shift","subscription","onMicrotaskEmpty","$digest","unsubscribe","catch","_readyFn","ng1RootScope","ng2ModuleRef","ng2Injector","ngModuleRef","ready","fn","dispose"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.1.0-beta.3+122.sha-8dfcc78\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser-dynamic')) :\n    typeof define === 'function' && define.amd ? define('@angular/upgrade', ['exports', '@angular/core', '@angular/platform-browser-dynamic'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.upgrade = {}),global.ng.core,global.ng.platformBrowserDynamic));\n}(this, (function (exports,core,platformBrowserDynamic) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var VERSION = new core.Version('6.1.0-beta.3+122.sha-8dfcc78');\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noNg() {\n        throw new Error('AngularJS v1.x is not loaded!');\n    }\n    var angular = {\n        bootstrap: noNg,\n        module: noNg,\n        element: noNg,\n        version: undefined,\n        resumeBootstrap: noNg,\n        getTestability: noNg\n    };\n    try {\n        if (window.hasOwnProperty('angular')) {\n            angular = window.angular;\n        }\n    }\n    catch (e) {\n        // ignore in CJS mode.\n    }\n    var bootstrap = function (e, modules, config) {\n        return angular.bootstrap(e, modules, config);\n    };\n    var module$1 = function (prefix, dependencies) {\n        return angular.module(prefix, dependencies);\n    };\n    var element = function (e) { return angular.element(e); };\n    var version = angular.version;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var $COMPILE = '$compile';\n    var $CONTROLLER = '$controller';\n    var $HTTP_BACKEND = '$httpBackend';\n    var $INJECTOR = '$injector';\n    var $PARSE = '$parse';\n    var $ROOT_SCOPE = '$rootScope';\n    var $SCOPE = '$scope';\n    var $TEMPLATE_CACHE = '$templateCache';\n    var $$TESTABILITY = '$$testability';\n    var COMPILER_KEY = '$$angularCompiler';\n    var INJECTOR_KEY = '$$angularInjector';\n    var LAZY_MODULE_REF = '$$angularLazyModuleRef';\n    var NG_ZONE_KEY = '$$angularNgZone';\n    var REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\n    var REQUIRE_NG_MODEL = '?ngModel';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A `PropertyBinding` represents a mapping between a property name\n     * and an attribute name. It is parsed from a string of the form\n     * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n     * and attribute have the same identifier.\n     */\n    var PropertyBinding = /** @class */ (function () {\n        function PropertyBinding(prop, attr) {\n            this.prop = prop;\n            this.attr = attr;\n            this.parseBinding();\n        }\n        PropertyBinding.prototype.parseBinding = function () {\n            this.bracketAttr = \"[\" + this.attr + \"]\";\n            this.parenAttr = \"(\" + this.attr + \")\";\n            this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n            var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n            this.onAttr = \"on\" + capitalAttr;\n            this.bindAttr = \"bind\" + capitalAttr;\n            this.bindonAttr = \"bindon\" + capitalAttr;\n        };\n        return PropertyBinding;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\n    var DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n    function onError(e) {\n        // TODO: (misko): We seem to not have a stack trace here!\n        if (console.error) {\n            console.error(e, e.stack);\n        }\n        else {\n            // tslint:disable-next-line:no-console\n            console.log(e, e.stack);\n        }\n        throw e;\n    }\n    function controllerKey(name) {\n        return '$' + name + 'Controller';\n    }\n    function directiveNormalize(name) {\n        return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n            .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n    }\n    function getComponentName(component) {\n        // Return the name of the component or the first line of its stringified version.\n        return component.overriddenName || component.name || component.toString().split('\\n')[0];\n    }\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n    var Deferred = /** @class */ (function () {\n        function Deferred() {\n            var _this = this;\n            this.promise = new Promise(function (res, rej) {\n                _this.resolve = res;\n                _this.reject = rej;\n            });\n        }\n        return Deferred;\n    }());\n    /**\n     * @return Whether the passed-in component implements the subset of the\n     *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n     *     compatibility.\n     */\n    function supportsNgModel(component) {\n        return typeof component.writeValue === 'function' &&\n            typeof component.registerOnChange === 'function';\n    }\n    /**\n     * Glue the AngularJS `NgModelController` (if it exists) to the component\n     * (if it implements the needed subset of the `ControlValueAccessor` interface).\n     */\n    function hookupNgModel(ngModel, component) {\n        if (ngModel && supportsNgModel(component)) {\n            ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n            component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n            if (typeof component.registerOnTouched === 'function') {\n                component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n            }\n        }\n    }\n    /**\n     * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n     */\n    function strictEquals(val1, val2) {\n        return val1 === val2 || (val1 !== val1 && val2 !== val2);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var INITIAL_VALUE = {\n        __UNINITIALIZED__: true\n    };\n    var DowngradeComponentAdapter = /** @class */ (function () {\n        function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n            this.element = element;\n            this.attrs = attrs;\n            this.scope = scope;\n            this.ngModel = ngModel;\n            this.parentInjector = parentInjector;\n            this.$injector = $injector;\n            this.$compile = $compile;\n            this.$parse = $parse;\n            this.componentFactory = componentFactory;\n            this.wrapCallback = wrapCallback;\n            this.implementsOnChanges = false;\n            this.inputChangeCount = 0;\n            this.inputChanges = {};\n            this.componentScope = scope.$new();\n        }\n        DowngradeComponentAdapter.prototype.compileContents = function () {\n            var _this = this;\n            var compiledProjectableNodes = [];\n            var projectableNodes = this.groupProjectableNodes();\n            var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n            this.element.empty();\n            linkFns.forEach(function (linkFn) {\n                linkFn(_this.scope, function (clone) {\n                    compiledProjectableNodes.push(clone);\n                    _this.element.append(clone);\n                });\n            });\n            return compiledProjectableNodes;\n        };\n        DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n            var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n            var childInjector = core.Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n            this.componentRef =\n                this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n            this.viewChangeDetector = this.componentRef.injector.get(core.ChangeDetectorRef);\n            this.changeDetector = this.componentRef.changeDetectorRef;\n            this.component = this.componentRef.instance;\n            // testability hook is commonly added during component bootstrap in\n            // packages/core/src/application_ref.bootstrap()\n            // in downgraded application, component creation will take place here as well as adding the\n            // testability hook.\n            var testability = this.componentRef.injector.get(core.Testability, null);\n            if (testability) {\n                this.componentRef.injector.get(core.TestabilityRegistry)\n                    .registerApplication(this.componentRef.location.nativeElement, testability);\n            }\n            hookupNgModel(this.ngModel, this.component);\n        };\n        DowngradeComponentAdapter.prototype.setupInputs = function (needsNgZone, propagateDigest) {\n            var _this = this;\n            if (propagateDigest === void 0) { propagateDigest = true; }\n            var attrs = this.attrs;\n            var inputs = this.componentFactory.inputs || [];\n            var _loop_1 = function (i) {\n                var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n                var expr = null;\n                if (attrs.hasOwnProperty(input.attr)) {\n                    var observeFn_1 = (function (prop) {\n                        var prevValue = INITIAL_VALUE;\n                        return function (currValue) {\n                            // Initially, both `$observe()` and `$watch()` will call this function.\n                            if (!strictEquals(prevValue, currValue)) {\n                                if (prevValue === INITIAL_VALUE) {\n                                    prevValue = currValue;\n                                }\n                                _this.updateInput(prop, prevValue, currValue);\n                                prevValue = currValue;\n                            }\n                        };\n                    })(input.prop);\n                    attrs.$observe(input.attr, observeFn_1);\n                    // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                    // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                    // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                    var unwatch_1 = this_1.componentScope.$watch(function () {\n                        unwatch_1();\n                        unwatch_1 = null;\n                        observeFn_1(attrs[input.attr]);\n                    });\n                }\n                else if (attrs.hasOwnProperty(input.bindAttr)) {\n                    expr = attrs[input.bindAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                    expr = attrs[input.bracketAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                    expr = attrs[input.bindonAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                    expr = attrs[input.bracketParenAttr];\n                }\n                if (expr != null) {\n                    var watchFn = (function (prop) { return function (currValue, prevValue) {\n                        return _this.updateInput(prop, prevValue, currValue);\n                    }; })(input.prop);\n                    this_1.componentScope.$watch(expr, watchFn);\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < inputs.length; i++) {\n                _loop_1(i);\n            }\n            // Invoke `ngOnChanges()` and Change Detection (when necessary)\n            var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n            var prototype = this.componentFactory.componentType.prototype;\n            this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n            this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n                // Invoke `ngOnChanges()`\n                if (_this.implementsOnChanges) {\n                    var inputChanges = _this.inputChanges;\n                    _this.inputChanges = {};\n                    _this.component.ngOnChanges(inputChanges);\n                }\n                _this.viewChangeDetector.markForCheck();\n                // If opted out of propagating digests, invoke change detection when inputs change.\n                if (!propagateDigest) {\n                    detectChanges();\n                }\n            }));\n            // If not opted out of propagating digests, invoke change detection on every digest\n            if (propagateDigest) {\n                this.componentScope.$watch(this.wrapCallback(detectChanges));\n            }\n            // If necessary, attach the view so that it will be dirty-checked.\n            // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n            if (needsNgZone || !propagateDigest) {\n                var unwatch_2 = this.componentScope.$watch(function () {\n                    unwatch_2();\n                    unwatch_2 = null;\n                    var appRef = _this.parentInjector.get(core.ApplicationRef);\n                    appRef.attachView(_this.componentRef.hostView);\n                });\n            }\n        };\n        DowngradeComponentAdapter.prototype.setupOutputs = function () {\n            var attrs = this.attrs;\n            var outputs = this.componentFactory.outputs || [];\n            for (var j = 0; j < outputs.length; j++) {\n                var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n                var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n                var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n                // order below is important - first update bindings then evaluate expressions\n                if (attrs.hasOwnProperty(bindonAttr)) {\n                    this.subscribeToOutput(output, attrs[bindonAttr], true);\n                }\n                if (attrs.hasOwnProperty(bracketParenAttr)) {\n                    this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n                }\n                if (attrs.hasOwnProperty(output.onAttr)) {\n                    this.subscribeToOutput(output, attrs[output.onAttr]);\n                }\n                if (attrs.hasOwnProperty(output.parenAttr)) {\n                    this.subscribeToOutput(output, attrs[output.parenAttr]);\n                }\n            }\n        };\n        DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {\n            var _this = this;\n            if (isAssignment === void 0) { isAssignment = false; }\n            var getter = this.$parse(expr);\n            var setter = getter.assign;\n            if (isAssignment && !setter) {\n                throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n            }\n            var emitter = this.component[output.prop];\n            if (emitter) {\n                emitter.subscribe({\n                    next: isAssignment ? function (v) { return setter(_this.scope, v); } :\n                        function (v) { return getter(_this.scope, { '$event': v }); }\n                });\n            }\n            else {\n                throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this.componentFactory.componentType) + \"'!\");\n            }\n        };\n        DowngradeComponentAdapter.prototype.registerCleanup = function () {\n            var _this = this;\n            var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n            var destroyed = false;\n            this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });\n            this.componentScope.$on('$destroy', function () {\n                if (!destroyed) {\n                    destroyed = true;\n                    _this.componentRef.injector.get(core.TestabilityRegistry)\n                        .unregisterApplication(_this.componentRef.location.nativeElement);\n                    destroyComponentRef();\n                }\n            });\n        };\n        DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n        DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n            if (this.implementsOnChanges) {\n                this.inputChanges[prop] = new core.SimpleChange(prevValue, currValue, prevValue === currValue);\n            }\n            this.inputChangeCount++;\n            this.component[prop] = currValue;\n        };\n        DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n            var ngContentSelectors = this.componentFactory.ngContentSelectors;\n            return groupNodesBySelector(ngContentSelectors, this.element.contents());\n        };\n        return DowngradeComponentAdapter;\n    }());\n    /**\n     * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n     */\n    function groupNodesBySelector(ngContentSelectors, nodes) {\n        var projectableNodes = [];\n        for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n            projectableNodes[i] = [];\n        }\n        for (var j = 0, jj = nodes.length; j < jj; ++j) {\n            var node = nodes[j];\n            var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n            if (ngContentIndex != null) {\n                projectableNodes[ngContentIndex].push(node);\n            }\n        }\n        return projectableNodes;\n    }\n    function findMatchingNgContentIndex(element, ngContentSelectors) {\n        var ngContentIndices = [];\n        var wildcardNgContentIndex = -1;\n        for (var i = 0; i < ngContentSelectors.length; i++) {\n            var selector = ngContentSelectors[i];\n            if (selector === '*') {\n                wildcardNgContentIndex = i;\n            }\n            else {\n                if (matchesSelector(element, selector)) {\n                    ngContentIndices.push(i);\n                }\n            }\n        }\n        ngContentIndices.sort();\n        if (wildcardNgContentIndex !== -1) {\n            ngContentIndices.push(wildcardNgContentIndex);\n        }\n        return ngContentIndices.length ? ngContentIndices[0] : null;\n    }\n    var _matches;\n    function matchesSelector(el, selector) {\n        if (!_matches) {\n            var elProto = Element.prototype;\n            _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n                elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n        }\n        return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function that allows an Angular component to be used from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function to be used for registering\n     * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n     *\n     * ### Examples\n     *\n     * Let's assume that you have an Angular component called `ng2Heroes` that needs\n     * to be made available in AngularJS templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n     *\n     * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n     * that will make this Angular component available inside AngularJS templates.\n     * The `downgradeComponent()` function returns a factory function that we\n     * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n     *\n     * @param info contains information about the Component that is being downgraded:\n     *\n     * * `component: Type<any>`: The type of the Component that will be downgraded\n     * * `propagateDigest?: boolean`: Whether to perform {@link ChangeDetectorRef#detectChanges\n     *   change detection} on the component on every\n     *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n     *   change detection will still be performed when any of the component's inputs changes.\n     *   (Default: true)\n     *\n     * @returns a factory function that can be used to register the component in an\n     * AngularJS module.\n     *\n     * @experimental\n     */\n    function downgradeComponent(info) {\n        var directiveFactory = function ($compile, $injector, $parse) {\n            // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n            // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n            // (except if explicitly escaped, in which case we shouldn't force it back in).\n            // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n            // Angular zone.\n            var needsNgZone = false;\n            var wrapCallback = function (cb) { return cb; };\n            var ngZone;\n            return {\n                restrict: 'E',\n                terminal: true,\n                require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n                link: function (scope, element, attrs, required) {\n                    // We might have to compile the contents asynchronously, because this might have been\n                    // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                    // been compiled.\n                    var ngModel = required[1];\n                    var parentInjector = required[0];\n                    var ranAsync = false;\n                    if (!parentInjector) {\n                        var lazyModuleRef = $injector.get(LAZY_MODULE_REF);\n                        needsNgZone = lazyModuleRef.needsNgZone;\n                        parentInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                    }\n                    var doDowngrade = function (injector) {\n                        var componentFactoryResolver = injector.get(core.ComponentFactoryResolver);\n                        var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);\n                        if (!componentFactory) {\n                            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                        }\n                        var injectorPromise = new ParentInjectorPromise(element);\n                        var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                        var projectableNodes = facade.compileContents();\n                        facade.createComponent(projectableNodes);\n                        facade.setupInputs(needsNgZone, info.propagateDigest);\n                        facade.setupOutputs();\n                        facade.registerCleanup();\n                        injectorPromise.resolve(facade.getInjector());\n                        if (ranAsync) {\n                            // If this is run async, it is possible that it is not run inside a\n                            // digest and initial input values will not be detected.\n                            scope.$evalAsync(function () { });\n                        }\n                    };\n                    var downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                        if (!ngZone) {\n                            ngZone = injector.get(core.NgZone);\n                            wrapCallback = function (cb) { return function () {\n                                return core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                            }; };\n                        }\n                        wrapCallback(function () { return doDowngrade(injector); })();\n                    };\n                    if (isThenable(parentInjector)) {\n                        parentInjector.then(downgradeFn);\n                    }\n                    else {\n                        downgradeFn(parentInjector);\n                    }\n                    ranAsync = true;\n                }\n            };\n        };\n        // bracket-notation because of closure - see #14441\n        directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n        return directiveFactory;\n    }\n    /**\n     * Synchronous promise-like object to wrap parent injectors,\n     * to preserve the synchronous nature of Angular 1's $compile.\n     */\n    var ParentInjectorPromise = /** @class */ (function () {\n        function ParentInjectorPromise(element) {\n            this.element = element;\n            this.injectorKey = controllerKey(INJECTOR_KEY);\n            this.callbacks = [];\n            // Store the promise on the element.\n            element.data(this.injectorKey, this);\n        }\n        ParentInjectorPromise.prototype.then = function (callback) {\n            if (this.injector) {\n                callback(this.injector);\n            }\n            else {\n                this.callbacks.push(callback);\n            }\n        };\n        ParentInjectorPromise.prototype.resolve = function (injector) {\n            this.injector = injector;\n            // Store the real injector on the element.\n            this.element.data(this.injectorKey, injector);\n            // Release the element to prevent memory leaks.\n            this.element = null;\n            // Run the queued callbacks.\n            this.callbacks.forEach(function (callback) { return callback(injector); });\n            this.callbacks.length = 0;\n        };\n        return ParentInjectorPromise;\n    }());\n    function isThenable(obj) {\n        return isFunction(obj.then);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function to allow an Angular service to be accessible from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function that provides access to the Angular\n     * service identified by the `token` parameter.\n     *\n     * ### Examples\n     *\n     * First ensure that the service to be downgraded is provided in an `NgModule`\n     * that will be part of the upgrade application. For example, let's assume we have\n     * defined `HeroesService`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n     *\n     * and that we have included this in our upgrade app `NgModule`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n     *\n     * Now we can register the `downgradeInjectable` factory function for the service\n     * on an AngularJS module.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n     *\n     * Inside an AngularJS component's controller we can get hold of the\n     * downgraded service via the name we gave when downgrading.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n     *\n     * @param token an `InjectionToken` that identifies a service provided from Angular.\n     *\n     * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n     * used to register the service on an AngularJS module.\n     *\n     * @experimental\n     */\n    function downgradeInjectable(token) {\n        var factory = function (i) { return i.get(token); };\n        factory['$inject'] = [INJECTOR_KEY];\n        return factory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Constants\n    var REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n    // Classes\n    var UpgradeHelper = /** @class */ (function () {\n        function UpgradeHelper(injector, name, elementRef, directive) {\n            this.injector = injector;\n            this.name = name;\n            this.$injector = injector.get($INJECTOR);\n            this.$compile = this.$injector.get($COMPILE);\n            this.$controller = this.$injector.get($CONTROLLER);\n            this.element = elementRef.nativeElement;\n            this.$element = element(this.element);\n            this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n        }\n        UpgradeHelper.getDirective = function ($injector, name) {\n            var directives = $injector.get(name + 'Directive');\n            if (directives.length > 1) {\n                throw new Error(\"Only support single directive definition for: \" + name);\n            }\n            var directive = directives[0];\n            // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n            // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n            if (directive.compile && !directive.link)\n                notSupported(name, 'compile');\n            if (directive.replace)\n                notSupported(name, 'replace');\n            if (directive.terminal)\n                notSupported(name, 'terminal');\n            return directive;\n        };\n        UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate) {\n            if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n            if (directive.template !== undefined) {\n                return getOrCall(directive.template);\n            }\n            else if (directive.templateUrl) {\n                var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n                var url_1 = getOrCall(directive.templateUrl);\n                var template = $templateCache_1.get(url_1);\n                if (template !== undefined) {\n                    return template;\n                }\n                else if (!fetchRemoteTemplate) {\n                    throw new Error('loading directive templates asynchronously is not supported');\n                }\n                return new Promise(function (resolve, reject) {\n                    var $httpBackend = $injector.get($HTTP_BACKEND);\n                    $httpBackend('GET', url_1, null, function (status, response) {\n                        if (status === 200) {\n                            resolve($templateCache_1.put(url_1, response));\n                        }\n                        else {\n                            reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                        }\n                    });\n                });\n            }\n            else {\n                throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n            }\n        };\n        UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n            // TODO: Document that we do not pre-assign bindings on the controller instance.\n            // Quoted properties below so that this code can be optimized with Closure Compiler.\n            var locals = { '$scope': $scope, '$element': this.$element };\n            var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n            this.$element.data(controllerKey(this.directive.name), controller);\n            return controller;\n        };\n        UpgradeHelper.prototype.compileTemplate = function (template) {\n            if (template === undefined) {\n                template = UpgradeHelper.getTemplate(this.$injector, this.directive);\n            }\n            return this.compileHtml(template);\n        };\n        UpgradeHelper.prototype.prepareTransclusion = function () {\n            var _this = this;\n            var transclude = this.directive.transclude;\n            var contentChildNodes = this.extractChildNodes();\n            var attachChildrenFn = function (scope, cloneAttachFn) {\n                // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n                // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n                // there will be no transclusion scope here.\n                // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n                scope = scope || { $destroy: function () { return undefined; } };\n                return cloneAttachFn($template, scope);\n            };\n            var $template = contentChildNodes;\n            if (transclude) {\n                var slots_1 = Object.create(null);\n                if (typeof transclude === 'object') {\n                    $template = [];\n                    var slotMap_1 = Object.create(null);\n                    var filledSlots_1 = Object.create(null);\n                    // Parse the element selectors.\n                    Object.keys(transclude).forEach(function (slotName) {\n                        var selector = transclude[slotName];\n                        var optional = selector.charAt(0) === '?';\n                        selector = optional ? selector.substring(1) : selector;\n                        slotMap_1[selector] = slotName;\n                        slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                        filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                    });\n                    // Add the matching elements into their slot.\n                    contentChildNodes.forEach(function (node) {\n                        var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                        if (slotName) {\n                            filledSlots_1[slotName] = true;\n                            slots_1[slotName] = slots_1[slotName] || [];\n                            slots_1[slotName].push(node);\n                        }\n                        else {\n                            $template.push(node);\n                        }\n                    });\n                    // Check for required slots that were not filled.\n                    Object.keys(filledSlots_1).forEach(function (slotName) {\n                        if (!filledSlots_1[slotName]) {\n                            throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                        }\n                    });\n                    Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                        var nodes = slots_1[slotName];\n                        slots_1[slotName] = function (scope, cloneAttach) {\n                            return cloneAttach(nodes, scope);\n                        };\n                    });\n                }\n                // Attach `$$slots` to default slot transclude fn.\n                attachChildrenFn.$$slots = slots_1;\n                // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n                // removes all text content after the first interpolation and updates it later, after\n                // evaluating the expressions. This would result in AngularJS failing to recognize text\n                // nodes that start with an interpolation as transcluded content and use the fallback\n                // content instead.\n                // To avoid this issue, we add a\n                // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n                // to empty text nodes (which can only be a result of Angular removing their initial content).\n                // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n                //       will still fail to be detected by AngularJS v1.6+\n                $template.forEach(function (node) {\n                    if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                        node.nodeValue = '\\u200C';\n                    }\n                });\n            }\n            return attachChildrenFn;\n        };\n        UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n            var directiveRequire = this.getDirectiveRequire();\n            var requiredControllers = this.resolveRequire(directiveRequire);\n            if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n                var requiredControllersMap_1 = requiredControllers;\n                Object.keys(requiredControllersMap_1).forEach(function (key) {\n                    controllerInstance[key] = requiredControllersMap_1[key];\n                });\n            }\n            return requiredControllers;\n        };\n        UpgradeHelper.prototype.compileHtml = function (html) {\n            this.element.innerHTML = html;\n            return this.$compile(this.element.childNodes);\n        };\n        UpgradeHelper.prototype.extractChildNodes = function () {\n            var childNodes = [];\n            var childNode;\n            while (childNode = this.element.firstChild) {\n                this.element.removeChild(childNode);\n                childNodes.push(childNode);\n            }\n            return childNodes;\n        };\n        UpgradeHelper.prototype.getDirectiveRequire = function () {\n            var require = this.directive.require || (this.directive.controller && this.directive.name);\n            if (isMap(require)) {\n                Object.keys(require).forEach(function (key) {\n                    var value = require[key];\n                    var match = value.match(REQUIRE_PREFIX_RE);\n                    var name = value.substring(match[0].length);\n                    if (!name) {\n                        require[key] = match[0] + key;\n                    }\n                });\n            }\n            return require;\n        };\n        UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n            var _this = this;\n            if (!require) {\n                return null;\n            }\n            else if (Array.isArray(require)) {\n                return require.map(function (req) { return _this.resolveRequire(req); });\n            }\n            else if (typeof require === 'object') {\n                var value_1 = {};\n                Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(require[key]); });\n                return value_1;\n            }\n            else if (typeof require === 'string') {\n                var match = require.match(REQUIRE_PREFIX_RE);\n                var inheritType = match[1] || match[3];\n                var name_1 = require.substring(match[0].length);\n                var isOptional = !!match[2];\n                var searchParents = !!inheritType;\n                var startOnParent = inheritType === '^^';\n                var ctrlKey = controllerKey(name_1);\n                var elem = startOnParent ? this.$element.parent() : this.$element;\n                var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n                if (!value && !isOptional) {\n                    throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n                }\n                return value;\n            }\n            else {\n                throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n            }\n        };\n        return UpgradeHelper;\n    }());\n    function getOrCall(property) {\n        return isFunction(property) ? property() : property;\n    }\n    // NOTE: Only works for `typeof T !== 'object'`.\n    function isMap(value) {\n        return value && !Array.isArray(value) && typeof value === 'object';\n    }\n    function notSupported(name, feature) {\n        throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var CAMEL_CASE = /([A-Z])/g;\n    var INITIAL_VALUE$1 = {\n        __UNINITIALIZED__: true\n    };\n    var NOT_SUPPORTED = 'NOT_SUPPORTED';\n    var UpgradeNg1ComponentAdapterBuilder = /** @class */ (function () {\n        function UpgradeNg1ComponentAdapterBuilder(name) {\n            this.name = name;\n            this.inputs = [];\n            this.inputsRename = [];\n            this.outputs = [];\n            this.outputsRename = [];\n            this.propertyOutputs = [];\n            this.checkProperties = [];\n            this.propertyMap = {};\n            this.directive = null;\n            var selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });\n            var self = this;\n            // Note: There is a bug in TS 2.4 that prevents us from\n            // inlining this into @Directive\n            // TODO(tbosch): find or file a bug against TypeScript for this.\n            var directive = { selector: selector, inputs: this.inputsRename, outputs: this.outputsRename };\n            var MyClass = /** @class */ (function () {\n                function MyClass(scope, injector, elementRef) {\n                    var helper = new UpgradeHelper(injector, name, elementRef, this.directive);\n                    return new UpgradeNg1ComponentAdapter(helper, scope, self.template, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap);\n                }\n                MyClass.prototype.ngOnInit = function () {\n                };\n                MyClass.prototype.ngOnChanges = function () {\n                };\n                MyClass.prototype.ngDoCheck = function () {\n                };\n                MyClass.prototype.ngOnDestroy = function () {\n                };\n                MyClass = __decorate([\n                    core.Directive(directive),\n                    __param(0, core.Inject($SCOPE)),\n                    __metadata(\"design:paramtypes\", [Object, core.Injector, core.ElementRef])\n                ], MyClass);\n                return MyClass;\n            }());\n            this.type = MyClass;\n        }\n        UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = function () {\n            var _this = this;\n            var btcIsObject = typeof this.directive.bindToController === 'object';\n            if (btcIsObject && Object.keys(this.directive.scope).length) {\n                throw new Error(\"Binding definitions on scope and controller at the same time are not supported.\");\n            }\n            var context = (btcIsObject) ? this.directive.bindToController : this.directive.scope;\n            if (typeof context == 'object') {\n                Object.keys(context).forEach(function (propName) {\n                    var definition = context[propName];\n                    var bindingType = definition.charAt(0);\n                    var bindingOptions = definition.charAt(1);\n                    var attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n                    // QUESTION: What about `=*`? Ignore? Throw? Support?\n                    var inputName = \"input_\" + attrName;\n                    var inputNameRename = inputName + \": \" + attrName;\n                    var outputName = \"output_\" + attrName;\n                    var outputNameRename = outputName + \": \" + attrName;\n                    var outputNameRenameChange = outputNameRename + \"Change\";\n                    switch (bindingType) {\n                        case '@':\n                        case '<':\n                            _this.inputs.push(inputName);\n                            _this.inputsRename.push(inputNameRename);\n                            _this.propertyMap[inputName] = propName;\n                            break;\n                        case '=':\n                            _this.inputs.push(inputName);\n                            _this.inputsRename.push(inputNameRename);\n                            _this.propertyMap[inputName] = propName;\n                            _this.outputs.push(outputName);\n                            _this.outputsRename.push(outputNameRenameChange);\n                            _this.propertyMap[outputName] = propName;\n                            _this.checkProperties.push(propName);\n                            _this.propertyOutputs.push(outputName);\n                            break;\n                        case '&':\n                            _this.outputs.push(outputName);\n                            _this.outputsRename.push(outputNameRename);\n                            _this.propertyMap[outputName] = propName;\n                            break;\n                        default:\n                            var json = JSON.stringify(context);\n                            throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                    }\n                });\n            }\n        };\n        /**\n         * Upgrade ng1 components into Angular.\n         */\n        UpgradeNg1ComponentAdapterBuilder.resolve = function (exportedComponents, $injector) {\n            var promises = Object.keys(exportedComponents).map(function (name) {\n                var exportedComponent = exportedComponents[name];\n                exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n                exportedComponent.extractBindings();\n                return Promise\n                    .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n                    .then(function (template) { return exportedComponent.template = template; });\n            });\n            return Promise.all(promises);\n        };\n        return UpgradeNg1ComponentAdapterBuilder;\n    }());\n    var UpgradeNg1ComponentAdapter = /** @class */ (function () {\n        function UpgradeNg1ComponentAdapter(helper, scope, template, inputs, outputs, propOuts, checkProperties, propertyMap) {\n            this.helper = helper;\n            this.template = template;\n            this.inputs = inputs;\n            this.outputs = outputs;\n            this.propOuts = propOuts;\n            this.checkProperties = checkProperties;\n            this.propertyMap = propertyMap;\n            this.controllerInstance = null;\n            this.destinationObj = null;\n            this.checkLastValues = [];\n            this.$element = null;\n            this.directive = helper.directive;\n            this.element = helper.element;\n            this.$element = helper.$element;\n            this.componentScope = scope.$new(!!this.directive.scope);\n            var controllerType = this.directive.controller;\n            if (this.directive.bindToController && controllerType) {\n                this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n                this.destinationObj = this.controllerInstance;\n            }\n            else {\n                this.destinationObj = this.componentScope;\n            }\n            for (var i = 0; i < inputs.length; i++) {\n                this[inputs[i]] = null;\n            }\n            for (var j = 0; j < outputs.length; j++) {\n                var emitter = this[outputs[j]] = new core.EventEmitter();\n                if (this.propOuts.indexOf(outputs[j]) === -1) {\n                    this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.emit(value); }; })(emitter));\n                }\n            }\n            for (var k = 0; k < propOuts.length; k++) {\n                this.checkLastValues.push(INITIAL_VALUE$1);\n            }\n        }\n        UpgradeNg1ComponentAdapter.prototype.ngOnInit = function () {\n            // Collect contents, insert and compile template\n            var attachChildNodes = this.helper.prepareTransclusion();\n            var linkFn = this.helper.compileTemplate(this.template);\n            // Instantiate controller (if not already done so)\n            var controllerType = this.directive.controller;\n            var bindToController = this.directive.bindToController;\n            if (controllerType && !bindToController) {\n                this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n            }\n            // Require other controllers\n            var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n            // Hook: $onInit\n            if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n                this.controllerInstance.$onInit();\n            }\n            // Linking\n            var link = this.directive.link;\n            var preLink = (typeof link == 'object') && link.pre;\n            var postLink = (typeof link == 'object') ? link.post : link;\n            var attrs = NOT_SUPPORTED;\n            var transcludeFn = NOT_SUPPORTED;\n            if (preLink) {\n                preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            linkFn(this.componentScope, null, { parentBoundTranscludeFn: attachChildNodes });\n            if (postLink) {\n                postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            // Hook: $postLink\n            if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n                this.controllerInstance.$postLink();\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngOnChanges = function (changes) {\n            var _this = this;\n            var ng1Changes = {};\n            Object.keys(changes).forEach(function (name) {\n                var change = changes[name];\n                _this.setComponentProperty(name, change.currentValue);\n                ng1Changes[_this.propertyMap[name]] = change;\n            });\n            if (isFunction(this.destinationObj.$onChanges)) {\n                this.destinationObj.$onChanges(ng1Changes);\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngDoCheck = function () {\n            var _this = this;\n            var destinationObj = this.destinationObj;\n            var lastValues = this.checkLastValues;\n            var checkProperties = this.checkProperties;\n            var propOuts = this.propOuts;\n            checkProperties.forEach(function (propName, i) {\n                var value = destinationObj[propName];\n                var last = lastValues[i];\n                if (!strictEquals(last, value)) {\n                    var eventEmitter = _this[propOuts[i]];\n                    eventEmitter.emit(lastValues[i] = value);\n                }\n            });\n            if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n                this.controllerInstance.$doCheck();\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngOnDestroy = function () {\n            if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n                this.controllerInstance.$onDestroy();\n            }\n            this.componentScope.$destroy();\n        };\n        UpgradeNg1ComponentAdapter.prototype.setComponentProperty = function (name, value) {\n            this.destinationObj[this.propertyMap[name]] = value;\n        };\n        return UpgradeNg1ComponentAdapter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var upgradeCount = 0;\n    /**\n     * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n     *\n     * The `UpgradeAdapter` allows:\n     * 1. creation of Angular component from AngularJS component directive\n     *    (See [UpgradeAdapter#upgradeNg1Component()])\n     * 2. creation of AngularJS directive from Angular component.\n     *    (See [UpgradeAdapter#downgradeNg2Component()])\n     * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n     *    coexisting in a single application.\n     *\n     * ## Mental Model\n     *\n     * When reasoning about how a hybrid application works it is useful to have a mental model which\n     * describes what is happening and explains what is happening at the lowest level.\n     *\n     * 1. There are two independent frameworks running in a single application, each framework treats\n     *    the other as a black box.\n     * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n     *    instantiated the element is the owner. Each framework only updates/interacts with its own\n     *    DOM elements and ignores others.\n     * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n     *    where they are instantiated.\n     * 4. Angular components always execute inside Angular framework codebase regardless of\n     *    where they are instantiated.\n     * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n     *    Angular directive, which bootstraps the AngularJS component directive in that location.\n     * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n     *    an AngularJS directive, which bootstraps the Angular component in that location.\n     * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n     *    doing the instantiation. The other framework then instantiates and owns the view for that\n     *    component. This implies that component bindings will always follow the semantics of the\n     *    instantiation framework. The syntax is always that of Angular syntax.\n     * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n     * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n     *    `$apply()`.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * module.directive('ng1Hello', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * @Component({\n     *   selector: 'ng2-comp',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n     *   directives:\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     *\n     * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     *\n     * ```\n     *\n     * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n     * [Ahead-of-Time compilation](guide/aot-compiler).\n     */\n    var UpgradeAdapter = /** @class */ (function () {\n        function UpgradeAdapter(ng2AppModule, compilerOptions) {\n            this.ng2AppModule = ng2AppModule;\n            this.compilerOptions = compilerOptions;\n            this.idPrefix = \"NG2_UPGRADE_\" + upgradeCount++ + \"_\";\n            this.downgradedComponents = [];\n            /**\n             * An internal map of ng1 components which need to up upgraded to ng2.\n             *\n             * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n             * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n             *\n             * @internal\n             */\n            this.ng1ComponentsToBeUpgraded = {};\n            this.upgradedProviders = [];\n            this.moduleRef = null;\n            if (!ng2AppModule) {\n                throw new Error('UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n            }\n        }\n        /**\n         * Allows Angular Component to be used from AngularJS.\n         *\n         * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n         * Angular Component. The adapter will bootstrap Angular component from within the\n         * AngularJS template.\n         *\n         * ## Mental Model\n         *\n         * 1. The component is instantiated by being listed in AngularJS template. This means that the\n         *    host element is controlled by AngularJS, but the component's view will be controlled by\n         *    Angular.\n         * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n         *    syntax. This has to be done, this way because we must follow Angular components do not\n         *    declare how the attributes should be interpreted.\n         * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n         *    by way of the `ControlValueAccessor` interface from @angular/forms. Only components that\n         *    implement this interface are eligible.\n         *\n         * ## Supported Features\n         *\n         * - Bindings:\n         *   - Attribute: `<comp name=\"World\">`\n         *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n         *   - Expression:  `<comp [name]=\"username\">`\n         *   - Event:  `<comp (close)=\"doSomething()\">`\n         *   - ng-model: `<comp ng-model=\"name\">`\n         * - Content projection: yes\n         *\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n         * const module = angular.module('myExample', []);\n         * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n         *\n         * @Component({\n         *   selector: 'greet',\n         *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n         * })\n         * class Greeter {\n         *   @Input() salutation: string;\n         *   @Input() name: string;\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Greeter],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML =\n         *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.downgradeNg2Component = function (component) {\n            this.downgradedComponents.push(component);\n            return downgradeComponent({ component: component });\n        };\n        /**\n         * Allows AngularJS Component to be used from Angular.\n         *\n         * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n         * directive. The adapter will bootstrap AngularJS component from within the Angular\n         * template.\n         *\n         * ## Mental Model\n         *\n         * 1. The component is instantiated by being listed in Angular template. This means that the\n         *    host element is controlled by Angular, but the component's view will be controlled by\n         *    AngularJS.\n         *\n         * ## Supported Features\n         *\n         * - Bindings:\n         *   - Attribute: `<comp name=\"World\">`\n         *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n         *   - Expression:  `<comp [name]=\"username\">`\n         *   - Event:  `<comp (close)=\"doSomething()\">`\n         * - Transclusion: yes\n         * - Only some of the features of\n         *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n         *   supported:\n         *   - `compile`: not supported because the host element is owned by Angular, which does\n         *     not allow modifying DOM structure during compilation.\n         *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n         *   - `controllerAs`: supported.\n         *   - `bindToController`: supported.\n         *   - `link`: supported. (NOTE: only pre-link function is supported.)\n         *   - `name`: supported.\n         *   - `priority`: ignored.\n         *   - `replace`: not supported.\n         *   - `require`: supported.\n         *   - `restrict`: must be set to 'E'.\n         *   - `scope`: supported.\n         *   - `template`: supported.\n         *   - `templateUrl`: supported.\n         *   - `terminal`: ignored.\n         *   - `transclude`: supported.\n         *\n         *\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n         * const module = angular.module('myExample', []);\n         *\n         * module.directive('greet', function() {\n         *   return {\n         *     scope: {salutation: '=', name: '=' },\n         *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n         *   };\n         * });\n         *\n         * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n         *\n         * @Component({\n         *   selector: 'ng2',\n         *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n         * })\n         * class Ng2Component {\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML = '<ng2></ng2>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.upgradeNg1Component = function (name) {\n            if (this.ng1ComponentsToBeUpgraded.hasOwnProperty(name)) {\n                return this.ng1ComponentsToBeUpgraded[name].type;\n            }\n            else {\n                return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n                    .type;\n            }\n        };\n        /**\n         * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n         * Use this instead of `angular.mock.module()` to load the upgrade module into\n         * the AngularJS testing injector.\n         *\n         * ### Example\n         *\n         * ```\n         * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n         *\n         * // configure the adapter with upgrade/downgrade components and services\n         * upgradeAdapter.downgradeNg2Component(MyComponent);\n         *\n         * let upgradeAdapterRef: UpgradeAdapterRef;\n         * let $compile, $rootScope;\n         *\n         * // We must register the adapter before any calls to `inject()`\n         * beforeEach(() => {\n         *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n         * });\n         *\n         * beforeEach(inject((_$compile_, _$rootScope_) => {\n         *   $compile = _$compile_;\n         *   $rootScope = _$rootScope_;\n         * }));\n         *\n         * it(\"says hello\", (done) => {\n         *   upgradeAdapterRef.ready(() => {\n         *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n         *     $rootScope.$apply();\n         *     expect(element.html()).toContain(\"Hello World\");\n         *     done();\n         *   })\n         * });\n         *\n         * ```\n         *\n         * @param modules any AngularJS modules that the upgrade module should depend upon\n         * @returns an `UpgradeAdapterRef`, which lets you register a `ready()` callback to\n         * run assertions once the Angular components are ready to test through AngularJS.\n         */\n        UpgradeAdapter.prototype.registerForNg1Tests = function (modules) {\n            var _this = this;\n            var windowNgMock = window['angular'].mock;\n            if (!windowNgMock || !windowNgMock.module) {\n                throw new Error('Failed to find \\'angular.mock.module\\'.');\n            }\n            this.declareNg1Module(modules);\n            windowNgMock.module(this.ng1Module.name);\n            var upgrade = new UpgradeAdapterRef();\n            this.ng2BootstrapDeferred.promise.then(function (ng1Injector) { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); }, onError);\n            return upgrade;\n        };\n        /**\n         * Bootstrap a hybrid AngularJS / Angular application.\n         *\n         * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n         * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n         * AngularJS, this bootstrap is asynchronous.\n         *\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         * const module = angular.module('myExample', []);\n         * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n         *\n         * module.directive('ng1', function() {\n         *   return {\n         *      scope: { title: '=' },\n         *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n         *   };\n         * });\n         *\n         *\n         * @Component({\n         *   selector: 'ng2',\n         *   inputs: ['name'],\n         *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n         * })\n         * class Ng2 {\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\n         *       \"ng2[ng1[Hello World!](transclude)](project)\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.bootstrap = function (element$$1, modules, config) {\n            var _this = this;\n            this.declareNg1Module(modules);\n            var upgrade = new UpgradeAdapterRef();\n            // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n            var windowAngular = window /** TODO #???? */['angular'];\n            windowAngular.resumeBootstrap = undefined;\n            this.ngZone.run(function () { bootstrap(element$$1, [_this.ng1Module.name], config); });\n            var ng1BootstrapPromise = new Promise(function (resolve) {\n                if (windowAngular.resumeBootstrap) {\n                    var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                    windowAngular.resumeBootstrap = function () {\n                        windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                        var r = windowAngular.resumeBootstrap.apply(this, arguments);\n                        resolve();\n                        return r;\n                    };\n                }\n                else {\n                    resolve();\n                }\n            });\n            Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(function (_a) {\n                var _b = __read(_a, 1), ng1Injector = _b[0];\n                element(element$$1).data(controllerKey(INJECTOR_KEY), _this.moduleRef.injector);\n                _this.moduleRef.injector.get(core.NgZone).run(function () { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); });\n            }, onError);\n            return upgrade;\n        };\n        /**\n         * Allows AngularJS service to be accessible from Angular.\n         *\n         *\n         * ### Example\n         *\n         * ```\n         * class Login { ... }\n         * class Server { ... }\n         *\n         * @Injectable()\n         * class Example {\n         *   constructor(@Inject('server') server, login: Login) {\n         *     ...\n         *   }\n         * }\n         *\n         * const module = angular.module('myExample', []);\n         * module.service('server', Server);\n         * module.service('login', Login);\n         *\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         * adapter.upgradeNg1Provider('server');\n         * adapter.upgradeNg1Provider('login', {asToken: Login});\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n         *   const example: Example = ref.ng2Injector.get(Example);\n         * });\n         *\n         * ```\n         */\n        UpgradeAdapter.prototype.upgradeNg1Provider = function (name, options) {\n            var token = options && options.asToken || name;\n            this.upgradedProviders.push({\n                provide: token,\n                useFactory: function ($injector) { return $injector.get(name); },\n                deps: [$INJECTOR]\n            });\n        };\n        /**\n         * Allows Angular service to be accessible from AngularJS.\n         *\n         *\n         * ### Example\n         *\n         * ```\n         * class Example {\n         * }\n         *\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         *\n         * const module = angular.module('myExample', []);\n         * module.factory('example', adapter.downgradeNg2Provider(Example));\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n         *   const example: Example = ref.ng1Injector.get('example');\n         * });\n         *\n         * ```\n         */\n        UpgradeAdapter.prototype.downgradeNg2Provider = function (token) { return downgradeInjectable(token); };\n        /**\n         * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n         * hybrid application.\n         *\n         * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n         *\n         * @param modules The AngularJS modules that this upgrade module should depend upon.\n         * @returns The AngularJS upgrade module that is declared by this method\n         *\n         * ### Example\n         *\n         * ```\n         * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n         * upgradeAdapter.declareNg1Module(['heroApp']);\n         * ```\n         */\n        UpgradeAdapter.prototype.declareNg1Module = function (modules) {\n            var _this = this;\n            if (modules === void 0) { modules = []; }\n            var delayApplyExps = [];\n            var original$applyFn;\n            var rootScopePrototype;\n            var rootScope;\n            var upgradeAdapter = this;\n            var ng1Module = this.ng1Module = module$1(this.idPrefix, modules);\n            var platformRef = platformBrowserDynamic.platformBrowserDynamic();\n            this.ngZone = new core.NgZone({ enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec') });\n            this.ng2BootstrapDeferred = new Deferred();\n            ng1Module.factory(INJECTOR_KEY, function () { return _this.moduleRef.injector.get(core.Injector); })\n                .factory(LAZY_MODULE_REF, [\n                INJECTOR_KEY,\n                function (injector) { return ({ injector: injector, needsNgZone: false }); }\n            ])\n                .constant(NG_ZONE_KEY, this.ngZone)\n                .factory(COMPILER_KEY, function () { return _this.moduleRef.injector.get(core.Compiler); })\n                .config([\n                '$provide', '$injector',\n                function (provide, ng1Injector) {\n                    provide.decorator($ROOT_SCOPE, [\n                        '$delegate',\n                        function (rootScopeDelegate) {\n                            // Capture the root apply so that we can delay first call to $apply until we\n                            // bootstrap Angular and then we replay and restore the $apply.\n                            rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                            if (rootScopePrototype.hasOwnProperty('$apply')) {\n                                original$applyFn = rootScopePrototype.$apply;\n                                rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };\n                            }\n                            else {\n                                throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                            }\n                            return rootScope = rootScopeDelegate;\n                        }\n                    ]);\n                    if (ng1Injector.has($$TESTABILITY)) {\n                        provide.decorator($$TESTABILITY, [\n                            '$delegate',\n                            function (testabilityDelegate) {\n                                var originalWhenStable = testabilityDelegate.whenStable;\n                                // Cannot use arrow function below because we need the context\n                                var newWhenStable = function (callback) {\n                                    originalWhenStable.call(this, function () {\n                                        var ng2Testability = upgradeAdapter.moduleRef.injector.get(core.Testability);\n                                        if (ng2Testability.isStable()) {\n                                            callback.apply(this, arguments);\n                                        }\n                                        else {\n                                            ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                                        }\n                                    });\n                                };\n                                testabilityDelegate.whenStable = newWhenStable;\n                                return testabilityDelegate;\n                            }\n                        ]);\n                    }\n                }\n            ]);\n            ng1Module.run([\n                '$injector', '$rootScope',\n                function (ng1Injector, rootScope) {\n                    UpgradeNg1ComponentAdapterBuilder.resolve(_this.ng1ComponentsToBeUpgraded, ng1Injector)\n                        .then(function () {\n                        // Note: There is a bug in TS 2.4 that prevents us from\n                        // inlining this into @NgModule\n                        // TODO(tbosch): find or file a bug against TypeScript for this.\n                        var ngModule = {\n                            providers: [\n                                { provide: $INJECTOR, useFactory: function () { return ng1Injector; } },\n                                { provide: $COMPILE, useFactory: function () { return ng1Injector.get($COMPILE); } },\n                                _this.upgradedProviders\n                            ],\n                            imports: [_this.ng2AppModule],\n                            entryComponents: _this.downgradedComponents\n                        };\n                        // At this point we have ng1 injector and we have prepared\n                        // ng1 components to be upgraded, we now can bootstrap ng2.\n                        var DynamicNgUpgradeModule = /** @class */ (function () {\n                            function DynamicNgUpgradeModule() {\n                            }\n                            DynamicNgUpgradeModule.prototype.ngDoBootstrap = function () { };\n                            DynamicNgUpgradeModule = __decorate([\n                                core.NgModule(ngModule),\n                                __metadata(\"design:paramtypes\", [])\n                            ], DynamicNgUpgradeModule);\n                            return DynamicNgUpgradeModule;\n                        }());\n                        platformRef\n                            .bootstrapModule(DynamicNgUpgradeModule, [_this.compilerOptions, { ngZone: _this.ngZone }])\n                            .then(function (ref) {\n                            _this.moduleRef = ref;\n                            _this.ngZone.run(function () {\n                                if (rootScopePrototype) {\n                                    rootScopePrototype.$apply = original$applyFn; // restore original $apply\n                                    while (delayApplyExps.length) {\n                                        rootScope.$apply(delayApplyExps.shift());\n                                    }\n                                    rootScopePrototype = null;\n                                }\n                            });\n                        })\n                            .then(function () { return _this.ng2BootstrapDeferred.resolve(ng1Injector); }, onError)\n                            .then(function () {\n                            var subscription = _this.ngZone.onMicrotaskEmpty.subscribe({ next: function () { return rootScope.$digest(); } });\n                            rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                        });\n                    })\n                        .catch(function (e) { return _this.ng2BootstrapDeferred.reject(e); });\n                }\n            ]);\n            return ng1Module;\n        };\n        return UpgradeAdapter;\n    }());\n    /**\n     * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n     *\n     * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n     * [Ahead-of-Time compilation](guide/aot-compiler).\n     */\n    var UpgradeAdapterRef = /** @class */ (function () {\n        function UpgradeAdapterRef() {\n            /* @internal */\n            this._readyFn = null;\n            this.ng1RootScope = null;\n            this.ng1Injector = null;\n            this.ng2ModuleRef = null;\n            this.ng2Injector = null;\n        }\n        /* @internal */\n        UpgradeAdapterRef.prototype._bootstrapDone = function (ngModuleRef, ng1Injector) {\n            this.ng2ModuleRef = ngModuleRef;\n            this.ng2Injector = ngModuleRef.injector;\n            this.ng1Injector = ng1Injector;\n            this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n            this._readyFn && this._readyFn(this);\n        };\n        /**\n         * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n         * application has been bootstrapped.\n         *\n         * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n         * require a call to `$apply()`.\n         */\n        UpgradeAdapterRef.prototype.ready = function (fn) { this._readyFn = fn; };\n        /**\n         * Dispose of running hybrid AngularJS / Angular application.\n         */\n        UpgradeAdapterRef.prototype.dispose = function () {\n            this.ng1Injector.get($ROOT_SCOPE).$destroy();\n            this.ng2ModuleRef.destroy();\n        };\n        return UpgradeAdapterRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only re-exports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    exports.VERSION = VERSION;\n    exports.UpgradeAdapter = UpgradeAdapter;\n    exports.UpgradeAdapterRef = UpgradeAdapterRef;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=upgrade.umd.js.map\n"]}
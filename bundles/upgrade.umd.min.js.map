{"version":3,"file":"upgrade.umd.min.js","sources":["../../../../packages/upgrade/src/common/angular1.ts","../../../../packages/upgrade/src/common/constants.ts","../../../../packages/upgrade/src/common/component_info.ts","../../../../packages/upgrade/src/common/util.ts","../../../../packages/upgrade/src/common/downgrade_component_adapter.ts","../../../../packages/upgrade/src/common/downgrade_component.ts","../../../../packages/upgrade/src/dynamic/upgrade_ng1_adapter.ts","../../../../packages/upgrade/src/dynamic/upgrade_adapter.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type Ng1Token = string;\n\nexport type Ng1Expression = string | Function;\n\nexport interface IAnnotatedFunction extends Function { $inject?: Ng1Token[]; }\n\nexport type IInjectable = (Ng1Token | Function)[] | IAnnotatedFunction;\n\nexport type SingleOrListOrMap<T> = T | T[] | {[key: string]: T};\n\nexport interface IModule {\n  name: string;\n  requires: (string|IInjectable)[];\n  config(fn: IInjectable): IModule;\n  directive(selector: string, factory: IInjectable): IModule;\n  component(selector: string, component: IComponent): IModule;\n  controller(name: string, type: IInjectable): IModule;\n  factory(key: Ng1Token, factoryFn: IInjectable): IModule;\n  value(key: Ng1Token, value: any): IModule;\n  constant(token: Ng1Token, value: any): IModule;\n  run(a: IInjectable): IModule;\n}\nexport interface ICompileService {\n  (element: Element|NodeList|Node[]|string, transclude?: Function): ILinkFn;\n}\nexport interface ILinkFn {\n  (scope: IScope, cloneAttachFn?: ICloneAttachFunction, options?: ILinkFnOptions): IAugmentedJQuery;\n}\nexport interface ILinkFnOptions {\n  parentBoundTranscludeFn?: Function;\n  transcludeControllers?: {[key: string]: any};\n  futureParentElement?: Node;\n}\nexport interface IRootScopeService {\n  $new(isolate?: boolean): IScope;\n  $id: string;\n  $parent: IScope;\n  $root: IScope;\n  $watch(exp: Ng1Expression, fn?: (a1?: any, a2?: any) => void): Function;\n  $on(event: string, fn?: (event?: any, ...args: any[]) => void): Function;\n  $destroy(): any;\n  $apply(exp?: Ng1Expression): any;\n  $digest(): any;\n  $evalAsync(): any;\n  $on(event: string, fn?: (event?: any, ...args: any[]) => void): Function;\n  $$childTail: IScope;\n  $$childHead: IScope;\n  $$nextSibling: IScope;\n  [key: string]: any;\n}\nexport interface IScope extends IRootScopeService {}\n\nexport interface IAngularBootstrapConfig { strictDi?: boolean; }\nexport interface IDirective {\n  compile?: IDirectiveCompileFn;\n  controller?: IController;\n  controllerAs?: string;\n  bindToController?: boolean|{[key: string]: string};\n  link?: IDirectiveLinkFn|IDirectivePrePost;\n  name?: string;\n  priority?: number;\n  replace?: boolean;\n  require?: DirectiveRequireProperty;\n  restrict?: string;\n  scope?: boolean|{[key: string]: string};\n  template?: string|Function;\n  templateUrl?: string|Function;\n  templateNamespace?: string;\n  terminal?: boolean;\n  transclude?: boolean|'element'|{[key: string]: string};\n}\nexport type DirectiveRequireProperty = SingleOrListOrMap<string>;\nexport interface IDirectiveCompileFn {\n  (templateElement: IAugmentedJQuery, templateAttributes: IAttributes,\n   transclude: ITranscludeFunction): IDirectivePrePost;\n}\nexport interface IDirectivePrePost {\n  pre?: IDirectiveLinkFn;\n  post?: IDirectiveLinkFn;\n}\nexport interface IDirectiveLinkFn {\n  (scope: IScope, instanceElement: IAugmentedJQuery, instanceAttributes: IAttributes,\n   controller: any, transclude: ITranscludeFunction): void;\n}\nexport interface IComponent {\n  bindings?: {[key: string]: string};\n  controller?: string|IInjectable;\n  controllerAs?: string;\n  require?: DirectiveRequireProperty;\n  template?: string|Function;\n  templateUrl?: string|Function;\n  transclude?: boolean;\n}\nexport interface IAttributes { $observe(attr: string, fn: (v: string) => void): void; }\nexport interface ITranscludeFunction {\n  // If the scope is provided, then the cloneAttachFn must be as well.\n  (scope: IScope, cloneAttachFn: ICloneAttachFunction): IAugmentedJQuery;\n  // If one argument is provided, then it's assumed to be the cloneAttachFn.\n  (cloneAttachFn?: ICloneAttachFunction): IAugmentedJQuery;\n}\nexport interface ICloneAttachFunction {\n  // Let's hint but not force cloneAttachFn's signature\n  (clonedElement?: IAugmentedJQuery, scope?: IScope): any;\n}\nexport type IAugmentedJQuery = Node[] & {\n  bind?: (name: string, fn: () => void) => void;\n  data?: (name: string, value?: any) => any;\n  text?: () => string;\n  inheritedData?: (name: string, value?: any) => any;\n  contents?: () => IAugmentedJQuery;\n  parent?: () => IAugmentedJQuery;\n  empty?: () => void;\n  append?: (content: IAugmentedJQuery | string) => IAugmentedJQuery;\n  controller?: (name: string) => any;\n  isolateScope?: () => IScope;\n  injector?: () => IInjectorService;\n};\nexport interface IProvider { $get: IInjectable; }\nexport interface IProvideService {\n  provider(token: Ng1Token, provider: IProvider): IProvider;\n  factory(token: Ng1Token, factory: IInjectable): IProvider;\n  service(token: Ng1Token, type: IInjectable): IProvider;\n  value(token: Ng1Token, value: any): IProvider;\n  constant(token: Ng1Token, value: any): void;\n  decorator(token: Ng1Token, factory: IInjectable): void;\n}\nexport interface IParseService { (expression: string): ICompiledExpression; }\nexport interface ICompiledExpression { assign(context: any, value: any): any; }\nexport interface IHttpBackendService {\n  (method: string, url: string, post?: any, callback?: Function, headers?: any, timeout?: number,\n   withCredentials?: boolean): void;\n}\nexport interface ICacheObject {\n  put<T>(key: string, value?: T): T;\n  get(key: string): any;\n}\nexport interface ITemplateCacheService extends ICacheObject {}\nexport interface ITemplateRequestService {\n  (template: string|any /* TrustedResourceUrl */, ignoreRequestError?: boolean): Promise<string>;\n  totalPendingRequests: number;\n}\nexport type IController = string | IInjectable;\nexport interface IControllerService {\n  (controllerConstructor: IController, locals?: any, later?: any, ident?: any): any;\n  (controllerName: string, locals?: any): any;\n}\n\nexport interface IInjectorService {\n  get(key: string): any;\n  has(key: string): boolean;\n}\n\nexport interface ITestabilityService {\n  findBindings(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  findModels(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  getLocation(): string;\n  setLocation(url: string): void;\n  whenStable(callback: Function): void;\n}\n\nexport interface INgModelController {\n  $render(): void;\n  $isEmpty(value: any): boolean;\n  $setValidity(validationErrorKey: string, isValid: boolean): void;\n  $setPristine(): void;\n  $setDirty(): void;\n  $setUntouched(): void;\n  $setTouched(): void;\n  $rollbackViewValue(): void;\n  $validate(): void;\n  $commitViewValue(): void;\n  $setViewValue(value: any, trigger: string): void;\n\n  $viewValue: any;\n  $modelValue: any;\n  $parsers: Function[];\n  $formatters: Function[];\n  $validators: {[key: string]: Function};\n  $asyncValidators: {[key: string]: Function};\n  $viewChangeListeners: Function[];\n  $error: Object;\n  $pending: Object;\n  $untouched: boolean;\n  $touched: boolean;\n  $pristine: boolean;\n  $dirty: boolean;\n  $valid: boolean;\n  $invalid: boolean;\n  $name: string;\n}\n/**\n * @return {?}\n */\nfunction noNg() {\n  throw new Error('AngularJS v1.x is not loaded!');\n}\n\n\nlet /** @type {?} */ angular: {\n  bootstrap: (e: Element, modules: (string | IInjectable)[], config: IAngularBootstrapConfig) =>\n                 void,\n  module: (prefix: string, dependencies?: string[]) => IModule,\n  element: (e: Element | string) => IAugmentedJQuery,\n  version: {major: number},\n  resumeBootstrap: () => void,\n  getTestability: (e: Element) => ITestabilityService\n} = /** @type {?} */(( <any>{\n  bootstrap: noNg,\n  module: noNg,\n  element: noNg,\n  version: noNg,\n  resumeBootstrap: noNg,\n  getTestability: noNg\n}));\n\ntry {\n  if (window.hasOwnProperty('angular')) {\n    angular = ( /** @type {?} */((<any>window))).angular;\n  }\n} catch ( /** @type {?} */e) {\n  // ignore in CJS mode.\n}\n/**\n * Resets the AngularJS library.\n * \n * Used when angularjs is loaded lazily, and not available on `window`.\n * \n * \\@stable\n * @param {?} ng\n * @return {?}\n */\nexport function setAngularLib(ng: any): void {\n  angular = ng;\n}\n/**\n * Returns the current version of the AngularJS library.\n * \n * \\@stable\n * @return {?}\n */\nexport function getAngularLib(): any {\n  return angular;\n}\n\nexport const /** @type {?} */ bootstrap =\n    (e: Element, modules: (string | IInjectable)[], config: IAngularBootstrapConfig): void =>\n        angular.bootstrap(e, modules, config);\n\nexport const /** @type {?} */ module = (prefix: string, dependencies?: string[]): IModule =>\n    angular.module(prefix, dependencies);\n\nexport const /** @type {?} */ element = (e: Element | string): IAugmentedJQuery => angular.element(e);\n\nexport const /** @type {?} */ resumeBootstrap = (): void => angular.resumeBootstrap();\n\nexport const /** @type {?} */ getTestability = (e: Element): ITestabilityService => angular.getTestability(e);\n\nexport const /** @type {?} */ version = angular.version;\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nexport const $COMPILE = '$compile';\nexport const /** @type {?} */ $CONTROLLER = '$controller';\nexport const /** @type {?} */ $DELEGATE = '$delegate';\nexport const /** @type {?} */ $HTTP_BACKEND = '$httpBackend';\nexport const /** @type {?} */ $INJECTOR = '$injector';\nexport const /** @type {?} */ $PARSE = '$parse';\nexport const /** @type {?} */ $PROVIDE = '$provide';\nexport const /** @type {?} */ $ROOT_SCOPE = '$rootScope';\nexport const /** @type {?} */ $SCOPE = '$scope';\nexport const /** @type {?} */ $TEMPLATE_CACHE = '$templateCache';\nexport const /** @type {?} */ $TEMPLATE_REQUEST = '$templateRequest';\n\nexport const /** @type {?} */ $$TESTABILITY = '$$testability';\n\nexport const /** @type {?} */ COMPILER_KEY = '$$angularCompiler';\nexport const /** @type {?} */ GROUP_PROJECTABLE_NODES_KEY = '$$angularGroupProjectableNodes';\nexport const /** @type {?} */ INJECTOR_KEY = '$$angularInjector';\nexport const /** @type {?} */ NG_ZONE_KEY = '$$angularNgZone';\n\nexport const /** @type {?} */ REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nexport const /** @type {?} */ REQUIRE_NG_MODEL = '?ngModel';\n\nexport const /** @type {?} */ UPGRADE_MODULE_NAME = '$$UpgradeModule';\n","\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nexport class PropertyBinding {\n  bracketAttr: string;\n  bracketParenAttr: string;\n  parenAttr: string;\n  onAttr: string;\n  bindAttr: string;\n  bindonAttr: string;\n/**\n * @param {?} prop\n * @param {?} attr\n */\nconstructor(public prop: string,\npublic attr: string) { this.parseBinding(); }\n/**\n * @return {?}\n */\nprivate parseBinding() {\n    this.bracketAttr = `[${this.attr}]`;\n    this.parenAttr = `(${this.attr})`;\n    this.bracketParenAttr = `[(${this.attr})]`;\n    const /** @type {?} */ capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n    this.onAttr = `on${capitalAttr}`;\n    this.bindAttr = `bind${capitalAttr}`;\n    this.bindonAttr = `bindon${capitalAttr}`;\n  }\n}\n\nfunction PropertyBinding_tsickle_Closure_declarations() {\n/** @type {?} */\nPropertyBinding.prototype.bracketAttr;\n/** @type {?} */\nPropertyBinding.prototype.bracketParenAttr;\n/** @type {?} */\nPropertyBinding.prototype.parenAttr;\n/** @type {?} */\nPropertyBinding.prototype.onAttr;\n/** @type {?} */\nPropertyBinding.prototype.bindAttr;\n/** @type {?} */\nPropertyBinding.prototype.bindonAttr;\n/** @type {?} */\nPropertyBinding.prototype.prop;\n/** @type {?} */\nPropertyBinding.prototype.attr;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Type} from '@angular/core';\nimport * as angular from './angular1';\n/**\n * @param {?} e\n * @return {?}\n */\nexport function onError(e: any) {\n  // TODO: (misko): We seem to not have a stack trace here!\n  if (console.error) {\n    console.error(e, e.stack);\n  } else {\n    // tslint:disable-next-line:no-console\n    console.log(e, e.stack);\n  }\n  throw e;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function controllerKey(name: string): string {\n  return '$' + name + 'Controller';\n}\n/**\n * @param {?} node\n * @return {?}\n */\nexport function getAttributesAsArray(node: Node): [string, string][] {\n  const /** @type {?} */ attributes = node.attributes;\n  let /** @type {?} */ asArray: [string, string][] = /** @type {?} */(( undefined));\n  if (attributes) {\n    let /** @type {?} */ attrLen = attributes.length;\n    asArray = new Array(attrLen);\n    for (let /** @type {?} */ i = 0; i < attrLen; i++) {\n      asArray[i] = [attributes[i].nodeName, /** @type {?} */(( attributes[i].nodeValue))];\n    }\n  }\n  return asArray || [];\n}\n/**\n * @param {?} component\n * @return {?}\n */\nexport function getComponentName(component: Type<any>): string {\n  // Return the name of the component or the first line of its stringified version.\n  return ( /** @type {?} */((component as any))).overriddenName || component.name || component.toString().split('\\n')[0];\n}\nexport class Deferred<R> {\n  promise: Promise<R>;\n  resolve: (value?: R|PromiseLike<R>) => void;\n  reject: (error?: any) => void;\nconstructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\nfunction Deferred_tsickle_Closure_declarations() {\n/** @type {?} */\nDeferred.prototype.promise;\n/** @type {?} */\nDeferred.prototype.resolve;\n/** @type {?} */\nDeferred.prototype.reject;\n}\n\n/**\n * @param {?} component\n * @return {?} Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component: any) {\n  return typeof component.writeValue === 'function' &&\n      typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n * @param {?} ngModel\n * @param {?} component\n * @return {?}\n */\nexport function hookupNgModel(ngModel: angular.INgModelController, component: any) {\n  if (ngModel && supportsNgModel(component)) {\n    ngModel.$render = () => { component.writeValue(ngModel.$viewValue); };\n    component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n  }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n * @param {?} val1\n * @param {?} val2\n * @return {?}\n */\nexport function strictEquals(val1: any, val2: any): boolean {\n  return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ChangeDetectorRef, ComponentFactory, ComponentRef, EventEmitter, Injector, OnChanges, ReflectiveInjector, SimpleChange, SimpleChanges, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {PropertyBinding} from './component_info';\nimport {$SCOPE} from './constants';\nimport {getAttributesAsArray, getComponentName, hookupNgModel, strictEquals} from './util';\n\nconst /** @type {?} */ INITIAL_VALUE = {\n  __UNINITIALIZED__: true\n};\nexport class DowngradeComponentAdapter {\nprivate inputChangeCount: number = 0;\nprivate inputChanges: SimpleChanges|null = null;\nprivate componentScope: angular.IScope;\nprivate componentRef: ComponentRef<any>|null = null;\nprivate component: any = null;\nprivate changeDetector: ChangeDetectorRef|null = null;\n/**\n * @param {?} id\n * @param {?} element\n * @param {?} attrs\n * @param {?} scope\n * @param {?} ngModel\n * @param {?} parentInjector\n * @param {?} $injector\n * @param {?} $compile\n * @param {?} $parse\n * @param {?} componentFactory\n */\nconstructor(\nprivate id: string,\nprivate element: angular.IAugmentedJQuery,\nprivate attrs: angular.IAttributes,\nprivate scope: angular.IScope,\nprivate ngModel: angular.INgModelController,\nprivate parentInjector: Injector,\nprivate $injector: angular.IInjectorService,\nprivate $compile: angular.ICompileService,\nprivate $parse: angular.IParseService,\nprivate componentFactory: ComponentFactory<any>) {\n    (this.element[0] as any).id = id;\n    this.componentScope = scope.$new();\n  }\n/**\n * @return {?}\n */\ncompileContents(): Node[][] {\n    const /** @type {?} */ compiledProjectableNodes: Node[][] = [];\n    const /** @type {?} */ projectableNodes: Node[][] = this.groupProjectableNodes();\n    const /** @type {?} */ linkFns = projectableNodes.map(nodes => this.$compile(nodes)); /** @type {?} */((\n\n    this.element.empty))();\n\n    linkFns.forEach(linkFn => {\n      linkFn(this.scope, (clone: Node[]) => {\n        compiledProjectableNodes.push(clone); /** @type {?} */((\n        this.element.append))(clone);\n      });\n    });\n\n    return compiledProjectableNodes;\n  }\n/**\n * @param {?} projectableNodes\n * @return {?}\n */\ncreateComponent(projectableNodes: Node[][]) {\n    const /** @type {?} */ childInjector = ReflectiveInjector.resolveAndCreate(\n        [{provide: $SCOPE, useValue: this.componentScope}], this.parentInjector);\n\n    this.componentRef =\n        this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n    this.changeDetector = this.componentRef.changeDetectorRef;\n    this.component = this.componentRef.instance;\n\n    hookupNgModel(this.ngModel, this.component);\n  }\n/**\n * @return {?}\n */\nsetupInputs(): void {\n    const /** @type {?} */ attrs = this.attrs;\n    const /** @type {?} */ inputs = this.componentFactory.inputs || [];\n    for (let /** @type {?} */ i = 0; i < inputs.length; i++) {\n      const /** @type {?} */ input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n      let /** @type {?} */ expr: any /** TODO #9100 */ = null;\n\n      if (attrs.hasOwnProperty(input.attr)) {\n        const /** @type {?} */ observeFn = (prop => {\n          let /** @type {?} */ prevValue = INITIAL_VALUE;\n          return (currValue: any) => {\n            // Initially, both `$observe()` and `$watch()` will call this function.\n            if (!strictEquals(prevValue, currValue)) {\n              if (prevValue === INITIAL_VALUE) {\n                prevValue = currValue;\n              }\n\n              this.updateInput(prop, prevValue, currValue);\n              prevValue = currValue;\n            }\n          };\n        })(input.prop);\n        attrs.$observe(input.attr, observeFn);\n\n        // Use `$watch()` (in addition to `$observe()`) in order to initialize the input  in time\n        // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n        // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n        let /** @type {?} */ unwatch: any = this.componentScope.$watch(() => {\n          unwatch();\n          unwatch = null;\n          observeFn(( /** @type {?} */((attrs as any)))[input.attr]);\n        });\n\n      } else if (attrs.hasOwnProperty(input.bindAttr)) {\n        expr = ( /** @type {?} */((attrs as any)) /** TODO #9100 */)[input.bindAttr];\n      } else if (attrs.hasOwnProperty(input.bracketAttr)) {\n        expr = ( /** @type {?} */((attrs as any)) /** TODO #9100 */)[input.bracketAttr];\n      } else if (attrs.hasOwnProperty(input.bindonAttr)) {\n        expr = ( /** @type {?} */((attrs as any)) /** TODO #9100 */)[input.bindonAttr];\n      } else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n        expr = ( /** @type {?} */((attrs as any)) /** TODO #9100 */)[input.bracketParenAttr];\n      }\n      if (expr != null) {\n        const /** @type {?} */ watchFn =\n            (prop => (currValue: any, prevValue: any) =>\n                 this.updateInput(prop, prevValue, currValue))(input.prop);\n        this.componentScope.$watch(expr, watchFn);\n      }\n    }\n\n    const /** @type {?} */ prototype = this.componentFactory.componentType.prototype;\n    if (prototype && ( /** @type {?} */((<OnChanges>prototype))).ngOnChanges) {\n      // Detect: OnChanges interface\n      this.inputChanges = {};\n      this.componentScope.$watch(() => this.inputChangeCount, () => {\n        const /** @type {?} */ inputChanges = this.inputChanges;\n        this.inputChanges = {};\n        ( /** @type {?} */((<OnChanges>this.component))).ngOnChanges( /** @type {?} */((inputChanges)));\n      });\n    }\n    this.componentScope.$watch(() => this.changeDetector && this.changeDetector.detectChanges());\n  }\n/**\n * @return {?}\n */\nsetupOutputs() {\n    const /** @type {?} */ attrs = this.attrs;\n    const /** @type {?} */ outputs = this.componentFactory.outputs || [];\n    for (let /** @type {?} */ j = 0; j < outputs.length; j++) {\n      const /** @type {?} */ output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n      let /** @type {?} */ expr: any /** TODO #9100 */ = null;\n      let /** @type {?} */ assignExpr = false;\n\n      const /** @type {?} */ bindonAttr =\n          output.bindonAttr ? output.bindonAttr.substring(0, output.bindonAttr.length - 6) : null;\n      const /** @type {?} */ bracketParenAttr = output.bracketParenAttr ?\n          `[(${output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8)})]` :\n          null;\n\n      if (attrs.hasOwnProperty(output.onAttr)) {\n        expr = ( /** @type {?} */((attrs as any)) /** TODO #9100 */)[output.onAttr];\n      } else if (attrs.hasOwnProperty(output.parenAttr)) {\n        expr = ( /** @type {?} */((attrs as any)) /** TODO #9100 */)[output.parenAttr];\n      } else if (attrs.hasOwnProperty( /** @type {?} */((bindonAttr)))) {\n        expr = ( /** @type {?} */((attrs as any)) /** TODO #9100 */)[ /** @type {?} */((bindonAttr))];\n        assignExpr = true;\n      } else if (attrs.hasOwnProperty( /** @type {?} */((bracketParenAttr)))) {\n        expr = ( /** @type {?} */((attrs as any)) /** TODO #9100 */)[ /** @type {?} */((bracketParenAttr))];\n        assignExpr = true;\n      }\n\n      if (expr != null && assignExpr != null) {\n        const /** @type {?} */ getter = this.$parse(expr);\n        const /** @type {?} */ setter = getter.assign;\n        if (assignExpr && !setter) {\n          throw new Error(`Expression '${expr}' is not assignable!`);\n        }\n        const /** @type {?} */ emitter = /** @type {?} */(( this.component[output.prop] as EventEmitter<any>));\n        if (emitter) {\n          emitter.subscribe({\n            next: assignExpr ?\n                ((setter: any) => (v: any /** TODO #9100 */) => setter(this.scope, v))(setter) :\n                ((getter: any) => (v: any /** TODO #9100 */) =>\n                     getter(this.scope, {'$event': v}))(getter)\n          });\n        } else {\n          throw new Error(\n              `Missing emitter '${output.prop}' on component '${getComponentName(this.componentFactory.componentType)}'!`);\n        }\n      }\n    }\n  }\n/**\n * @return {?}\n */\nregisterCleanup() { /** @type {?} */((\n    this.element.bind))('$destroy', () => {\n      this.componentScope.$destroy(); /** @type {?} */((\n      this.componentRef)).destroy();\n    });\n  }\n/**\n * @return {?}\n */\ngetInjector(): Injector { return /** @type {?} */(( this.componentRef)) && /** @type {?} */(( this.componentRef)).injector; }\n/**\n * @param {?} prop\n * @param {?} prevValue\n * @param {?} currValue\n * @return {?}\n */\nprivate updateInput(prop: string, prevValue: any, currValue: any) {\n    if (this.inputChanges) {\n      this.inputChangeCount++;\n      this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n    }\n\n    this.component[prop] = currValue;\n  }\n/**\n * @return {?}\n */\ngroupProjectableNodes() {\n    let /** @type {?} */ ngContentSelectors = this.componentFactory.ngContentSelectors;\n    return groupNodesBySelector(ngContentSelectors, /** @type {?} */(( this.element.contents))());\n  }\n}\n\nfunction DowngradeComponentAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nDowngradeComponentAdapter.prototype.inputChangeCount;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.inputChanges;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.componentScope;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.componentRef;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.component;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.changeDetector;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.id;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.element;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.attrs;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.scope;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.ngModel;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.parentInjector;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.$injector;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.$compile;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.$parse;\n/** @type {?} */\nDowngradeComponentAdapter.prototype.componentFactory;\n}\n\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n * @param {?} ngContentSelectors\n * @param {?} nodes\n * @return {?}\n */\nexport function groupNodesBySelector(ngContentSelectors: string[], nodes: Node[]): Node[][] {\n  const /** @type {?} */ projectableNodes: Node[][] = [];\n  let /** @type {?} */ wildcardNgContentIndex: number;\n\n  for (let /** @type {?} */ i = 0, /** @type {?} */ ii = ngContentSelectors.length; i < ii; ++i) {\n    projectableNodes[i] = [];\n  }\n\n  for (let /** @type {?} */ j = 0, /** @type {?} */ jj = nodes.length; j < jj; ++j) {\n    const /** @type {?} */ node = nodes[j];\n    const /** @type {?} */ ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n    if (ngContentIndex != null) {\n      projectableNodes[ngContentIndex].push(node);\n    }\n  }\n\n  return projectableNodes;\n}\n/**\n * @param {?} element\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction findMatchingNgContentIndex(element: any, ngContentSelectors: string[]): number|null {\n  const /** @type {?} */ ngContentIndices: number[] = [];\n  let /** @type {?} */ wildcardNgContentIndex: number = -1;\n  for (let /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {\n    const /** @type {?} */ selector = ngContentSelectors[i];\n    if (selector === '*') {\n      wildcardNgContentIndex = i;\n    } else {\n      if (matchesSelector(element, selector)) {\n        ngContentIndices.push(i);\n      }\n    }\n  }\n  ngContentIndices.sort();\n\n  if (wildcardNgContentIndex !== -1) {\n    ngContentIndices.push(wildcardNgContentIndex);\n  }\n  return ngContentIndices.length ? ngContentIndices[0] : null;\n}\n\nlet /** @type {?} */ _matches: (this: any, selector: string) => boolean;\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nfunction matchesSelector(el: any, selector: string): boolean {\n  if (!_matches) {\n    const /** @type {?} */ elProto = /** @type {?} */(( <any>Element.prototype));\n    _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n        elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n  }\n  return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ComponentFactory, ComponentFactoryResolver, Injector, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {$COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, REQUIRE_INJECTOR, REQUIRE_NG_MODEL} from './constants';\nimport {DowngradeComponentAdapter} from './downgrade_component_adapter';\nimport {controllerKey, getComponentName} from './util';\n\nlet /** @type {?} */ downgradeCount = 0;\n/**\n * \\@whatItDoes \n * \n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n * \n * Allows an Angular component to be used from AngularJS.\n * \n * \\@howToUse \n * \n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n * \n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n * \n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n * \n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n * \n * \\@description \n * \n * A helper function that returns a factory function to be used for registering an\n * AngularJS wrapper directive for \"downgrading\" an Angular component.\n * \n * The parameter contains information about the Component that is being downgraded:\n * \n * * `component: Type<any>`: The type of the Component that will be downgraded\n * \n * \\@experimental\n * @param {?} info\n * @return {?}\n */\nexport function downgradeComponent(info: {\n  component: Type<any>;\n  /** @deprecated since v4. This parameter is no longer used */\n  inputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  outputs?: string[];\n  /** @deprecated since v4. This parameter is no longer used */\n  selectors?: string[];\n}): any /* angular.IInjectable */ {\n  const /** @type {?} */ idPrefix = `NG2_UPGRADE_${downgradeCount++}_`;\n  let /** @type {?} */ idCount = 0;\n\n  const /** @type {?} */ directiveFactory:\n      angular.IAnnotatedFunction = function(\n                                       $compile: angular.ICompileService,\n                                       $injector: angular.IInjectorService,\n                                       $parse: angular.IParseService): angular.IDirective {\n\n    return {\n      restrict: 'E',\n      terminal: true,\n      require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n      link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n             required: any[]) => {\n        // We might have to compile the contents asynchronously, because this might have been\n        // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n        // been compiled.\n\n        const /** @type {?} */ parentInjector: Injector|ParentInjectorPromise =\n            required[0] || $injector.get(INJECTOR_KEY);\n        const /** @type {?} */ ngModel: angular.INgModelController = required[1];\n\n        const /** @type {?} */ downgradeFn = (injector: Injector) => {\n          const /** @type {?} */ componentFactoryResolver: ComponentFactoryResolver =\n              injector.get(ComponentFactoryResolver);\n          const /** @type {?} */ componentFactory: ComponentFactory<any> = /** @type {?} */((\n              componentFactoryResolver.resolveComponentFactory(info.component)));\n\n          if (!componentFactory) {\n            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n          }\n\n          const /** @type {?} */ id = idPrefix + (idCount++);\n          const /** @type {?} */ injectorPromise = new ParentInjectorPromise(element);\n          const /** @type {?} */ facade = new DowngradeComponentAdapter(\n              id, element, attrs, scope, ngModel, injector, $injector, $compile, $parse,\n              componentFactory);\n\n          const /** @type {?} */ projectableNodes = facade.compileContents();\n          facade.createComponent(projectableNodes);\n          facade.setupInputs();\n          facade.setupOutputs();\n          facade.registerCleanup();\n\n          injectorPromise.resolve(facade.getInjector());\n        };\n\n        if (parentInjector instanceof ParentInjectorPromise) {\n          parentInjector.then(downgradeFn);\n        } else {\n          downgradeFn(parentInjector);\n        }\n      }\n    };\n  };\n\n  // bracket-notation because of closure - see #14441\n  directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n  return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nclass ParentInjectorPromise {\nprivate injector: Injector;\nprivate injectorKey: string = controllerKey(INJECTOR_KEY);\nprivate callbacks: ((injector: Injector) => any)[] = [];\n/**\n * @param {?} element\n */\nconstructor(private element: angular.IAugmentedJQuery) {\n    // Store the promise on the element.\n    element.data !(this.injectorKey, this);\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nthen(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n/**\n * @param {?} injector\n * @return {?}\n */\nresolve(injector: Injector) {\n    this.injector = injector; /** @type {?} */((\n\n    // Store the real injector on the element.\n    this.element.data))(this.injectorKey, injector);\n\n    // Release the element to prevent memory leaks.\n    this.element = /** @type {?} */(( null));\n\n    // Run the queued callbacks.\n    this.callbacks.forEach(callback => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\nfunction ParentInjectorPromise_tsickle_Closure_declarations() {\n/** @type {?} */\nParentInjectorPromise.prototype.injector;\n/** @type {?} */\nParentInjectorPromise.prototype.injectorKey;\n/** @type {?} */\nParentInjectorPromise.prototype.callbacks;\n/** @type {?} */\nParentInjectorPromise.prototype.element;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Directive, DoCheck, ElementRef, EventEmitter, Inject, OnChanges, OnInit, SimpleChange, SimpleChanges, Type} from '@angular/core';\n\nimport * as angular from '../common/angular1';\nimport {$COMPILE, $CONTROLLER, $HTTP_BACKEND, $SCOPE, $TEMPLATE_CACHE} from '../common/constants';\nimport {controllerKey, strictEquals} from '../common/util';\n\n\ninterface IBindingDestination {\n  [key: string]: any;\n  $onChanges?: (changes: SimpleChanges) => void;\n}\n\ninterface IControllerInstance extends IBindingDestination {\n  $doCheck?: () => void;\n  $onDestroy?: () => void;\n  $onInit?: () => void;\n  $postLink?: () => void;\n}\n\ntype LifecycleHook = '$doCheck' | '$onChanges' | '$onDestroy' | '$onInit' | '$postLink';\n\n\nconst /** @type {?} */ CAMEL_CASE = /([A-Z])/g;\nconst /** @type {?} */ INITIAL_VALUE = {\n  __UNINITIALIZED__: true\n};\nconst /** @type {?} */ NOT_SUPPORTED: any = 'NOT_SUPPORTED';\nexport class UpgradeNg1ComponentAdapterBuilder {\n  type: Type<any>;\n  inputs: string[] = [];\n  inputsRename: string[] = [];\n  outputs: string[] = [];\n  outputsRename: string[] = [];\n  propertyOutputs: string[] = [];\n  checkProperties: string[] = [];\n  propertyMap: {[name: string]: string} = {};\n  linkFn: angular.ILinkFn|null = null;\n  directive: angular.IDirective|null = null;\n  $controller: angular.IControllerService|null = null;\n/**\n * @param {?} name\n */\nconstructor(public name: string) {\n    const selector = name.replace(\n        CAMEL_CASE, (all: any /** TODO #9100 */, next: string) => '-' + next.toLowerCase());\n    const self = this;\n    this.type = Directive({\n                  selector: selector,\n                  inputs: this.inputsRename,\n                  outputs: this.outputsRename\n                }).Class({\n      constructor: [\n        new Inject($SCOPE), ElementRef,\n        function(scope: angular.IScope, elementRef: ElementRef) {\n          return new UpgradeNg1ComponentAdapter(\n              self.linkFn !, scope, self.directive !, elementRef, self.$controller !, self.inputs,\n              self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap);\n        }\n      ],\n      ngOnInit: function() { /* needs to be here for ng2 to properly detect it */ },\n      ngOnChanges: function() { /* needs to be here for ng2 to properly detect it */ },\n      ngDoCheck: function() { /* needs to be here for ng2 to properly detect it */ },\n      ngOnDestroy: function() { /* needs to be here for ng2 to properly detect it */ },\n    });\n  }\n/**\n * @param {?} injector\n * @return {?}\n */\nextractDirective(injector: angular.IInjectorService): angular.IDirective {\n    const /** @type {?} */ directives: angular.IDirective[] = injector.get(this.name + 'Directive');\n    if (directives.length > 1) {\n      throw new Error('Only support single directive definition for: ' + this.name);\n    }\n    const /** @type {?} */ directive = directives[0];\n    if (directive.replace) this.notSupported('replace');\n    if (directive.terminal) this.notSupported('terminal');\n    const /** @type {?} */ link = directive.link;\n    if (typeof link == 'object') {\n      if (( /** @type {?} */((<angular.IDirectivePrePost>link))).post) this.notSupported('link.post');\n    }\n    return directive;\n  }\n/**\n * @param {?} feature\n * @return {?}\n */\nprivate notSupported(feature: string) {\n    throw new Error(`Upgraded directive '${this.name}' does not support '${feature}'.`);\n  }\n/**\n * @return {?}\n */\nextractBindings() {\n    const /** @type {?} */ btcIsObject = typeof /** @type {?} */(( this.directive)).bindToController === 'object';\n    if (btcIsObject && Object.keys( /** @type {?} */((this.directive)).scope).length) {\n      throw new Error(\n          `Binding definitions on scope and controller at the same time are not supported.`);\n    }\n\n    const /** @type {?} */ context = (btcIsObject) ? /** @type {?} */(( this.directive)).bindToController : /** @type {?} */(( this.directive)).scope;\n\n    if (typeof context == 'object') {\n      Object.keys(context).forEach(propName => {\n        const /** @type {?} */ definition = context[propName];\n        const /** @type {?} */ bindingType = definition.charAt(0);\n        const /** @type {?} */ bindingOptions = definition.charAt(1);\n        const /** @type {?} */ attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n\n        // QUESTION: What about `=*`? Ignore? Throw? Support?\n\n        const /** @type {?} */ inputName = `input_${attrName}`;\n        const /** @type {?} */ inputNameRename = `${inputName}: ${attrName}`;\n        const /** @type {?} */ outputName = `output_${attrName}`;\n        const /** @type {?} */ outputNameRename = `${outputName}: ${attrName}`;\n        const /** @type {?} */ outputNameRenameChange = `${outputNameRename}Change`;\n\n        switch (bindingType) {\n          case '@':\n          case '<':\n            this.inputs.push(inputName);\n            this.inputsRename.push(inputNameRename);\n            this.propertyMap[inputName] = propName;\n            break;\n          case '=':\n            this.inputs.push(inputName);\n            this.inputsRename.push(inputNameRename);\n            this.propertyMap[inputName] = propName;\n\n            this.outputs.push(outputName);\n            this.outputsRename.push(outputNameRenameChange);\n            this.propertyMap[outputName] = propName;\n\n            this.checkProperties.push(propName);\n            this.propertyOutputs.push(outputName);\n            break;\n          case '&':\n            this.outputs.push(outputName);\n            this.outputsRename.push(outputNameRename);\n            this.propertyMap[outputName] = propName;\n            break;\n          default:\n            let /** @type {?} */ json = JSON.stringify(context);\n            throw new Error(\n                `Unexpected mapping '${bindingType}' in '${json}' in '${this.name}' directive.`);\n        }\n      });\n    }\n  }\n/**\n * @param {?} compile\n * @param {?} templateCache\n * @param {?} httpBackend\n * @return {?}\n */\ncompileTemplate(\n      compile: angular.ICompileService, templateCache: angular.ITemplateCacheService,\n      httpBackend: angular.IHttpBackendService): Promise<angular.ILinkFn>|null {\n    if ( /** @type {?} */((this.directive)).template !== undefined) {\n      this.linkFn = compileHtml(\n          isFunction( /** @type {?} */((this.directive)).template) ? ( /** @type {?} */(( /** @type {?} */((this.directive)).template as Function)))() : /** @type {?} */((\n                                                  this.directive)).template);\n    } else if ( /** @type {?} */((this.directive)).templateUrl) {\n      const /** @type {?} */ url = isFunction( /** @type {?} */((this.directive)).templateUrl) ?\n          ( /** @type {?} */(( /** @type {?} */((this.directive)).templateUrl as Function)))() : /** @type {?} */((\n          this.directive)).templateUrl;\n      const /** @type {?} */ html = templateCache.get(url);\n      if (html !== undefined) {\n        this.linkFn = compileHtml(html);\n      } else {\n        return new Promise((resolve, err) => {\n          httpBackend(\n              'GET', url, null,\n              (status: any /** TODO #9100 */, response: any /** TODO #9100 */) => {\n                if (status == 200) {\n                  resolve(this.linkFn = compileHtml(templateCache.put(url, response)));\n                } else {\n                  err(`GET ${url} returned ${status}: ${response}`);\n                }\n              });\n        });\n      }\n    } else {\n      throw new Error(`Directive '${this.name}' is not a component, it is missing template.`);\n    }\n    return null;\n/**\n * @param {?} html\n * @return {?}\n */\nfunction compileHtml(html: any /** TODO #9100 */): angular.ILinkFn {\n      const /** @type {?} */ div = document.createElement('div');\n      div.innerHTML = html;\n      return compile(div.childNodes);\n    }\n  }\n/**\n * Upgrade ng1 components into Angular.\n * @param {?} exportedComponents\n * @param {?} injector\n * @return {?}\n */\nstatic resolve(\n      exportedComponents: {[name: string]: UpgradeNg1ComponentAdapterBuilder},\n      injector: angular.IInjectorService): Promise<angular.ILinkFn[]> {\n    const /** @type {?} */ promises: Promise<angular.ILinkFn>[] = [];\n    const /** @type {?} */ compile: angular.ICompileService = injector.get($COMPILE);\n    const /** @type {?} */ templateCache: angular.ITemplateCacheService = injector.get($TEMPLATE_CACHE);\n    const /** @type {?} */ httpBackend: angular.IHttpBackendService = injector.get($HTTP_BACKEND);\n    const /** @type {?} */ $controller: angular.IControllerService = injector.get($CONTROLLER);\n    for (const /** @type {?} */ name in exportedComponents) {\n      if (( /** @type {?} */((<any>exportedComponents))).hasOwnProperty(name)) {\n        const /** @type {?} */ exportedComponent = exportedComponents[name];\n        exportedComponent.directive = exportedComponent.extractDirective(injector);\n        exportedComponent.$controller = $controller;\n        exportedComponent.extractBindings();\n        const /** @type {?} */ promise: Promise<angular.ILinkFn> = /** @type {?} */((\n            exportedComponent.compileTemplate(compile, templateCache, httpBackend)));\n        if (promise) promises.push(promise);\n      }\n    }\n    return Promise.all(promises);\n  }\n}\n\nfunction UpgradeNg1ComponentAdapterBuilder_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.type;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.inputs;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.inputsRename;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.outputs;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.outputsRename;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.propertyOutputs;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.checkProperties;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.propertyMap;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.linkFn;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.directive;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.$controller;\n/** @type {?} */\nUpgradeNg1ComponentAdapterBuilder.prototype.name;\n}\n\nclass UpgradeNg1ComponentAdapter implements OnInit, OnChanges, DoCheck {\nprivate controllerInstance: IControllerInstance|null = null;\n  destinationObj: IBindingDestination|null = null;\n  checkLastValues: any[] = [];\n  componentScope: angular.IScope;\n  element: Element;\n  $element: any = null;\n/**\n * @param {?} linkFn\n * @param {?} scope\n * @param {?} directive\n * @param {?} elementRef\n * @param {?} $controller\n * @param {?} inputs\n * @param {?} outputs\n * @param {?} propOuts\n * @param {?} checkProperties\n * @param {?} propertyMap\n */\nconstructor(\nprivate linkFn: angular.ILinkFn, scope: angular.IScope,\nprivate directive: angular.IDirective,\n      elementRef: ElementRef,\nprivate $controller: angular.IControllerService,\nprivate inputs: string[],\nprivate outputs: string[],\nprivate propOuts: string[],\nprivate checkProperties: string[],\nprivate propertyMap: {[key: string]: string}) {\n    this.element = elementRef.nativeElement;\n    this.componentScope = scope.$new(!!directive.scope);\n    this.$element = angular.element(this.element);\n    const controllerType = directive.controller;\n    if (directive.bindToController && controllerType) {\n      this.controllerInstance = this.buildController(controllerType);\n      this.destinationObj = this.controllerInstance;\n    } else {\n      this.destinationObj = this.componentScope;\n    }\n\n    for (let i = 0; i < inputs.length; i++) {\n      (this as any /** TODO #9100 */)[inputs[i]] = null;\n    }\n    for (let j = 0; j < outputs.length; j++) {\n      const emitter = (this as any)[outputs[j]] = new EventEmitter<any>();\n      this.setComponentProperty(\n          outputs[j], (emitter => (value: any) => emitter.emit(value))(emitter));\n    }\n    for (let k = 0; k < propOuts.length; k++) {\n      this.checkLastValues.push(INITIAL_VALUE);\n    }\n  }\n/**\n * @return {?}\n */\nngOnInit() {\n    if (!this.directive.bindToController && this.directive.controller) {\n      this.controllerInstance = this.buildController(this.directive.controller);\n    }\n\n    if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n      this.controllerInstance.$onInit();\n    }\n\n    let /** @type {?} */ link = this.directive.link;\n    if (typeof link == 'object') link = ( /** @type {?} */((<angular.IDirectivePrePost>link))).pre;\n    if (link) {\n      const /** @type {?} */ attrs: angular.IAttributes = NOT_SUPPORTED;\n      const /** @type {?} */ transcludeFn: angular.ITranscludeFunction = NOT_SUPPORTED;\n      const /** @type {?} */ linkController = this.resolveRequired(this.$element, /** @type {?} */(( this.directive.require)));\n      ( /** @type {?} */((<angular.IDirectiveLinkFn>this.directive.link)))(\n          this.componentScope, this.$element, attrs, linkController, transcludeFn);\n    }\n\n    const /** @type {?} */ childNodes: Node[] = [];\n    let /** @type {?} */ childNode: any /** TODO #9100 */;\n    while (childNode = this.element.firstChild) {\n      this.element.removeChild(childNode);\n      childNodes.push(childNode);\n    }\n    this.linkFn(this.componentScope, (clonedElement, scope) => {\n      for (let /** @type {?} */ i = 0, /** @type {?} */ ii = /** @type {?} */(( clonedElement)).length; i < ii; i++) {\n        this.element.appendChild( /** @type {?} */((clonedElement))[i]);\n      }\n    }, {\n      parentBoundTranscludeFn: (scope: any /** TODO #9100 */,\n                                cloneAttach: any /** TODO #9100 */) => { cloneAttach(childNodes); }\n    });\n\n    if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n      this.controllerInstance.$postLink();\n    }\n  }\n/**\n * @param {?} changes\n * @return {?}\n */\nngOnChanges(changes: SimpleChanges) {\n    const /** @type {?} */ ng1Changes: any = {};\n    Object.keys(changes).forEach(name => {\n      const /** @type {?} */ change: SimpleChange = changes[name];\n      this.setComponentProperty(name, change.currentValue);\n      ng1Changes[this.propertyMap[name]] = change;\n    });\n\n    if (isFunction( /** @type {?} */((this.destinationObj)).$onChanges)) { /** @type {?} */(( /** @type {?} */((\n      this.destinationObj)).$onChanges))(ng1Changes);\n    }\n  }\n/**\n * @return {?}\n */\nngDoCheck() {\n    const /** @type {?} */ destinationObj = this.destinationObj;\n    const /** @type {?} */ lastValues = this.checkLastValues;\n    const /** @type {?} */ checkProperties = this.checkProperties;\n    const /** @type {?} */ propOuts = this.propOuts;\n    checkProperties.forEach((propName, i) => {\n      const /** @type {?} */ value = /** @type {?} */(( destinationObj))[propName];\n      const /** @type {?} */ last = lastValues[i];\n      if (!strictEquals(last, value)) {\n        const /** @type {?} */ eventEmitter: EventEmitter<any> = ( /** @type {?} */((this as any)))[propOuts[i]];\n        eventEmitter.emit(lastValues[i] = value);\n      }\n    });\n\n    if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n      this.controllerInstance.$doCheck();\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n      this.controllerInstance.$onDestroy();\n    }\n  }\n/**\n * @param {?} name\n * @param {?} value\n * @return {?}\n */\nsetComponentProperty(name: string, value: any) { /** @type {?} */((\n    this.destinationObj))[this.propertyMap[name]] = value;\n  }\n/**\n * @param {?} controllerType\n * @return {?}\n */\nprivate buildController(controllerType: any /** TODO #9100 */) {\n    const /** @type {?} */ locals = {$scope: this.componentScope, $element: this.$element};\n    const /** @type {?} */ controller: any =\n        this.$controller(controllerType, locals, null, this.directive.controllerAs);\n    this.$element.data(controllerKey( /** @type {?} */((this.directive.name))), controller);\n    return controller;\n  }\n/**\n * @param {?} $element\n * @param {?} require\n * @return {?}\n */\nprivate resolveRequired(\n      $element: angular.IAugmentedJQuery, require: angular.DirectiveRequireProperty): any {\n    if (!require) {\n      return undefined;\n    } else if (typeof require == 'string') {\n      let /** @type {?} */ name: string = /** @type {?} */(( <string>require));\n      let /** @type {?} */ isOptional = false;\n      let /** @type {?} */ startParent = false;\n      let /** @type {?} */ searchParents = false;\n      if (name.charAt(0) == '?') {\n        isOptional = true;\n        name = name.substr(1);\n      }\n      if (name.charAt(0) == '^') {\n        searchParents = true;\n        name = name.substr(1);\n      }\n      if (name.charAt(0) == '^') {\n        startParent = true;\n        name = name.substr(1);\n      }\n\n      const /** @type {?} */ key = controllerKey(name);\n      if (startParent) $element = /** @type {?} */(( $element.parent))();\n      const /** @type {?} */ dep = searchParents ? /** @type {?} */(( $element.inheritedData))(key) : /** @type {?} */(( $element.data))(key);\n      if (!dep && !isOptional) {\n        throw new Error(`Can not locate '${require}' in '${this.directive.name}'.`);\n      }\n      return dep;\n    } else if (require instanceof Array) {\n      const /** @type {?} */ deps: any[] = [];\n      for (let /** @type {?} */ i = 0; i < require.length; i++) {\n        deps.push(this.resolveRequired($element, require[i]));\n      }\n      return deps;\n    }\n    throw new Error(\n        `Directive '${this.directive.name}' require syntax unrecognized: ${this.directive.require}`);\n  }\n}\n\nfunction UpgradeNg1ComponentAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.controllerInstance;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.destinationObj;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.checkLastValues;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.componentScope;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.element;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.$element;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.linkFn;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.directive;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.$controller;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.inputs;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.outputs;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.propOuts;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.checkProperties;\n/** @type {?} */\nUpgradeNg1ComponentAdapter.prototype.propertyMap;\n}\n\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Compiler, CompilerOptions, Directive, Injector, NgModule, NgModuleRef, NgZone, Provider, Testability, Type} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport * as angular from '../common/angular1';\nimport {$$TESTABILITY, $COMPILE, $INJECTOR, $ROOT_SCOPE, COMPILER_KEY, INJECTOR_KEY, NG_ZONE_KEY} from '../common/constants';\nimport {downgradeComponent} from '../common/downgrade_component';\nimport {downgradeInjectable} from '../common/downgrade_injectable';\nimport {Deferred, controllerKey, onError} from '../common/util';\n\nimport {UpgradeNg1ComponentAdapterBuilder} from './upgrade_ng1_adapter';\n\nlet /** @type {?} */ upgradeCount: number = 0;\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n * \n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n * \n * ## Mental Model\n * \n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n * \n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n * \n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n * \n * \n * \\@Component({ \n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * \n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n * \n * ```\n * \n * \\@stable\n */\nexport class UpgradeAdapter {\nprivate idPrefix: string = `NG2_UPGRADE_${upgradeCount++}_`;\nprivate downgradedComponents: Type<any>[] = [];\n/**\n * An internal map of ng1 components which need to up upgraded to ng2.\n * \n * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n * \n * \\@internal\n */\nprivate ng1ComponentsToBeUpgraded: {[name: string]: UpgradeNg1ComponentAdapterBuilder} = {};\nprivate upgradedProviders: Provider[] = [];\nprivate ngZone: NgZone;\nprivate ng1Module: angular.IModule;\nprivate moduleRef: NgModuleRef<any>|null = null;\nprivate ng2BootstrapDeferred: Deferred<angular.IInjectorService>;\n/**\n * @param {?} ng2AppModule\n * @param {?=} compilerOptions\n */\nconstructor(private ng2AppModule: Type<any>,\nprivate compilerOptions?: CompilerOptions) {\n    if (!ng2AppModule) {\n      throw new Error(\n          'UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n    }\n  }\n/**\n * Allows Angular Component to be used from AngularJS.\n * \n * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n * Angular Component. The adapter will bootstrap Angular component from within the\n * AngularJS template.\n * \n * ## Mental Model\n * \n * 1. The component is instantiated by being listed in AngularJS template. This means that the\n *    host element is controlled by AngularJS, but the component's view will be controlled by\n *    Angular.\n * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n *    syntax. This has to be done, this way because we must follow Angular components do not\n *    declare how the attributes should be interpreted.\n * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n *    by way of the `ControlValueAccessor` interface from \\@angular/forms. Only components that\n *    implement this interface are eligible.\n * \n * ## Supported Features\n * \n * - Bindings:\n *   - Attribute: `<comp name=\"World\">`\n *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n *   - Expression:  `<comp [name]=\"username\">`\n *   - Event:  `<comp (close)=\"doSomething()\">`\n *   - ng-model: `<comp ng-model=\"name\">`\n * - Content projection: yes\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n * const module = angular.module('myExample', []);\n * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n * \n * \\@Component({ \n *   selector: 'greet',\n *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n * })\n * class Greeter {\n *   \\@Input() salutation: string;\n *   \\@Input() name: string;\n * }\n * \n * \\@NgModule({ \n *   declarations: [Greeter],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML =\n *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n * });\n * ```\n * @param {?} component\n * @return {?}\n */\ndowngradeNg2Component(component: Type<any>): Function {\n    this.downgradedComponents.push(component);\n\n    return downgradeComponent({component});\n  }\n/**\n * Allows AngularJS Component to be used from Angular.\n * \n * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n * directive. The adapter will bootstrap AngularJS component from within the Angular\n * template.\n * \n * ## Mental Model\n * \n * 1. The component is instantiated by being listed in Angular template. This means that the\n *    host element is controlled by Angular, but the component's view will be controlled by\n *    AngularJS.\n * \n * ## Supported Features\n * \n * - Bindings:\n *   - Attribute: `<comp name=\"World\">`\n *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n *   - Expression:  `<comp [name]=\"username\">`\n *   - Event:  `<comp (close)=\"doSomething()\">`\n * - Transclusion: yes\n * - Only some of the features of\n *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n *   supported:\n *   - `compile`: not supported because the host element is owned by Angular, which does\n *     not allow modifying DOM structure during compilation.\n *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n *   - `controllerAs`: supported.\n *   - `bindToController`: supported.\n *   - `link`: supported. (NOTE: only pre-link function is supported.)\n *   - `name`: supported.\n *   - `priority`: ignored.\n *   - `replace`: not supported.\n *   - `require`: supported.\n *   - `restrict`: must be set to 'E'.\n *   - `scope`: supported.\n *   - `template`: supported.\n *   - `templateUrl`: supported.\n *   - `terminal`: ignored.\n *   - `transclude`: supported.\n * \n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n * const module = angular.module('myExample', []);\n * \n * module.directive('greet', function() {\n *   return {\n *     scope: {salutation: '=', name: '=' },\n *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n *   };\n * });\n * \n * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n * \n * \\@Component({ \n *   selector: 'ng2',\n *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n * })\n * class Ng2Component {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML = '<ng2></ng2>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n * });\n * ```\n * @param {?} name\n * @return {?}\n */\nupgradeNg1Component(name: string): Type<any> {\n    if (( /** @type {?} */((<any>this.ng1ComponentsToBeUpgraded))).hasOwnProperty(name)) {\n      return this.ng1ComponentsToBeUpgraded[name].type;\n    } else {\n      return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n          .type;\n    }\n  }\n/**\n * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n * Use this instead of `angular.mock.module()` to load the upgrade module into\n * the AngularJS testing injector.\n * \n * ### Example\n * \n * ```\n * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n * \n * // configure the adapter with upgrade/downgrade components and services\n * upgradeAdapter.downgradeNg2Component(MyComponent);\n * \n * let upgradeAdapterRef: UpgradeAdapterRef;\n * let $compile, $rootScope;\n * \n * // We must register the adapter before any calls to `inject()`\n * beforeEach(() => {\n *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n * });\n * \n * beforeEach(inject((_$compile_, _$rootScope_) => {\n *   $compile = _$compile_;\n *   $rootScope = _$rootScope_;\n * }));\n * \n * it(\"says hello\", (done) => {\n *   upgradeAdapterRef.ready(() => {\n *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n *     $rootScope.$apply();\n *     expect(element.html()).toContain(\"Hello World\");\n *     done();\n *   })\n * });\n * \n * ```\n * \n * @param {?=} modules any AngularJS modules that the upgrade module should depend upon\n * @return {?} an {\\@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n * run assertions once the Angular components are ready to test through AngularJS.\n */\nregisterForNg1Tests(modules?: string[]): UpgradeAdapterRef {\n    const /** @type {?} */ windowNgMock = ( /** @type {?} */((window as any)))['angular'].mock;\n    if (!windowNgMock || !windowNgMock.module) {\n      throw new Error('Failed to find \\'angular.mock.module\\'.');\n    }\n    this.declareNg1Module(modules);\n    windowNgMock.module(this.ng1Module.name);\n    const /** @type {?} */ upgrade = new UpgradeAdapterRef();\n    this.ng2BootstrapDeferred.promise.then(\n        (ng1Injector) => { ( /** @type {?} */((<any>upgrade)))._bootstrapDone(this.moduleRef, ng1Injector); }, onError);\n    return upgrade;\n  }\n/**\n * Bootstrap a hybrid AngularJS / Angular application.\n * \n * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n * AngularJS, this bootstrap is asynchronous.\n * \n * ### Example\n * \n * ```\n * const adapter = new UpgradeAdapter(MyNg2Module);\n * const module = angular.module('myExample', []);\n * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n * \n * module.directive('ng1', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n * \n * \n * \\@Component({ \n *   selector: 'ng2',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n * })\n * class Ng2 {\n * }\n * \n * \\@NgModule({ \n *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n * \n * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n * \n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n * ```\n * @param {?} element\n * @param {?=} modules\n * @param {?=} config\n * @return {?}\n */\nbootstrap(element: Element, modules?: any[], config?: angular.IAngularBootstrapConfig):\n      UpgradeAdapterRef {\n    this.declareNg1Module(modules);\n\n    const /** @type {?} */ upgrade = new UpgradeAdapterRef();\n\n    // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n    const /** @type {?} */ windowAngular = ( /** @type {?} */((window as any)) /** TODO #???? */)['angular'];\n    windowAngular.resumeBootstrap = undefined;\n\n    this.ngZone.run(() => { angular.bootstrap(element, [this.ng1Module.name], /** @type {?} */(( config))); });\n    const /** @type {?} */ ng1BootstrapPromise = new Promise((resolve) => {\n      if (windowAngular.resumeBootstrap) {\n        const /** @type {?} */ originalResumeBootstrap: () => void = windowAngular.resumeBootstrap;\n        windowAngular.resumeBootstrap = function() {\n          windowAngular.resumeBootstrap = originalResumeBootstrap;\n          windowAngular.resumeBootstrap.apply(this, arguments);\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n    });\n\n    Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(([ng1Injector]) => { /** @type {?} */((\n      angular.element(element).data))(controllerKey(INJECTOR_KEY), /** @type {?} */(( this.moduleRef)).injector); /** @type {?} */((\n      this.moduleRef)).injector.get(NgZone).run(\n          () => { ( /** @type {?} */((<any>upgrade)))._bootstrapDone(this.moduleRef, ng1Injector); });\n    }, onError);\n    return upgrade;\n  }\n/**\n * Allows AngularJS service to be accessible from Angular.\n * \n * \n * ### Example\n * \n * ```\n * class Login { ... }\n * class Server { ... }\n * \n * \\@Injectable() \n * class Example {\n *   constructor(\\@Inject('server') server, login: Login) {\n *     ...\n *   }\n * }\n * \n * const module = angular.module('myExample', []);\n * module.service('server', Server);\n * module.service('login', Login);\n * \n * const adapter = new UpgradeAdapter(MyNg2Module);\n * adapter.upgradeNg1Provider('server');\n * adapter.upgradeNg1Provider('login', {asToken: Login});\n * \n * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n *   const example: Example = ref.ng2Injector.get(Example);\n * });\n * \n * ```\n * @param {?} name\n * @param {?=} options\n * @return {?}\n */\nupgradeNg1Provider(name: string, options?: {asToken: any}) {\n    const /** @type {?} */ token = options && options.asToken || name;\n    this.upgradedProviders.push({\n      provide: token,\n      useFactory: ($injector: angular.IInjectorService) => $injector.get(name),\n      deps: [$INJECTOR]\n    });\n  }\n/**\n * Allows Angular service to be accessible from AngularJS.\n * \n * \n * ### Example\n * \n * ```\n * class Example {\n * }\n * \n * const adapter = new UpgradeAdapter(MyNg2Module);\n * \n * const module = angular.module('myExample', []);\n * module.factory('example', adapter.downgradeNg2Provider(Example));\n * \n * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n *   const example: Example = ref.ng1Injector.get('example');\n * });\n * \n * ```\n * @param {?} token\n * @return {?}\n */\ndowngradeNg2Provider(token: any): Function { return downgradeInjectable(token); }\n/**\n * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n * hybrid application.\n * \n * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n * \n * @param {?=} modules The AngularJS modules that this upgrade module should depend upon.\n * @return {?} The AngularJS upgrade module that is declared by this method\n * \n * ### Example\n * \n * ```\n * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n * upgradeAdapter.declareNg1Module(['heroApp']);\n * ```\n */\nprivate declareNg1Module(modules: string[] = []): angular.IModule {\n    const /** @type {?} */ delayApplyExps: Function[] = [];\n    let /** @type {?} */ original$applyFn: Function;\n    let /** @type {?} */ rootScopePrototype: any;\n    let /** @type {?} */ rootScope: angular.IRootScopeService;\n    const /** @type {?} */ upgradeAdapter = this;\n    const /** @type {?} */ ng1Module = this.ng1Module = angular.module(this.idPrefix, modules);\n    const /** @type {?} */ platformRef = platformBrowserDynamic();\n\n    this.ngZone = new NgZone({enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec')});\n    this.ng2BootstrapDeferred = new Deferred();\n    ng1Module.factory(INJECTOR_KEY, () => /** @type {?} */(( this.moduleRef)).injector.get(Injector))\n        .constant(NG_ZONE_KEY, this.ngZone)\n        .factory(COMPILER_KEY, () => /** @type {?} */(( this.moduleRef)).injector.get(Compiler))\n        .config([\n          '$provide', '$injector',\n          (provide: angular.IProvideService, ng1Injector: angular.IInjectorService) => {\n            provide.decorator($ROOT_SCOPE, [\n              '$delegate',\n              function(rootScopeDelegate: angular.IRootScopeService) {\n                // Capture the root apply so that we can delay first call to $apply until we\n                // bootstrap Angular and then we replay and restore the $apply.\n                rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                if (rootScopePrototype.hasOwnProperty('$apply')) {\n                  original$applyFn = rootScopePrototype.$apply;\n                  rootScopePrototype.$apply = (exp: any) => delayApplyExps.push(exp);\n                } else {\n                  throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                }\n                return rootScope = rootScopeDelegate;\n              }\n            ]);\n            if (ng1Injector.has($$TESTABILITY)) {\n              provide.decorator($$TESTABILITY, [\n                '$delegate',\n                function(testabilityDelegate: angular.ITestabilityService) {\n                  const /** @type {?} */ originalWhenStable: Function = testabilityDelegate.whenStable;\n                  // Cannot use arrow function below because we need the context\n                  const /** @type {?} */ newWhenStable = function(callback: Function) {\n                    originalWhenStable.call(this, function() {\n                      const /** @type {?} */ ng2Testability: Testability = /** @type {?} */((\n                          upgradeAdapter.moduleRef)).injector.get(Testability);\n                      if (ng2Testability.isStable()) {\n                        callback.apply(this, arguments);\n                      } else {\n                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                      }\n                    });\n                  };\n\n                  testabilityDelegate.whenStable = newWhenStable;\n                  return testabilityDelegate;\n                }\n              ]);\n            }\n          }\n        ]);\n\n    ng1Module.run([\n      '$injector', '$rootScope',\n      (ng1Injector: angular.IInjectorService, rootScope: angular.IRootScopeService) => {\n        UpgradeNg1ComponentAdapterBuilder.resolve(this.ng1ComponentsToBeUpgraded, ng1Injector)\n            .then(() => {\n              // At this point we have ng1 injector and we have lifted ng1 components into ng2, we\n              // now can bootstrap ng2.\n              const /** @type {?} */ DynamicNgUpgradeModule =\n                  NgModule({\n                    providers: [\n                      {provide: $INJECTOR, useFactory: () => ng1Injector},\n                      {provide: $COMPILE, useFactory: () => ng1Injector.get($COMPILE)},\n                      this.upgradedProviders\n                    ],\n                    imports: [this.ng2AppModule],\n                    entryComponents: this.downgradedComponents\n                  }).Class({\n                    constructor: function DynamicNgUpgradeModule() {},\n                    ngDoBootstrap: function() {}\n                  });\n              ( /** @type {?} */((platformRef as any)))\n                  ._bootstrapModuleWithZone(\n                      DynamicNgUpgradeModule, this.compilerOptions, this.ngZone)\n                  .then((ref: NgModuleRef<any>) => {\n                    this.moduleRef = ref;\n                    this.ngZone.run(() => {\n                      if (rootScopePrototype) {\n                        rootScopePrototype.$apply = original$applyFn;  // restore original $apply\n                        while (delayApplyExps.length) {\n                          rootScope.$apply(delayApplyExps.shift());\n                        }\n                        rootScopePrototype = null;\n                      }\n                    });\n                  })\n                  .then(() => this.ng2BootstrapDeferred.resolve(ng1Injector), onError)\n                  .then(() => {\n                    let /** @type {?} */ subscription =\n                        this.ngZone.onMicrotaskEmpty.subscribe({next: () => rootScope.$digest()});\n                    rootScope.$on('$destroy', () => { subscription.unsubscribe(); });\n                  });\n            })\n            .catch((e) => this.ng2BootstrapDeferred.reject(e));\n      }\n    ]);\n\n    return ng1Module;\n  }\n}\n\nfunction UpgradeAdapter_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeAdapter.prototype.idPrefix;\n/** @type {?} */\nUpgradeAdapter.prototype.downgradedComponents;\n/**\n * An internal map of ng1 components which need to up upgraded to ng2.\n * \n * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n * \n * \\@internal\n * @type {?}\n */\nUpgradeAdapter.prototype.ng1ComponentsToBeUpgraded;\n/** @type {?} */\nUpgradeAdapter.prototype.upgradedProviders;\n/** @type {?} */\nUpgradeAdapter.prototype.ngZone;\n/** @type {?} */\nUpgradeAdapter.prototype.ng1Module;\n/** @type {?} */\nUpgradeAdapter.prototype.moduleRef;\n/** @type {?} */\nUpgradeAdapter.prototype.ng2BootstrapDeferred;\n/** @type {?} */\nUpgradeAdapter.prototype.ng2AppModule;\n/** @type {?} */\nUpgradeAdapter.prototype.compilerOptions;\n}\n\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of AngularJS's $compile.\n */\nclass ParentInjectorPromise {\nprivate injector: Injector;\nprivate callbacks: ((injector: Injector) => any)[] = [];\n/**\n * @param {?} element\n */\nconstructor(private element: angular.IAugmentedJQuery) {\n    // store the promise on the element\n    element.data !(controllerKey(INJECTOR_KEY), this);\n  }\n/**\n * @param {?} callback\n * @return {?}\n */\nthen(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n/**\n * @param {?} injector\n * @return {?}\n */\nresolve(injector: Injector) {\n    this.injector = injector; /** @type {?} */((\n\n    // reset the element data to point to the real injector\n    this.element.data))(controllerKey(INJECTOR_KEY), injector);\n\n    // clean out the element to prevent memory leaks\n    this.element = /** @type {?} */(( null));\n\n    // run all the queued callbacks\n    this.callbacks.forEach((callback) => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n\nfunction ParentInjectorPromise_tsickle_Closure_declarations() {\n/** @type {?} */\nParentInjectorPromise.prototype.injector;\n/** @type {?} */\nParentInjectorPromise.prototype.callbacks;\n/** @type {?} */\nParentInjectorPromise.prototype.element;\n}\n\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n * \n * \\@stable\n */\nexport class UpgradeAdapterRef {\nprivate _readyFn: ((upgradeAdapterRef?: UpgradeAdapterRef) => void)|null = null;\npublic ng1RootScope: angular.IRootScopeService = /** @type {?} */(( null));\npublic ng1Injector: angular.IInjectorService = /** @type {?} */(( null));\npublic ng2ModuleRef: NgModuleRef<any> = /** @type {?} */(( null));\npublic ng2Injector: Injector = /** @type {?} */(( null));\n/**\n * @param {?} ngModuleRef\n * @param {?} ng1Injector\n * @return {?}\n */\nprivate _bootstrapDone(ngModuleRef: NgModuleRef<any>, ng1Injector: angular.IInjectorService) {\n    this.ng2ModuleRef = ngModuleRef;\n    this.ng2Injector = ngModuleRef.injector;\n    this.ng1Injector = ng1Injector;\n    this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n    this._readyFn && this._readyFn(this);\n  }\n/**\n * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n * application has been bootstrapped.\n * \n * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n * require a call to `$apply()`.\n * @param {?} fn\n * @return {?}\n */\npublic ready(fn: (upgradeAdapterRef: UpgradeAdapterRef) => void) { this._readyFn = fn; }\n/**\n * Dispose of running hybrid AngularJS / Angular application.\n * @return {?}\n */\npublic dispose() { /** @type {?} */((\n    this.ng1Injector)).get($ROOT_SCOPE).$destroy(); /** @type {?} */((\n    this.ng2ModuleRef)).destroy();\n  }\n}\n\nfunction UpgradeAdapterRef_tsickle_Closure_declarations() {\n/** @type {?} */\nUpgradeAdapterRef.prototype._readyFn;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng1RootScope;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng1Injector;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng2ModuleRef;\n/** @type {?} */\nUpgradeAdapterRef.prototype.ng2Injector;\n}\n\n"],"names":["angular","bootstrap","noNg","module","element","version","$COMPILE","$CONTROLLER","$HTTP_BACKEND","$INJECTOR","$PARSE","$ROOT_SCOPE","this","parseBinding","bracketAttr","attr","onAttr","capitalAttr","_this","resolve","res","DowngradeComponentAdapter","id","attrs","scope","ngModel","parentInjector","$injector","$compile","$parse","componentFactory","inputChanges","componentRef","componentScope","$new","prototype","compileContents","compiledProjectableNodes","projectableNodes","groupProjectableNodes","push","clone","childInjector","_angular_core","ReflectiveInjector","resolveAndCreate","provide","$SCOPE","useValue","hookupNgModel","component","setupInputs","inputs","_loop_1","i","input","PropertyBinding","propName","templateName","hasOwnProperty","observeFn_1","prop","prevValue","INITIAL_VALUE","currValue","updateInput","$observe","unwatch_1","this_1","$watch","bindAttr","expr","bindonAttr","bracketParenAttr","watchFn","componentType","ngOnChanges","changeDetector","detectChanges","setupOutputs","outputs","j","length","output","assignExpr","substring","parenAttr","getter","setter","assign","Error","emitter","subscribe","next","registerCleanup","ParentInjectorPromise$1","callback","injector","CAMEL_CASE","NOT_SUPPORTED","UpgradeNg1ComponentAdapterBuilder","name","inputsRename","outputsRename","propertyOutputs","checkProperties","propertyMap","linkFn","directive","$controller","selector","replace","all","toLowerCase","self","type","Directive","Class","constructor","Inject","ElementRef","ngOnInit","extractDirective","directives","get","link","feature","extractBindings","btcIsObject","bindToController","context","definition","bindingType","charAt","bindingOptions","attrName","inputName","inputNameRename","outputName","outputNameRename","outputNameRenameChange","compileTemplate","compile","templateCache","httpBackend","undefined","template","compileHtml","isFunction","templateUrl","url_1","html","Promise","err","status","response","put","exportedComponents","promises","$TEMPLATE_CACHE","exportedComponent","UpgradeNg1ComponentAdapter","elementRef","propOuts","controllerInstance","destinationObj","checkLastValues","$element","nativeElement","controllerType","controller","buildController","EventEmitter","setComponentProperty","value","emit","$onInit","pre","transcludeFn","linkController","resolveRequired","childNode","childNodes","firstChild","removeChild","clonedElement","parentBoundTranscludeFn","cloneAttach","changes","change","currentValue","ng1Changes","ngDoCheck","lastValues","forEach","eventEmitter","require","isOptional","startParent","searchParents","substr","key","controllerKey","dep","Array","deps","UpgradeAdapter","registerForNg1Tests","modules","element$$1","config","declareNg1Module","upgrade","UpgradeAdapterRef","windowAngular","resumeBootstrap","ngZone","run","ng1Module","ng1BootstrapPromise","originalResumeBootstrap_1","apply","arguments","original$applyFn","rootScopePrototype","rootScope","delayApplyExps","upgradeAdapter","module$1","idPrefix","platformRef","_angular_platformBrowserDynamic","platformBrowserDynamic","NgZone","enableLongStackTrace","Zone","constant","NG_ZONE_KEY","factory","COMPILER_KEY","Compiler","decorator","rootScopeDelegate","$apply","exp","$$TESTABILITY","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","call","ng2Testability","Testability","isStable","bind","ng1Injector","ng1ComponentsToBeUpgraded","then","DynamicNgUpgradeModule","NgModule","providers","useFactory","upgradedProviders","imports","ng2AppModule","entryComponents","downgradedComponents","ngDoBootstrap","_bootstrapModuleWithZone","compilerOptions","ref","moduleRef","shift","ng2BootstrapDeferred","onError","subscription","onMicrotaskEmpty","$digest","dispose","e","getComponentName","overriddenName","toString","split","groupNodesBySelector","ngContentSelectors","nodes","ii","findMatchingNgContentIndex","ngContentIndices","wildcardNgContentIndex","matchesSelector","idCount","directiveFactory","REQUIRE_INJECTOR","REQUIRE_NG_MODEL","required","INJECTOR_KEY","downgradeFn","componentFactoryResolver","ComponentFactoryResolver","resolveComponentFactory","info","injectorPromise","facade","createComponent","getInjector"],"mappings":"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"}
{"version":3,"sources":["upgrade.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","upgrade","core","platformBrowserDynamic","this","_angular_core","_angular_platformBrowserDynamic","noNg","Error","onError","e","console","error","stack","log","controllerKey","name","directiveNormalize","replace","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","_","letter","toUpperCase","getComponentName","component","overriddenName","toString","split","isFunction","value","supportsNgModel","writeValue","registerOnChange","hookupNgModel","ngModel","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","strictEquals","val1","val2","groupNodesBySelector","ngContentSelectors","nodes","projectableNodes","i","ii","length","j","jj","node","ngContentIndex","findMatchingNgContentIndex","push","element","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","_matches","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","call","downgradeComponent","info","directiveFactory","$compile","$injector","$parse","ngZone","needsNgZone","wrapCallback","cb","restrict","terminal","REQUIRE_INJECTOR","REQUIRE_NG_MODEL","link","scope","attrs","required","parentInjector","ranAsync","lazyModuleRef","get","LAZY_MODULE_REF","injector","doDowngrade","componentFactoryResolver","ComponentFactoryResolver","componentFactory","resolveComponentFactory","injectorPromise","ParentInjectorPromise$1","facade","DowngradeComponentAdapter","compileContents","createComponent","setupInputs","propagateDigest","setupOutputs","registerCleanup","resolve","getInjector","$evalAsync","downgradeFn","NgZone","isInAngularZone","run","isThenable","then","$COMPILE","$INJECTOR","$PARSE","obj","downgradeInjectable","token","INJECTOR_KEY","getOrCall","property","isMap","Array","isArray","notSupported","feature","VERSION","Version","angular","bootstrap","version","undefined","resumeBootstrap","getTestability","window","hasOwnProperty","modules","config","module$1","prefix","dependencies","$CONTROLLER","$SCOPE","PropertyBinding","prop","attr","parseBinding","prototype","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","substr","onAttr","bindAttr","bindonAttr","Deferred","_this","promise","Promise","res","rej","reject","INITIAL_VALUE","__UNINITIALIZED__","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compiledProjectableNodes","groupProjectableNodes","linkFns","map","forEach","linkFn","clone","providers","provide","useValue","childInjector","Injector","create","parent","componentRef","viewChangeDetector","ChangeDetectorRef","changeDetector","changeDetectorRef","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","inputs","this_1","input","propName","templateName","expr","observeFn_1","prevValue","currValue","updateInput","$observe","unwatch_1","$watch","watchFn","detectChanges","componentType","ngOnChanges","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","outputs","output","substring","subscribeToOutput","isAssignment","getter","setter","assign","emitter","subscribe","next","v","$event","destroyComponentRef","destroy","destroyed","$destroy","$on","unregisterApplication","SimpleChange","ParentInjectorPromise","injectorKey","callbacks","callback","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","getTemplate","fetchRemoteTemplate","template","templateUrl","$templateCache_1","url_1","status","response","put","buildController","controllerType","$scope","locals","controller","controllerAs","compileTemplate","compileHtml","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","attachChildrenFn","cloneAttachFn","$template","slots_1","Object","slotMap_1","filledSlots_1","keys","slotName","optional","nodeName","toLowerCase","filter","cloneAttach","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","controllerInstance","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","requiredControllersMap_1","key","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","CAMEL_CASE","INITIAL_VALUE$1","UpgradeNg1ComponentAdapterBuilder","inputsRename","outputsRename","propertyOutputs","checkProperties","propertyMap","all","self","MyClass","helper","UpgradeNg1ComponentAdapter","ngOnInit","ngDoCheck","ngOnDestroy","decorators","type","Directive","args","ctorParameters","Inject","ElementRef","extractBindings","btcIsObject","context","definition","bindingType","bindingOptions","attrName","inputName","inputNameRename","outputName","outputNameRename","outputNameRenameChange","json","JSON","stringify","exportedComponents","promises","exportedComponent","propOuts","destinationObj","checkLastValues","EventEmitter","indexOf","setComponentProperty","emit","k","attachChildNodes","$onInit","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ng1Changes","change","currentValue","$onChanges","lastValues","$doCheck","$onDestroy","upgradeCount","UpgradeAdapter","ng2AppModule","compilerOptions","idPrefix","downgradedComponents","ng1ComponentsToBeUpgraded","upgradedProviders","moduleRef","downgradeNg2Component","upgradeNg1Component","registerForNg1Tests","windowNgMock","mock","declareNg1Module","ng1Module","UpgradeAdapterRef","ng2BootstrapDeferred","ng1Injector","_bootstrapDone","element$$1","windowAngular","ng1BootstrapPromise","originalResumeBootstrap_1","r","apply","arguments","_a","upgradeNg1Provider","options","asToken","useFactory","deps","downgradeNg2Provider","original$applyFn","rootScopePrototype","rootScope","delayApplyExps","upgradeAdapter","platformRef","enableLongStackTrace","Zone","constant","Compiler","decorator","rootScopeDelegate","constructor","$apply","exp","has","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","ngModule","imports","entryComponents","DynamicNgUpgradeModule","ngDoBootstrap","NgModule","bootstrapModule","ref","shift","subscription","onMicrotaskEmpty","$digest","unsubscribe","catch","_readyFn","ng1RootScope","ng2ModuleRef","ng2Injector","ngModuleRef","ready","fn","dispose","defineProperty"],"mappings":"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","file":"upgrade.umd.min.js","sourcesContent":["/**\n * @license Angular v5.2.9-a3204f8\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser-dynamic')) :\n\ttypeof define === 'function' && define.amd ? define('@angular/upgrade', ['exports', '@angular/core', '@angular/platform-browser-dynamic'], factory) :\n\t(factory((global.ng = global.ng || {}, global.ng.upgrade = {}),global.ng.core,global.ng.platformBrowserDynamic));\n}(this, (function (exports,_angular_core,_angular_platformBrowserDynamic) { 'use strict';\n\n/**\n * @license Angular v5.2.9-a3204f8\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@stable\n */\nvar VERSION = new _angular_core.Version('5.2.9-a3204f8');\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @record\n */\n\n/**\n * @return {?}\n */\nfunction noNg() {\n    throw new Error('AngularJS v1.x is not loaded!');\n}\nvar angular = /** @type {?} */ ({\n    bootstrap: noNg,\n    module: noNg,\n    element: noNg,\n    version: undefined,\n    resumeBootstrap: noNg,\n    getTestability: noNg\n});\ntry {\n    if (window.hasOwnProperty('angular')) {\n        angular = (/** @type {?} */ (window)).angular;\n    }\n}\ncatch (/** @type {?} */ e) {\n    // ignore in CJS mode.\n}\n/**\n * @deprecated Use {\\@link setAngularJSGlobal} instead.\n * @param {?} ng\n * @return {?}\n */\n\n/**\n * @deprecated Use {\\@link getAngularJSGlobal} instead.\n * @return {?}\n */\n\n/**\n * Resets the AngularJS global.\n *\n * Used when AngularJS is loaded lazily, and not available on `window`.\n *\n * \\@stable\n * @param {?} ng\n * @return {?}\n */\n\n/**\n * Returns the current AngularJS global.\n *\n * \\@stable\n * @return {?}\n */\n\nvar bootstrap = function (e, modules, config) {\n    return angular.bootstrap(e, modules, config);\n};\nvar module$1 = function (prefix, dependencies) {\n    return angular.module(prefix, dependencies);\n};\nvar element = function (e) { return angular.element(e); };\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar $COMPILE = '$compile';\nvar $CONTROLLER = '$controller';\n\nvar $HTTP_BACKEND = '$httpBackend';\nvar $INJECTOR = '$injector';\n\nvar $PARSE = '$parse';\n\nvar $ROOT_SCOPE = '$rootScope';\nvar $SCOPE = '$scope';\nvar $TEMPLATE_CACHE = '$templateCache';\n\nvar $$TESTABILITY = '$$testability';\nvar COMPILER_KEY = '$$angularCompiler';\n\nvar INJECTOR_KEY = '$$angularInjector';\nvar LAZY_MODULE_REF = '$$angularLazyModuleRef';\nvar NG_ZONE_KEY = '$$angularNgZone';\nvar REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nvar REQUIRE_NG_MODEL = '?ngModel';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nvar PropertyBinding = /** @class */ (function () {\n    function PropertyBinding(prop, attr) {\n        this.prop = prop;\n        this.attr = attr;\n        this.parseBinding();\n    }\n    /**\n     * @return {?}\n     */\n    PropertyBinding.prototype.parseBinding = /**\n     * @return {?}\n     */\n    function () {\n        this.bracketAttr = \"[\" + this.attr + \"]\";\n        this.parenAttr = \"(\" + this.attr + \")\";\n        this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n        var /** @type {?} */ capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n        this.onAttr = \"on\" + capitalAttr;\n        this.bindAttr = \"bind\" + capitalAttr;\n        this.bindonAttr = \"bindon\" + capitalAttr;\n    };\n    return PropertyBinding;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\nvar DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n/**\n * @param {?} e\n * @return {?}\n */\nfunction onError(e) {\n    // TODO: (misko): We seem to not have a stack trace here!\n    if (console.error) {\n        console.error(e, e.stack);\n    }\n    else {\n        // tslint:disable-next-line:no-console\n        console.log(e, e.stack);\n    }\n    throw e;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction controllerKey(name) {\n    return '$' + name + 'Controller';\n}\n/**\n * @param {?} name\n * @return {?}\n */\nfunction directiveNormalize(name) {\n    return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n        .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n}\n/**\n * @param {?} node\n * @return {?}\n */\n\n/**\n * @param {?} component\n * @return {?}\n */\nfunction getComponentName(component) {\n    // Return the name of the component or the first line of its stringified version.\n    return (/** @type {?} */ (component)).overriddenName || component.name || component.toString().split('\\n')[0];\n}\n/**\n * @param {?} value\n * @return {?}\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n/**\n * @template R\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this.promise = new Promise(function (res, rej) {\n            _this.resolve = res;\n            _this.reject = rej;\n        });\n    }\n    return Deferred;\n}());\n/**\n * @record\n */\n\n/**\n * @param {?} component\n * @return {?} Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component) {\n    return typeof component.writeValue === 'function' &&\n        typeof component.registerOnChange === 'function';\n}\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n * @param {?} ngModel\n * @param {?} component\n * @return {?}\n */\nfunction hookupNgModel(ngModel, component) {\n    if (ngModel && supportsNgModel(component)) {\n        ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n        component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n        if (typeof component.registerOnTouched === 'function') {\n            component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n        }\n    }\n}\n/**\n * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n * @param {?} val1\n * @param {?} val2\n * @return {?}\n */\nfunction strictEquals(val1, val2) {\n    return val1 === val2 || (val1 !== val1 && val2 !== val2);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar INITIAL_VALUE = {\n    __UNINITIALIZED__: true\n};\nvar DowngradeComponentAdapter = /** @class */ (function () {\n    function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n        this.element = element;\n        this.attrs = attrs;\n        this.scope = scope;\n        this.ngModel = ngModel;\n        this.parentInjector = parentInjector;\n        this.$injector = $injector;\n        this.$compile = $compile;\n        this.$parse = $parse;\n        this.componentFactory = componentFactory;\n        this.wrapCallback = wrapCallback;\n        this.implementsOnChanges = false;\n        this.inputChangeCount = 0;\n        this.inputChanges = {};\n        this.componentScope = scope.$new();\n    }\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.compileContents = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ compiledProjectableNodes = [];\n        var /** @type {?} */ projectableNodes = this.groupProjectableNodes();\n        var /** @type {?} */ linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); }); /** @type {?} */\n        ((this.element.empty))();\n        linkFns.forEach(function (linkFn) {\n            linkFn(_this.scope, function (clone) {\n                compiledProjectableNodes.push(clone); /** @type {?} */\n                ((_this.element.append))(clone);\n            });\n        });\n        return compiledProjectableNodes;\n    };\n    /**\n     * @param {?} projectableNodes\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.createComponent = /**\n     * @param {?} projectableNodes\n     * @return {?}\n     */\n    function (projectableNodes) {\n        var /** @type {?} */ providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n        var /** @type {?} */ childInjector = _angular_core.Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n        this.componentRef =\n            this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n        this.viewChangeDetector = this.componentRef.injector.get(_angular_core.ChangeDetectorRef);\n        this.changeDetector = this.componentRef.changeDetectorRef;\n        this.component = this.componentRef.instance;\n        // testability hook is commonly added during component bootstrap in\n        // packages/core/src/application_ref.bootstrap()\n        // in downgraded application, component creation will take place here as well as adding the\n        // testability hook.\n        var /** @type {?} */ testability = this.componentRef.injector.get(_angular_core.Testability, null);\n        if (testability) {\n            this.componentRef.injector.get(_angular_core.TestabilityRegistry)\n                .registerApplication(this.componentRef.location.nativeElement, testability);\n        }\n        hookupNgModel(this.ngModel, this.component);\n    };\n    /**\n     * @param {?} needsNgZone\n     * @param {?=} propagateDigest\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.setupInputs = /**\n     * @param {?} needsNgZone\n     * @param {?=} propagateDigest\n     * @return {?}\n     */\n    function (needsNgZone, propagateDigest) {\n        var _this = this;\n        if (propagateDigest === void 0) { propagateDigest = true; }\n        var /** @type {?} */ attrs = this.attrs;\n        var /** @type {?} */ inputs = this.componentFactory.inputs || [];\n        var _loop_1 = function (i) {\n            var /** @type {?} */ input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n            var /** @type {?} */ expr = null;\n            if (attrs.hasOwnProperty(input.attr)) {\n                var /** @type {?} */ observeFn_1 = (function (prop) {\n                    var /** @type {?} */ prevValue = INITIAL_VALUE;\n                    return function (currValue) {\n                        // Initially, both `$observe()` and `$watch()` will call this function.\n                        if (!strictEquals(prevValue, currValue)) {\n                            if (prevValue === INITIAL_VALUE) {\n                                prevValue = currValue;\n                            }\n                            _this.updateInput(prop, prevValue, currValue);\n                            prevValue = currValue;\n                        }\n                    };\n                })(input.prop);\n                attrs.$observe(input.attr, observeFn_1);\n                // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                var /** @type {?} */ unwatch_1 = this_1.componentScope.$watch(function () {\n                    /** @type {?} */ ((unwatch_1))();\n                    unwatch_1 = null;\n                    observeFn_1(attrs[input.attr]);\n                });\n            }\n            else if (attrs.hasOwnProperty(input.bindAttr)) {\n                expr = attrs[input.bindAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                expr = attrs[input.bracketAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                expr = attrs[input.bindonAttr];\n            }\n            else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                expr = attrs[input.bracketParenAttr];\n            }\n            if (expr != null) {\n                var /** @type {?} */ watchFn = (function (prop) {\n                    return function (currValue, prevValue) {\n                        return _this.updateInput(prop, prevValue, currValue);\n                    };\n                })(input.prop);\n                this_1.componentScope.$watch(expr, watchFn);\n            }\n        };\n        var this_1 = this;\n        for (var /** @type {?} */ i = 0; i < inputs.length; i++) {\n            _loop_1(i);\n        }\n        // Invoke `ngOnChanges()` and Change Detection (when necessary)\n        var /** @type {?} */ detectChanges = function () { return _this.changeDetector.detectChanges(); };\n        var /** @type {?} */ prototype = this.componentFactory.componentType.prototype;\n        this.implementsOnChanges = !!(prototype && (/** @type {?} */ (prototype)).ngOnChanges);\n        this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n            // Invoke `ngOnChanges()`\n            if (_this.implementsOnChanges) {\n                var /** @type {?} */ inputChanges = _this.inputChanges;\n                _this.inputChanges = {};\n                (/** @type {?} */ (_this.component)).ngOnChanges(/** @type {?} */ ((inputChanges)));\n            }\n            _this.viewChangeDetector.markForCheck();\n            // If opted out of propagating digests, invoke change detection when inputs change.\n            if (!propagateDigest) {\n                detectChanges();\n            }\n        }));\n        // If not opted out of propagating digests, invoke change detection on every digest\n        if (propagateDigest) {\n            this.componentScope.$watch(this.wrapCallback(detectChanges));\n        }\n        // If necessary, attach the view so that it will be dirty-checked.\n        // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n        if (needsNgZone || !propagateDigest) {\n            var /** @type {?} */ unwatch_2 = this.componentScope.$watch(function () {\n                /** @type {?} */ ((unwatch_2))();\n                unwatch_2 = null;\n                var /** @type {?} */ appRef = _this.parentInjector.get(_angular_core.ApplicationRef);\n                appRef.attachView(_this.componentRef.hostView);\n            });\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.setupOutputs = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ attrs = this.attrs;\n        var /** @type {?} */ outputs = this.componentFactory.outputs || [];\n        for (var /** @type {?} */ j = 0; j < outputs.length; j++) {\n            var /** @type {?} */ output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n            var /** @type {?} */ bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n            var /** @type {?} */ bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n            // order below is important - first update bindings then evaluate expressions\n            if (attrs.hasOwnProperty(bindonAttr)) {\n                this.subscribeToOutput(output, attrs[bindonAttr], true);\n            }\n            if (attrs.hasOwnProperty(bracketParenAttr)) {\n                this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n            }\n            if (attrs.hasOwnProperty(output.onAttr)) {\n                this.subscribeToOutput(output, attrs[output.onAttr]);\n            }\n            if (attrs.hasOwnProperty(output.parenAttr)) {\n                this.subscribeToOutput(output, attrs[output.parenAttr]);\n            }\n        }\n    };\n    /**\n     * @param {?} output\n     * @param {?} expr\n     * @param {?=} isAssignment\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.subscribeToOutput = /**\n     * @param {?} output\n     * @param {?} expr\n     * @param {?=} isAssignment\n     * @return {?}\n     */\n    function (output, expr, isAssignment) {\n        var _this = this;\n        if (isAssignment === void 0) { isAssignment = false; }\n        var /** @type {?} */ getter = this.$parse(expr);\n        var /** @type {?} */ setter = getter.assign;\n        if (isAssignment && !setter) {\n            throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n        }\n        var /** @type {?} */ emitter = /** @type {?} */ (this.component[output.prop]);\n        if (emitter) {\n            emitter.subscribe({\n                next: isAssignment ? function (v) { return ((setter))(_this.scope, v); } :\n                    function (v) { return getter(_this.scope, { '$event': v }); }\n            });\n        }\n        else {\n            throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this.componentFactory.componentType) + \"'!\");\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.registerCleanup = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n        var /** @type {?} */ destroyed = false; /** @type {?} */\n        ((this.element.on))('$destroy', function () { return _this.componentScope.$destroy(); });\n        this.componentScope.$on('$destroy', function () {\n            if (!destroyed) {\n                destroyed = true;\n                _this.componentRef.injector.get(_angular_core.TestabilityRegistry)\n                    .unregisterApplication(_this.componentRef.location.nativeElement);\n                destroyComponentRef();\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.getInjector = /**\n     * @return {?}\n     */\n    function () { return this.componentRef.injector; };\n    /**\n     * @param {?} prop\n     * @param {?} prevValue\n     * @param {?} currValue\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.updateInput = /**\n     * @param {?} prop\n     * @param {?} prevValue\n     * @param {?} currValue\n     * @return {?}\n     */\n    function (prop, prevValue, currValue) {\n        if (this.implementsOnChanges) {\n            this.inputChanges[prop] = new _angular_core.SimpleChange(prevValue, currValue, prevValue === currValue);\n        }\n        this.inputChangeCount++;\n        this.component[prop] = currValue;\n    };\n    /**\n     * @return {?}\n     */\n    DowngradeComponentAdapter.prototype.groupProjectableNodes = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ ngContentSelectors = this.componentFactory.ngContentSelectors;\n        return groupNodesBySelector(ngContentSelectors, /** @type {?} */ ((this.element.contents))());\n    };\n    return DowngradeComponentAdapter;\n}());\n/**\n * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n * @param {?} ngContentSelectors\n * @param {?} nodes\n * @return {?}\n */\nfunction groupNodesBySelector(ngContentSelectors, nodes) {\n    var /** @type {?} */ projectableNodes = [];\n    var /** @type {?} */ wildcardNgContentIndex;\n    for (var /** @type {?} */ i = 0, /** @type {?} */ ii = ngContentSelectors.length; i < ii; ++i) {\n        projectableNodes[i] = [];\n    }\n    for (var /** @type {?} */ j = 0, /** @type {?} */ jj = nodes.length; j < jj; ++j) {\n        var /** @type {?} */ node = nodes[j];\n        var /** @type {?} */ ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n        if (ngContentIndex != null) {\n            projectableNodes[ngContentIndex].push(node);\n        }\n    }\n    return projectableNodes;\n}\n/**\n * @param {?} element\n * @param {?} ngContentSelectors\n * @return {?}\n */\nfunction findMatchingNgContentIndex(element, ngContentSelectors) {\n    var /** @type {?} */ ngContentIndices = [];\n    var /** @type {?} */ wildcardNgContentIndex = -1;\n    for (var /** @type {?} */ i = 0; i < ngContentSelectors.length; i++) {\n        var /** @type {?} */ selector = ngContentSelectors[i];\n        if (selector === '*') {\n            wildcardNgContentIndex = i;\n        }\n        else {\n            if (matchesSelector(element, selector)) {\n                ngContentIndices.push(i);\n            }\n        }\n    }\n    ngContentIndices.sort();\n    if (wildcardNgContentIndex !== -1) {\n        ngContentIndices.push(wildcardNgContentIndex);\n    }\n    return ngContentIndices.length ? ngContentIndices[0] : null;\n}\nvar _matches;\n/**\n * @param {?} el\n * @param {?} selector\n * @return {?}\n */\nfunction matchesSelector(el, selector) {\n    if (!_matches) {\n        var /** @type {?} */ elProto = /** @type {?} */ (Element.prototype);\n        _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n            elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n    }\n    return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows an Angular component to be used from AngularJS.\n *\n * \\@howToUse\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * \\@description\n *\n * A helper function that returns a factory function to be used for registering an\n * AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * The parameter contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n *\n * \\@experimental\n * @param {?} info\n * @return {?}\n */\nfunction downgradeComponent(info) {\n    var /** @type {?} */ directiveFactory = function ($compile, $injector, $parse) {\n        // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n        // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n        // (except if explicitly escaped, in which case we shouldn't force it back in).\n        // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n        // Angular zone.\n        var /** @type {?} */ needsNgZone = false;\n        var /** @type {?} */ wrapCallback = function (cb) { return cb; };\n        var /** @type {?} */ ngZone;\n        return {\n            restrict: 'E',\n            terminal: true,\n            require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n            link: function (scope, element, attrs, required) {\n                // We might have to compile the contents asynchronously, because this might have been\n                // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                // been compiled.\n                var /** @type {?} */ ngModel = required[1];\n                var /** @type {?} */ parentInjector = required[0];\n                var /** @type {?} */ ranAsync = false;\n                if (!parentInjector) {\n                    var /** @type {?} */ lazyModuleRef = /** @type {?} */ ($injector.get(LAZY_MODULE_REF));\n                    needsNgZone = lazyModuleRef.needsNgZone;\n                    parentInjector = lazyModuleRef.injector || /** @type {?} */ (lazyModuleRef.promise);\n                }\n                var /** @type {?} */ doDowngrade = function (injector) {\n                    var /** @type {?} */ componentFactoryResolver = injector.get(_angular_core.ComponentFactoryResolver);\n                    var /** @type {?} */ componentFactory = /** @type {?} */ ((componentFactoryResolver.resolveComponentFactory(info.component)));\n                    if (!componentFactory) {\n                        throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                    }\n                    var /** @type {?} */ injectorPromise = new ParentInjectorPromise$1(element);\n                    var /** @type {?} */ facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                    var /** @type {?} */ projectableNodes = facade.compileContents();\n                    facade.createComponent(projectableNodes);\n                    facade.setupInputs(needsNgZone, info.propagateDigest);\n                    facade.setupOutputs();\n                    facade.registerCleanup();\n                    injectorPromise.resolve(facade.getInjector());\n                    if (ranAsync) {\n                        // If this is run async, it is possible that it is not run inside a\n                        // digest and initial input values will not be detected.\n                        scope.$evalAsync(function () { });\n                    }\n                };\n                var /** @type {?} */ downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                    if (!ngZone) {\n                        ngZone = injector.get(_angular_core.NgZone);\n                        wrapCallback = function (cb) {\n                            return function () {\n                                return _angular_core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                            };\n                        };\n                    }\n                    wrapCallback(function () { return doDowngrade(injector); })();\n                };\n                if (isThenable(parentInjector)) {\n                    parentInjector.then(downgradeFn);\n                }\n                else {\n                    downgradeFn(parentInjector);\n                }\n                ranAsync = true;\n            }\n        };\n    };\n    // bracket-notation because of closure - see #14441\n    directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n    return directiveFactory;\n}\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nvar ParentInjectorPromise$1 = /** @class */ (function () {\n    function ParentInjectorPromise(element) {\n        this.element = element;\n        this.injectorKey = controllerKey(INJECTOR_KEY);\n        this.callbacks = [];\n        /** @type {?} */ ((\n        // Store the promise on the element.\n        element.data))(this.injectorKey, this);\n    }\n    /**\n     * @param {?} callback\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.then = /**\n     * @param {?} callback\n     * @return {?}\n     */\n    function (callback) {\n        if (this.injector) {\n            callback(this.injector);\n        }\n        else {\n            this.callbacks.push(callback);\n        }\n    };\n    /**\n     * @param {?} injector\n     * @return {?}\n     */\n    ParentInjectorPromise.prototype.resolve = /**\n     * @param {?} injector\n     * @return {?}\n     */\n    function (injector) {\n        this.injector = injector; /** @type {?} */\n        ((\n        // Store the real injector on the element.\n        this.element.data))(this.injectorKey, injector);\n        // Release the element to prevent memory leaks.\n        this.element = /** @type {?} */ ((null));\n        // Run the queued callbacks.\n        this.callbacks.forEach(function (callback) { return callback(injector); });\n        this.callbacks.length = 0;\n    };\n    return ParentInjectorPromise;\n}());\n/**\n * @template T\n * @param {?} obj\n * @return {?}\n */\nfunction isThenable(obj) {\n    return isFunction((/** @type {?} */ (obj)).then);\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * \\@whatItDoes\n *\n * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allow an Angular service to be accessible from AngularJS.\n *\n * \\@howToUse\n *\n * First ensure that the service to be downgraded is provided in an {\\@link NgModule}\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {\\@example upgrade/static/ts/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app {\\@link NgModule}\n *\n * {\\@example upgrade/static/ts/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {\\@example upgrade/static/ts/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {\\@example upgrade/static/ts/module.ts region=\"example-app\"}\n *\n * \\@description\n *\n * Takes a `token` that identifies a service provided from Angular.\n *\n * Returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n * The factory function provides access to the Angular service that\n * is identified by the `token` parameter.\n *\n * \\@experimental\n * @param {?} token\n * @return {?}\n */\nfunction downgradeInjectable(token) {\n    var /** @type {?} */ factory = function (i) { return i.get(token); };\n    (/** @type {?} */ (factory))['$inject'] = [INJECTOR_KEY];\n    return factory;\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Constants\nvar REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n/**\n * @record\n */\n\n/**\n * @record\n */\n\nvar UpgradeHelper = /** @class */ (function () {\n    function UpgradeHelper(injector, name, elementRef, directive) {\n        this.injector = injector;\n        this.name = name;\n        this.$injector = injector.get($INJECTOR);\n        this.$compile = this.$injector.get($COMPILE);\n        this.$controller = this.$injector.get($CONTROLLER);\n        this.element = elementRef.nativeElement;\n        this.$element = element(this.element);\n        this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n    }\n    /**\n     * @param {?} $injector\n     * @param {?} name\n     * @return {?}\n     */\n    UpgradeHelper.getDirective = /**\n     * @param {?} $injector\n     * @param {?} name\n     * @return {?}\n     */\n    function ($injector, name) {\n        var /** @type {?} */ directives = $injector.get(name + 'Directive');\n        if (directives.length > 1) {\n            throw new Error(\"Only support single directive definition for: \" + name);\n        }\n        var /** @type {?} */ directive = directives[0];\n        // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n        // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n        if (directive.compile && !directive.link)\n            notSupported(name, 'compile');\n        if (directive.replace)\n            notSupported(name, 'replace');\n        if (directive.terminal)\n            notSupported(name, 'terminal');\n        return directive;\n    };\n    /**\n     * @param {?} $injector\n     * @param {?} directive\n     * @param {?=} fetchRemoteTemplate\n     * @return {?}\n     */\n    UpgradeHelper.getTemplate = /**\n     * @param {?} $injector\n     * @param {?} directive\n     * @param {?=} fetchRemoteTemplate\n     * @return {?}\n     */\n    function ($injector, directive, fetchRemoteTemplate) {\n        if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n        if (directive.template !== undefined) {\n            return getOrCall(directive.template);\n        }\n        else if (directive.templateUrl) {\n            var /** @type {?} */ $templateCache_1 = /** @type {?} */ ($injector.get($TEMPLATE_CACHE));\n            var /** @type {?} */ url_1 = getOrCall(directive.templateUrl);\n            var /** @type {?} */ template = $templateCache_1.get(url_1);\n            if (template !== undefined) {\n                return template;\n            }\n            else if (!fetchRemoteTemplate) {\n                throw new Error('loading directive templates asynchronously is not supported');\n            }\n            return new Promise(function (resolve, reject) {\n                var /** @type {?} */ $httpBackend = /** @type {?} */ ($injector.get($HTTP_BACKEND));\n                $httpBackend('GET', url_1, null, function (status, response) {\n                    if (status === 200) {\n                        resolve($templateCache_1.put(url_1, response));\n                    }\n                    else {\n                        reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                    }\n                });\n            });\n        }\n        else {\n            throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n        }\n    };\n    /**\n     * @param {?} controllerType\n     * @param {?} $scope\n     * @return {?}\n     */\n    UpgradeHelper.prototype.buildController = /**\n     * @param {?} controllerType\n     * @param {?} $scope\n     * @return {?}\n     */\n    function (controllerType, $scope) {\n        // TODO: Document that we do not pre-assign bindings on the controller instance.\n        // Quoted properties below so that this code can be optimized with Closure Compiler.\n        var /** @type {?} */ locals = { '$scope': $scope, '$element': this.$element };\n        var /** @type {?} */ controller = this.$controller(controllerType, locals, null, this.directive.controllerAs); /** @type {?} */\n        ((this.$element.data))(controllerKey(/** @type {?} */ ((this.directive.name))), controller);\n        return controller;\n    };\n    /**\n     * @param {?=} template\n     * @return {?}\n     */\n    UpgradeHelper.prototype.compileTemplate = /**\n     * @param {?=} template\n     * @return {?}\n     */\n    function (template) {\n        if (template === undefined) {\n            template = /** @type {?} */ (UpgradeHelper.getTemplate(this.$injector, this.directive));\n        }\n        return this.compileHtml(template);\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.prepareTransclusion = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ transclude = this.directive.transclude;\n        var /** @type {?} */ contentChildNodes = this.extractChildNodes();\n        var /** @type {?} */ attachChildrenFn = function (scope, cloneAttachFn) {\n            // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n            // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n            // there will be no transclusion scope here.\n            // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n            scope = scope || { $destroy: function () { return undefined; } };\n            return /** @type {?} */ ((cloneAttachFn))($template, scope);\n        };\n        var /** @type {?} */ $template = contentChildNodes;\n        if (transclude) {\n            var /** @type {?} */ slots_1 = Object.create(null);\n            if (typeof transclude === 'object') {\n                $template = [];\n                var /** @type {?} */ slotMap_1 = Object.create(null);\n                var /** @type {?} */ filledSlots_1 = Object.create(null);\n                // Parse the element selectors.\n                Object.keys(transclude).forEach(function (slotName) {\n                    var /** @type {?} */ selector = transclude[slotName];\n                    var /** @type {?} */ optional = selector.charAt(0) === '?';\n                    selector = optional ? selector.substring(1) : selector;\n                    slotMap_1[selector] = slotName;\n                    slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                    filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                });\n                // Add the matching elements into their slot.\n                contentChildNodes.forEach(function (node) {\n                    var /** @type {?} */ slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                    if (slotName) {\n                        filledSlots_1[slotName] = true;\n                        slots_1[slotName] = slots_1[slotName] || [];\n                        slots_1[slotName].push(node);\n                    }\n                    else {\n                        $template.push(node);\n                    }\n                });\n                // Check for required slots that were not filled.\n                Object.keys(filledSlots_1).forEach(function (slotName) {\n                    if (!filledSlots_1[slotName]) {\n                        throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                    }\n                });\n                Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                    var /** @type {?} */ nodes = slots_1[slotName];\n                    slots_1[slotName] = function (scope, cloneAttach) { return ((cloneAttach))(nodes, scope); };\n                });\n            }\n            // Attach `$$slots` to default slot transclude fn.\n            attachChildrenFn.$$slots = slots_1;\n            // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n            // removes all text content after the first interpolation and updates it later, after\n            // evaluating the expressions. This would result in AngularJS failing to recognize text\n            // nodes that start with an interpolation as transcluded content and use the fallback\n            // content instead.\n            // To avoid this issue, we add a\n            // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n            // to empty text nodes (which can only be a result of Angular removing their initial content).\n            // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n            //       will still fail to be detected by AngularJS v1.6+\n            $template.forEach(function (node) {\n                if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                    node.nodeValue = '\\u200C';\n                }\n            });\n        }\n        return attachChildrenFn;\n    };\n    /**\n     * @param {?} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.resolveAndBindRequiredControllers = /**\n     * @param {?} controllerInstance\n     * @return {?}\n     */\n    function (controllerInstance) {\n        var /** @type {?} */ directiveRequire = this.getDirectiveRequire();\n        var /** @type {?} */ requiredControllers = this.resolveRequire(directiveRequire);\n        if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n            var /** @type {?} */ requiredControllersMap_1 = /** @type {?} */ (requiredControllers);\n            Object.keys(requiredControllersMap_1).forEach(function (key) {\n                controllerInstance[key] = requiredControllersMap_1[key];\n            });\n        }\n        return requiredControllers;\n    };\n    /**\n     * @param {?} html\n     * @return {?}\n     */\n    UpgradeHelper.prototype.compileHtml = /**\n     * @param {?} html\n     * @return {?}\n     */\n    function (html) {\n        this.element.innerHTML = html;\n        return this.$compile(this.element.childNodes);\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.extractChildNodes = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ childNodes = [];\n        var /** @type {?} */ childNode;\n        while (childNode = this.element.firstChild) {\n            this.element.removeChild(childNode);\n            childNodes.push(childNode);\n        }\n        return childNodes;\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeHelper.prototype.getDirectiveRequire = /**\n     * @return {?}\n     */\n    function () {\n        var /** @type {?} */ require = this.directive.require || /** @type {?} */ (((this.directive.controller && this.directive.name)));\n        if (isMap(require)) {\n            Object.keys(require).forEach(function (key) {\n                var /** @type {?} */ value = require[key];\n                var /** @type {?} */ match = /** @type {?} */ ((value.match(REQUIRE_PREFIX_RE)));\n                var /** @type {?} */ name = value.substring(match[0].length);\n                if (!name) {\n                    require[key] = match[0] + key;\n                }\n            });\n        }\n        return require;\n    };\n    /**\n     * @param {?} require\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    UpgradeHelper.prototype.resolveRequire = /**\n     * @param {?} require\n     * @param {?=} controllerInstance\n     * @return {?}\n     */\n    function (require, controllerInstance) {\n        var _this = this;\n        if (!require) {\n            return null;\n        }\n        else if (Array.isArray(require)) {\n            return require.map(function (req) { return _this.resolveRequire(req); });\n        }\n        else if (typeof require === 'object') {\n            var /** @type {?} */ value_1 = {};\n            Object.keys(require).forEach(function (key) { return value_1[key] = /** @type {?} */ ((_this.resolveRequire(require[key]))); });\n            return value_1;\n        }\n        else if (typeof require === 'string') {\n            var /** @type {?} */ match = /** @type {?} */ ((require.match(REQUIRE_PREFIX_RE)));\n            var /** @type {?} */ inheritType = match[1] || match[3];\n            var /** @type {?} */ name_1 = require.substring(match[0].length);\n            var /** @type {?} */ isOptional = !!match[2];\n            var /** @type {?} */ searchParents = !!inheritType;\n            var /** @type {?} */ startOnParent = inheritType === '^^';\n            var /** @type {?} */ ctrlKey = controllerKey(name_1);\n            var /** @type {?} */ elem = startOnParent ? /** @type {?} */ ((this.$element.parent))() : this.$element;\n            var /** @type {?} */ value = searchParents ? /** @type {?} */ ((elem.inheritedData))(ctrlKey) : /** @type {?} */ ((elem.data))(ctrlKey);\n            if (!value && !isOptional) {\n                throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n            }\n            return value;\n        }\n        else {\n            throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n        }\n    };\n    return UpgradeHelper;\n}());\n/**\n * @template T\n * @param {?} property\n * @return {?}\n */\nfunction getOrCall(property) {\n    return isFunction(property) ? property() : property;\n}\n/**\n * @template T\n * @param {?} value\n * @return {?}\n */\nfunction isMap(value) {\n    return value && !Array.isArray(value) && typeof value === 'object';\n}\n/**\n * @param {?} name\n * @param {?} feature\n * @return {?}\n */\nfunction notSupported(name, feature) {\n    throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CAMEL_CASE = /([A-Z])/g;\nvar INITIAL_VALUE$1 = {\n    __UNINITIALIZED__: true\n};\nvar NOT_SUPPORTED = 'NOT_SUPPORTED';\nvar UpgradeNg1ComponentAdapterBuilder = /** @class */ (function () {\n    function UpgradeNg1ComponentAdapterBuilder(name) {\n        this.name = name;\n        this.inputs = [];\n        this.inputsRename = [];\n        this.outputs = [];\n        this.outputsRename = [];\n        this.propertyOutputs = [];\n        this.checkProperties = [];\n        this.propertyMap = {};\n        this.directive = null;\n        var /** @type {?} */ selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });\n        var /** @type {?} */ self = this;\n        // Note: There is a bug in TS 2.4 that prevents us from\n        // inlining this into @Directive\n        // TODO(tbosch): find or file a bug against TypeScript for this.\n        var /** @type {?} */ directive = { selector: selector, inputs: this.inputsRename, outputs: this.outputsRename };\n        var MyClass = /** @class */ (function () {\n            function MyClass(scope, injector, elementRef) {\n                var /** @type {?} */ helper = new UpgradeHelper(injector, name, elementRef, this.directive);\n                return /** @type {?} */ (new UpgradeNg1ComponentAdapter(helper, scope, self.template, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap));\n            }\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnInit = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnChanges = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngDoCheck = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            /**\n             * @return {?}\n             */\n            MyClass.prototype.ngOnDestroy = /**\n             * @return {?}\n             */\n            function () {\n                /* needs to be here for ng2 to properly detect it */\n            };\n            MyClass.decorators = [\n                { type: _angular_core.Directive, args: [directive,] },\n            ];\n            /** @nocollapse */\n            MyClass.ctorParameters = function () { return [\n                { type: undefined, decorators: [{ type: _angular_core.Inject, args: [$SCOPE,] },] },\n                { type: _angular_core.Injector, },\n                { type: _angular_core.ElementRef, },\n            ]; };\n            return MyClass;\n        }());\n        this.type = MyClass;\n    }\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ btcIsObject = typeof /** @type {?} */ ((this.directive)).bindToController === 'object';\n        if (btcIsObject && Object.keys(/** @type {?} */ ((/** @type {?} */ ((this.directive)).scope))).length) {\n            throw new Error(\"Binding definitions on scope and controller at the same time are not supported.\");\n        }\n        var /** @type {?} */ context = (btcIsObject) ? /** @type {?} */ ((this.directive)).bindToController : /** @type {?} */ ((this.directive)).scope;\n        if (typeof context == 'object') {\n            Object.keys(context).forEach(function (propName) {\n                var /** @type {?} */ definition = context[propName];\n                var /** @type {?} */ bindingType = definition.charAt(0);\n                var /** @type {?} */ bindingOptions = definition.charAt(1);\n                var /** @type {?} */ attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n                // QUESTION: What about `=*`? Ignore? Throw? Support?\n                var /** @type {?} */ inputName = \"input_\" + attrName;\n                var /** @type {?} */ inputNameRename = inputName + \": \" + attrName;\n                var /** @type {?} */ outputName = \"output_\" + attrName;\n                var /** @type {?} */ outputNameRename = outputName + \": \" + attrName;\n                var /** @type {?} */ outputNameRenameChange = outputNameRename + \"Change\";\n                switch (bindingType) {\n                    case '@':\n                    case '<':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        break;\n                    case '=':\n                        _this.inputs.push(inputName);\n                        _this.inputsRename.push(inputNameRename);\n                        _this.propertyMap[inputName] = propName;\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRenameChange);\n                        _this.propertyMap[outputName] = propName;\n                        _this.checkProperties.push(propName);\n                        _this.propertyOutputs.push(outputName);\n                        break;\n                    case '&':\n                        _this.outputs.push(outputName);\n                        _this.outputsRename.push(outputNameRename);\n                        _this.propertyMap[outputName] = propName;\n                        break;\n                    default:\n                        var /** @type {?} */ json = JSON.stringify(context);\n                        throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                }\n            });\n        }\n    };\n    /**\n     * Upgrade ng1 components into Angular.\n     */\n    /**\n     * Upgrade ng1 components into Angular.\n     * @param {?} exportedComponents\n     * @param {?} $injector\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapterBuilder.resolve = /**\n     * Upgrade ng1 components into Angular.\n     * @param {?} exportedComponents\n     * @param {?} $injector\n     * @return {?}\n     */\n    function (exportedComponents, $injector) {\n        var /** @type {?} */ promises = Object.keys(exportedComponents).map(function (name) {\n            var /** @type {?} */ exportedComponent = exportedComponents[name];\n            exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n            exportedComponent.extractBindings();\n            return Promise\n                .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n                .then(function (template) { return exportedComponent.template = template; });\n        });\n        return Promise.all(promises);\n    };\n    return UpgradeNg1ComponentAdapterBuilder;\n}());\nvar UpgradeNg1ComponentAdapter = /** @class */ (function () {\n    function UpgradeNg1ComponentAdapter(helper, scope, template, inputs, outputs, propOuts, checkProperties, propertyMap) {\n        this.helper = helper;\n        this.template = template;\n        this.inputs = inputs;\n        this.outputs = outputs;\n        this.propOuts = propOuts;\n        this.checkProperties = checkProperties;\n        this.propertyMap = propertyMap;\n        this.controllerInstance = null;\n        this.destinationObj = null;\n        this.checkLastValues = [];\n        this.$element = null;\n        this.directive = helper.directive;\n        this.element = helper.element;\n        this.$element = helper.$element;\n        this.componentScope = scope.$new(!!this.directive.scope);\n        var /** @type {?} */ controllerType = this.directive.controller;\n        if (this.directive.bindToController && controllerType) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n            this.destinationObj = this.controllerInstance;\n        }\n        else {\n            this.destinationObj = this.componentScope;\n        }\n        for (var /** @type {?} */ i = 0; i < inputs.length; i++) {\n            (/** @type {?} */ (this))[inputs[i]] = null;\n        }\n        for (var /** @type {?} */ j = 0; j < outputs.length; j++) {\n            var /** @type {?} */ emitter = (/** @type {?} */ (this))[outputs[j]] = new _angular_core.EventEmitter();\n            if (this.propOuts.indexOf(outputs[j]) === -1) {\n                this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.emit(value); }; })(emitter));\n            }\n        }\n        for (var /** @type {?} */ k = 0; k < propOuts.length; k++) {\n            this.checkLastValues.push(INITIAL_VALUE$1);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnInit = /**\n     * @return {?}\n     */\n    function () {\n        // Collect contents, insert and compile template\n        var /** @type {?} */ attachChildNodes = this.helper.prepareTransclusion();\n        var /** @type {?} */ linkFn = this.helper.compileTemplate(this.template);\n        // Instantiate controller (if not already done so)\n        var /** @type {?} */ controllerType = this.directive.controller;\n        var /** @type {?} */ bindToController = this.directive.bindToController;\n        if (controllerType && !bindToController) {\n            this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n        }\n        // Require other controllers\n        var /** @type {?} */ requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n        // Hook: $onInit\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n            this.controllerInstance.$onInit();\n        }\n        // Linking\n        var /** @type {?} */ link = this.directive.link;\n        var /** @type {?} */ preLink = (typeof link == 'object') && (/** @type {?} */ (link)).pre;\n        var /** @type {?} */ postLink = (typeof link == 'object') ? (/** @type {?} */ (link)).post : link;\n        var /** @type {?} */ attrs = NOT_SUPPORTED;\n        var /** @type {?} */ transcludeFn = NOT_SUPPORTED;\n        if (preLink) {\n            preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        linkFn(this.componentScope, /** @type {?} */ ((null)), { parentBoundTranscludeFn: attachChildNodes });\n        if (postLink) {\n            postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n        }\n        // Hook: $postLink\n        if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n            this.controllerInstance.$postLink();\n        }\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnChanges = /**\n     * @param {?} changes\n     * @return {?}\n     */\n    function (changes) {\n        var _this = this;\n        var /** @type {?} */ ng1Changes = {};\n        Object.keys(changes).forEach(function (name) {\n            var /** @type {?} */ change = changes[name];\n            _this.setComponentProperty(name, change.currentValue);\n            ng1Changes[_this.propertyMap[name]] = change;\n        });\n        if (isFunction(/** @type {?} */ ((this.destinationObj)).$onChanges)) {\n            /** @type {?} */ ((/** @type {?} */ ((this.destinationObj)).$onChanges))(ng1Changes);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngDoCheck = /**\n     * @return {?}\n     */\n    function () {\n        var _this = this;\n        var /** @type {?} */ destinationObj = this.destinationObj;\n        var /** @type {?} */ lastValues = this.checkLastValues;\n        var /** @type {?} */ checkProperties = this.checkProperties;\n        var /** @type {?} */ propOuts = this.propOuts;\n        checkProperties.forEach(function (propName, i) {\n            var /** @type {?} */ value = /** @type {?} */ ((destinationObj))[propName];\n            var /** @type {?} */ last = lastValues[i];\n            if (!strictEquals(last, value)) {\n                var /** @type {?} */ eventEmitter = (/** @type {?} */ (_this))[propOuts[i]];\n                eventEmitter.emit(lastValues[i] = value);\n            }\n        });\n        if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n            this.controllerInstance.$doCheck();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n    function () {\n        if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n            this.controllerInstance.$onDestroy();\n        }\n        this.componentScope.$destroy();\n    };\n    /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    UpgradeNg1ComponentAdapter.prototype.setComponentProperty = /**\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    function (name, value) {\n        /** @type {?} */ ((this.destinationObj))[this.propertyMap[name]] = value;\n    };\n    return UpgradeNg1ComponentAdapter;\n}());\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar upgradeCount = 0;\n/**\n * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n *\n * The `UpgradeAdapter` allows:\n * 1. creation of Angular component from AngularJS component directive\n *    (See [UpgradeAdapter#upgradeNg1Component()])\n * 2. creation of AngularJS directive from Angular component.\n *    (See [UpgradeAdapter#downgradeNg2Component()])\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application.\n *\n * ## Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n *    Angular directive, which bootstraps the AngularJS component directive in that location.\n * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n *    an AngularJS directive, which bootstraps the Angular component in that location.\n * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n *    doing the instantiation. The other framework then instantiates and owns the view for that\n *    component. This implies that component bindings will always follow the semantics of the\n *    instantiation framework. The syntax is always that of Angular syntax.\n * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n *    `$apply()`.\n *\n * ### Example\n *\n * ```\n * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n * const module = angular.module('myExample', []);\n * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n *\n * module.directive('ng1Hello', function() {\n *   return {\n *      scope: { title: '=' },\n *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n *   };\n * });\n *\n *\n * \\@Component({\n *   selector: 'ng2-comp',\n *   inputs: ['name'],\n *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n *   directives:\n * })\n * class Ng2Component {\n * }\n *\n * \\@NgModule({\n *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n *   imports: [BrowserModule]\n * })\n * class MyNg2Module {}\n *\n *\n * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n *\n * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n *   expect(document.body.textContent).toEqual(\n *       \"ng2[ng1[Hello World!](transclude)](project)\");\n * });\n *\n * ```\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nvar UpgradeAdapter = /** @class */ (function () {\n    function UpgradeAdapter(ng2AppModule, compilerOptions) {\n        this.ng2AppModule = ng2AppModule;\n        this.compilerOptions = compilerOptions;\n        this.idPrefix = \"NG2_UPGRADE_\" + upgradeCount++ + \"_\";\n        this.downgradedComponents = [];\n        /**\n         * An internal map of ng1 components which need to up upgraded to ng2.\n         *\n         * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n         * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n         *\n         * \\@internal\n         */\n        this.ng1ComponentsToBeUpgraded = {};\n        this.upgradedProviders = [];\n        this.moduleRef = null;\n        if (!ng2AppModule) {\n            throw new Error('UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n        }\n    }\n    /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from @angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * @Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     *   @Input() salutation: string;\n     *   @Input() name: string;\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     */\n    /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from \\@angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * \\@Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     *   \\@Input() salutation: string;\n     *   \\@Input() name: string;\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} component\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.downgradeNg2Component = /**\n     * Allows Angular Component to be used from AngularJS.\n     *\n     * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n     * Angular Component. The adapter will bootstrap Angular component from within the\n     * AngularJS template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in AngularJS template. This means that the\n     *    host element is controlled by AngularJS, but the component's view will be controlled by\n     *    Angular.\n     * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n     *    syntax. This has to be done, this way because we must follow Angular components do not\n     *    declare how the attributes should be interpreted.\n     * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n     *    by way of the `ControlValueAccessor` interface from \\@angular/forms. Only components that\n     *    implement this interface are eligible.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     *   - ng-model: `<comp ng-model=\"name\">`\n     * - Content projection: yes\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n     *\n     * \\@Component({\n     *   selector: 'greet',\n     *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n     * })\n     * class Greeter {\n     *   \\@Input() salutation: string;\n     *   \\@Input() name: string;\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Greeter],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML =\n     *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} component\n     * @return {?}\n     */\n    function (component) {\n        this.downgradedComponents.push(component);\n        return downgradeComponent({ component: component });\n    };\n    /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * @Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     */\n    /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} name\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.upgradeNg1Component = /**\n     * Allows AngularJS Component to be used from Angular.\n     *\n     * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n     * directive. The adapter will bootstrap AngularJS component from within the Angular\n     * template.\n     *\n     * ## Mental Model\n     *\n     * 1. The component is instantiated by being listed in Angular template. This means that the\n     *    host element is controlled by Angular, but the component's view will be controlled by\n     *    AngularJS.\n     *\n     * ## Supported Features\n     *\n     * - Bindings:\n     *   - Attribute: `<comp name=\"World\">`\n     *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n     *   - Expression:  `<comp [name]=\"username\">`\n     *   - Event:  `<comp (close)=\"doSomething()\">`\n     * - Transclusion: yes\n     * - Only some of the features of\n     *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n     *   supported:\n     *   - `compile`: not supported because the host element is owned by Angular, which does\n     *     not allow modifying DOM structure during compilation.\n     *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n     *   - `controllerAs`: supported.\n     *   - `bindToController`: supported.\n     *   - `link`: supported. (NOTE: only pre-link function is supported.)\n     *   - `name`: supported.\n     *   - `priority`: ignored.\n     *   - `replace`: not supported.\n     *   - `require`: supported.\n     *   - `restrict`: must be set to 'E'.\n     *   - `scope`: supported.\n     *   - `template`: supported.\n     *   - `templateUrl`: supported.\n     *   - `terminal`: ignored.\n     *   - `transclude`: supported.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n     * const module = angular.module('myExample', []);\n     *\n     * module.directive('greet', function() {\n     *   return {\n     *     scope: {salutation: '=', name: '=' },\n     *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n     *   };\n     * });\n     *\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2></ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n     * });\n     * ```\n     * @param {?} name\n     * @return {?}\n     */\n    function (name) {\n        if ((/** @type {?} */ (this.ng1ComponentsToBeUpgraded)).hasOwnProperty(name)) {\n            return this.ng1ComponentsToBeUpgraded[name].type;\n        }\n        else {\n            return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n                .type;\n        }\n    };\n    /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param modules any AngularJS modules that the upgrade module should depend upon\n     * @returns an {@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param {?=} modules any AngularJS modules that the upgrade module should depend upon\n     * @return {?} an {\\@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    UpgradeAdapter.prototype.registerForNg1Tests = /**\n     * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n     * Use this instead of `angular.mock.module()` to load the upgrade module into\n     * the AngularJS testing injector.\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * // configure the adapter with upgrade/downgrade components and services\n     * upgradeAdapter.downgradeNg2Component(MyComponent);\n     *\n     * let upgradeAdapterRef: UpgradeAdapterRef;\n     * let $compile, $rootScope;\n     *\n     * // We must register the adapter before any calls to `inject()`\n     * beforeEach(() => {\n     *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n     * });\n     *\n     * beforeEach(inject((_$compile_, _$rootScope_) => {\n     *   $compile = _$compile_;\n     *   $rootScope = _$rootScope_;\n     * }));\n     *\n     * it(\"says hello\", (done) => {\n     *   upgradeAdapterRef.ready(() => {\n     *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n     *     $rootScope.$apply();\n     *     expect(element.html()).toContain(\"Hello World\");\n     *     done();\n     *   })\n     * });\n     *\n     * ```\n     *\n     * @param {?=} modules any AngularJS modules that the upgrade module should depend upon\n     * @return {?} an {\\@link UpgradeAdapterRef}, which lets you register a `ready()` callback to\n     * run assertions once the Angular components are ready to test through AngularJS.\n     */\n    function (modules) {\n        var _this = this;\n        var /** @type {?} */ windowNgMock = (/** @type {?} */ (window))['angular'].mock;\n        if (!windowNgMock || !windowNgMock.module) {\n            throw new Error('Failed to find \\'angular.mock.module\\'.');\n        }\n        this.declareNg1Module(modules);\n        windowNgMock.module(this.ng1Module.name);\n        var /** @type {?} */ upgrade = new UpgradeAdapterRef();\n        this.ng2BootstrapDeferred.promise.then(function (ng1Injector) { (/** @type {?} */ (upgrade))._bootstrapDone(_this.moduleRef, ng1Injector); }, onError);\n        return upgrade;\n    };\n    /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * @Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     */\n    /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     * @param {?} element\n     * @param {?=} modules\n     * @param {?=} config\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.bootstrap = /**\n     * Bootstrap a hybrid AngularJS / Angular application.\n     *\n     * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n     * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n     * AngularJS, this bootstrap is asynchronous.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n     *\n     * module.directive('ng1', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * \\@Component({\n     *   selector: 'ng2',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n     * })\n     * class Ng2 {\n     * }\n     *\n     * \\@NgModule({\n     *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     * ```\n     * @param {?} element\n     * @param {?=} modules\n     * @param {?=} config\n     * @return {?}\n     */\n    function (element$$1, modules, config) {\n        var _this = this;\n        this.declareNg1Module(modules);\n        var /** @type {?} */ upgrade = new UpgradeAdapterRef();\n        // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n        var /** @type {?} */ windowAngular = (/** @type {?} */ (window /** TODO #???? */) /** TODO #???? */)['angular'];\n        windowAngular.resumeBootstrap = undefined;\n        this.ngZone.run(function () { bootstrap(element$$1, [_this.ng1Module.name], /** @type {?} */ ((config))); });\n        var /** @type {?} */ ng1BootstrapPromise = new Promise(function (resolve) {\n            if (windowAngular.resumeBootstrap) {\n                var /** @type {?} */ originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                windowAngular.resumeBootstrap = function () {\n                    windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                    var /** @type {?} */ r = windowAngular.resumeBootstrap.apply(this, arguments);\n                    resolve();\n                    return r;\n                };\n            }\n            else {\n                resolve();\n            }\n        });\n        Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(function (_a) {\n            var ng1Injector = _a[0];\n            /** @type {?} */ ((element(element$$1).data))(controllerKey(INJECTOR_KEY), /** @type {?} */ ((_this.moduleRef)).injector); /** @type {?} */\n            ((_this.moduleRef)).injector.get(_angular_core.NgZone).run(function () { (/** @type {?} */ (upgrade))._bootstrapDone(_this.moduleRef, ng1Injector); });\n        }, onError);\n        return upgrade;\n    };\n    /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * @Injectable()\n     * class Example {\n     *   constructor(@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     */\n    /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * \\@Injectable()\n     * class Example {\n     *   constructor(\\@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     * @param {?} name\n     * @param {?=} options\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.upgradeNg1Provider = /**\n     * Allows AngularJS service to be accessible from Angular.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Login { ... }\n     * class Server { ... }\n     *\n     * \\@Injectable()\n     * class Example {\n     *   constructor(\\@Inject('server') server, login: Login) {\n     *     ...\n     *   }\n     * }\n     *\n     * const module = angular.module('myExample', []);\n     * module.service('server', Server);\n     * module.service('login', Login);\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     * adapter.upgradeNg1Provider('server');\n     * adapter.upgradeNg1Provider('login', {asToken: Login});\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng2Injector.get(Example);\n     * });\n     *\n     * ```\n     * @param {?} name\n     * @param {?=} options\n     * @return {?}\n     */\n    function (name, options) {\n        var /** @type {?} */ token = options && options.asToken || name;\n        this.upgradedProviders.push({\n            provide: token,\n            useFactory: function ($injector) { return $injector.get(name); },\n            deps: [$INJECTOR]\n        });\n    };\n    /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     */\n    /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     * @param {?} token\n     * @return {?}\n     */\n    UpgradeAdapter.prototype.downgradeNg2Provider = /**\n     * Allows Angular service to be accessible from AngularJS.\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * class Example {\n     * }\n     *\n     * const adapter = new UpgradeAdapter(MyNg2Module);\n     *\n     * const module = angular.module('myExample', []);\n     * module.factory('example', adapter.downgradeNg2Provider(Example));\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n     *   const example: Example = ref.ng1Injector.get('example');\n     * });\n     *\n     * ```\n     * @param {?} token\n     * @return {?}\n     */\n    function (token) { return downgradeInjectable(token); };\n    /**\n     * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n     * hybrid application.\n     *\n     * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n     *\n     * @param {?=} modules The AngularJS modules that this upgrade module should depend upon.\n     * @return {?} The AngularJS upgrade module that is declared by this method\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     * upgradeAdapter.declareNg1Module(['heroApp']);\n     * ```\n     */\n    UpgradeAdapter.prototype.declareNg1Module = /**\n     * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n     * hybrid application.\n     *\n     * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n     *\n     * @param {?=} modules The AngularJS modules that this upgrade module should depend upon.\n     * @return {?} The AngularJS upgrade module that is declared by this method\n     *\n     * ### Example\n     *\n     * ```\n     * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n     * upgradeAdapter.declareNg1Module(['heroApp']);\n     * ```\n     */\n    function (modules) {\n        var _this = this;\n        if (modules === void 0) { modules = []; }\n        var /** @type {?} */ delayApplyExps = [];\n        var /** @type {?} */ original$applyFn;\n        var /** @type {?} */ rootScopePrototype;\n        var /** @type {?} */ rootScope;\n        var /** @type {?} */ upgradeAdapter = this;\n        var /** @type {?} */ ng1Module = this.ng1Module = module$1(this.idPrefix, modules);\n        var /** @type {?} */ platformRef = _angular_platformBrowserDynamic.platformBrowserDynamic();\n        this.ngZone = new _angular_core.NgZone({ enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec') });\n        this.ng2BootstrapDeferred = new Deferred();\n        ng1Module.factory(INJECTOR_KEY, function () { return ((_this.moduleRef)).injector.get(_angular_core.Injector); })\n            .factory(LAZY_MODULE_REF, [\n            INJECTOR_KEY,\n            function (injector) { return (/** @type {?} */ ({ injector: injector, needsNgZone: false })); }\n        ])\n            .constant(NG_ZONE_KEY, this.ngZone)\n            .factory(COMPILER_KEY, function () { return ((_this.moduleRef)).injector.get(_angular_core.Compiler); })\n            .config([\n            '$provide', '$injector',\n            function (provide, ng1Injector) {\n                provide.decorator($ROOT_SCOPE, [\n                    '$delegate',\n                    function (rootScopeDelegate) {\n                        // Capture the root apply so that we can delay first call to $apply until we\n                        // bootstrap Angular and then we replay and restore the $apply.\n                        rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                        if (rootScopePrototype.hasOwnProperty('$apply')) {\n                            original$applyFn = rootScopePrototype.$apply;\n                            rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };\n                        }\n                        else {\n                            throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                        }\n                        return rootScope = rootScopeDelegate;\n                    }\n                ]);\n                if (ng1Injector.has($$TESTABILITY)) {\n                    provide.decorator($$TESTABILITY, [\n                        '$delegate',\n                        function (testabilityDelegate) {\n                            var /** @type {?} */ originalWhenStable = testabilityDelegate.whenStable;\n                            // Cannot use arrow function below because we need the context\n                            var /** @type {?} */ newWhenStable = function (callback) {\n                                originalWhenStable.call(this, function () {\n                                    var /** @type {?} */ ng2Testability = /** @type {?} */ ((upgradeAdapter.moduleRef)).injector.get(_angular_core.Testability);\n                                    if (ng2Testability.isStable()) {\n                                        callback.apply(this, arguments);\n                                    }\n                                    else {\n                                        ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                                    }\n                                });\n                            };\n                            testabilityDelegate.whenStable = newWhenStable;\n                            return testabilityDelegate;\n                        }\n                    ]);\n                }\n            }\n        ]);\n        ng1Module.run([\n            '$injector', '$rootScope',\n            function (ng1Injector, rootScope) {\n                UpgradeNg1ComponentAdapterBuilder.resolve(_this.ng1ComponentsToBeUpgraded, ng1Injector)\n                    .then(function () {\n                    // Note: There is a bug in TS 2.4 that prevents us from\n                    // inlining this into @NgModule\n                    // TODO(tbosch): find or file a bug against TypeScript for this.\n                    var /** @type {?} */ ngModule = {\n                        providers: [\n                            { provide: $INJECTOR, useFactory: function () { return ng1Injector; } },\n                            { provide: $COMPILE, useFactory: function () { return ng1Injector.get($COMPILE); } },\n                            _this.upgradedProviders\n                        ],\n                        imports: [_this.ng2AppModule],\n                        entryComponents: _this.downgradedComponents\n                    };\n                    var DynamicNgUpgradeModule = /** @class */ (function () {\n                        function DynamicNgUpgradeModule() {\n                        }\n                        /**\n                         * @return {?}\n                         */\n                        DynamicNgUpgradeModule.prototype.ngDoBootstrap = /**\n                         * @return {?}\n                         */\n                        function () { };\n                        DynamicNgUpgradeModule.decorators = [\n                            { type: _angular_core.NgModule, args: [ngModule,] },\n                        ];\n                        /** @nocollapse */\n                        DynamicNgUpgradeModule.ctorParameters = function () { return []; };\n                        return DynamicNgUpgradeModule;\n                    }());\n                    platformRef\n                        .bootstrapModule(DynamicNgUpgradeModule, [/** @type {?} */ ((_this.compilerOptions)), { ngZone: _this.ngZone }])\n                        .then(function (ref) {\n                        _this.moduleRef = ref;\n                        _this.ngZone.run(function () {\n                            if (rootScopePrototype) {\n                                rootScopePrototype.$apply = original$applyFn; // restore original $apply\n                                while (delayApplyExps.length) {\n                                    rootScope.$apply(delayApplyExps.shift());\n                                }\n                                rootScopePrototype = null;\n                            }\n                        });\n                    })\n                        .then(function () { return _this.ng2BootstrapDeferred.resolve(ng1Injector); }, onError)\n                        .then(function () {\n                        var /** @type {?} */ subscription = _this.ngZone.onMicrotaskEmpty.subscribe({ next: function () { return rootScope.$digest(); } });\n                        rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                    });\n                })\n                    .catch(function (e) { return _this.ng2BootstrapDeferred.reject(e); });\n            }\n        ]);\n        return ng1Module;\n    };\n    return UpgradeAdapter;\n}());\n/**\n * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n *\n * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n * [Ahead-of-Time compilation](guide/aot-compiler).\n */\nvar UpgradeAdapterRef = /** @class */ (function () {\n    function UpgradeAdapterRef() {\n        this._readyFn = null;\n        this.ng1RootScope = /** @type {?} */ ((null));\n        this.ng1Injector = /** @type {?} */ ((null));\n        this.ng2ModuleRef = /** @type {?} */ ((null));\n        this.ng2Injector = /** @type {?} */ ((null));\n    }\n    /**\n     * @param {?} ngModuleRef\n     * @param {?} ng1Injector\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype._bootstrapDone = /**\n     * @param {?} ngModuleRef\n     * @param {?} ng1Injector\n     * @return {?}\n     */\n    function (ngModuleRef, ng1Injector) {\n        this.ng2ModuleRef = ngModuleRef;\n        this.ng2Injector = ngModuleRef.injector;\n        this.ng1Injector = ng1Injector;\n        this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n        this._readyFn && this._readyFn(this);\n    };\n    /**\n     * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n     * application has been bootstrapped.\n     *\n     * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n     * require a call to `$apply()`.\n     * @param {?} fn\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype.ready = /**\n     * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n     * application has been bootstrapped.\n     *\n     * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n     * require a call to `$apply()`.\n     * @param {?} fn\n     * @return {?}\n     */\n    function (fn) { this._readyFn = fn; };\n    /**\n     * Dispose of running hybrid AngularJS / Angular application.\n     * @return {?}\n     */\n    UpgradeAdapterRef.prototype.dispose = /**\n     * Dispose of running hybrid AngularJS / Angular application.\n     * @return {?}\n     */\n    function () {\n        /** @type {?} */ ((this.ng1Injector)).get($ROOT_SCOPE).$destroy(); /** @type {?} */\n        ((this.ng2ModuleRef)).destroy();\n    };\n    return UpgradeAdapterRef;\n}());\n\nexports.VERSION = VERSION;\nexports.UpgradeAdapter = UpgradeAdapter;\nexports.UpgradeAdapterRef = UpgradeAdapterRef;\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=upgrade.umd.js.map\n"]}
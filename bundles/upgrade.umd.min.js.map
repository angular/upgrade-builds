{"version":3,"sources":["packages/upgrade/upgrade.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","upgrade","core","platformBrowserDynamic","this","VERSION","Version","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","m","Symbol","iterator","e","ar","next","done","push","value","error","noNg","Error","noNgElement","cleanData","angular","bootstrap","element","version","undefined","resumeBootstrap","getTestability","window","_a","nodes","$COMPILE","$CONTROLLER","$INJECTOR","$SCOPE","DOWNGRADED_MODULE_COUNT_KEY","INJECTOR_KEY","UPGRADE_APP_TYPE_KEY","REQUIRE_INJECTOR","PropertyBinding","prop","attr","parseBinding","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","bindAttr","bindonAttr","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","onError","console","stack","log","controllerKey","name","getTypeName","type","overriddenName","toString","split","getDowngradedModuleCount","$injector","has","get","getUpgradeAppType","isFunction","validateInjectionKey","downgradedModule","injectionKey","attemptedAction","upgradeAppType","downgradedModuleCount","Deferred","_this","promise","Promise","res","rej","resolve","reject","strictEquals","val1","val2","_matches","INITIAL_VALUE","__UNINITIALIZED__","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$compile","$parse","componentFactory","wrapCallback","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compileContents","compiledProjectableNodes","linkFns","groupProjectableNodes","map","empty","forEach","linkFn","clone","append","createComponent","projectableNodes","childInjector","Injector","create","providers","provide","useValue","parent","componentRef","viewChangeDetector","injector","ChangeDetectorRef","changeDetector","changeDetectorRef","component","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","hookupNgModel","supportsNgModel","writeValue","registerOnChange","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","setupInputs","manuallyAttachView","propagateDigest","inputs","_loop_1","prevValue","input","propName","templateName","expr","observeFn_1","currValue","updateInput","$observe","unwatch_1","this_1","$watch","watchFn","detectChanges","componentType","ngOnChanges","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","setupOutputs","outputs","j","output","substring","subscribeToOutput","isAssignment","getter","setter","emitter","subscribe","v","$event","registerCleanup","destroyComponentRef","destroy","destroyed","on","$destroy","$on","unregisterApplication","getInjector","SimpleChange","groupNodesBySelector","ngContentSelectors","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","contents","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","ParentInjectorPromise","injectorKey","callbacks","data","then","callback","isThenable","obj","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","link","notSupported","replace","terminal","getTemplate","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","$httpBackend","status","response","put","buildController","controllerType","$scope","controller","controllerAs","compileTemplate","compileHtml","onDestroy","controllerInstance","$onDestroy","querySelectorAll","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","attachChildrenFn","cloneAttachFn","$template","slots_1","slotMap_1","filledSlots_1","keys","slotName","optional","directiveNormalize","_","letter","nodeName","toLowerCase","filter","cloneAttach","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","isMap","requiredControllersMap_1","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","inheritedData","property","feature","CAMEL_CASE","INITIAL_VALUE$1","UpgradeNg1ComponentAdapterBuilder","inputsRename","outputsRename","propertyOutputs","checkProperties","propertyMap","all","MyClass","_super","__extends","__","constructor","Directive","jit","__param","paramIndex","decorator","Inject","ElementRef","UpgradeNg1ComponentAdapter","extractBindings","btcIsObject","context","definition","bindingType","bindingOptions","attrName","inputName","inputNameRename","outputName","outputNameRename","outputNameRenameChange","json","JSON","stringify","exportedComponents","promises","exportedComponent","helper","propOuts","destinationObj","checkLastValues","EventEmitter","indexOf","setComponentProperty","emit","k","ngOnInit","attachChildNodes","$onInit","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ng1Changes","change","currentValue","$onChanges","ngDoCheck","lastValues","$doCheck","ngOnDestroy","upgradeCount","UpgradeAdapter","ng2AppModule","compilerOptions","idPrefix","downgradedComponents","ng1ComponentsToBeUpgraded","upgradedProviders","moduleRef","downgradeNg2Component","downgradeComponent","info","directiveFactory","ngZone","isNgUpgradeLite","cb","NgZone","isInAngularZone","run","hasMultipleDowngradedModules","restrict","required","moduleInjector","ranAsync","lazyModuleRefKey","lazyModuleRef","finalParentInjector","finalModuleInjector","doDowngrade","ComponentFactoryResolver","resolveComponentFactory","injectorPromise","facade","$evalAsync","downgradeFn","pInjector","mInjector","_b","upgradeNg1Component","registerForNg1Tests","modules","windowNgMock","mock","declareNg1Module","ng1Module","UpgradeAdapterRef","ng2BootstrapDeferred","ng1Injector","_bootstrapDone","element$$1","config","windowAngular","ng1BootstrapPromise","originalResumeBootstrap_1","upgradeNg1Provider","options","asToken","useFactory","deps","downgradeNg2Provider","token","downgradeInjectable","injectableName","String","original$applyFn","rootScopePrototype","delayApplyExps","upgradeAdapter","platformRef","enableLongStackTrace","Zone","constant","Compiler","rootScopeDelegate","$apply","exp","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","rootScope","ngModule","imports","resolveForwardRef","entryComponents","DynamicNgUpgradeModule","ngDoBootstrap","NgModule","bootstrapModule","ref","shift","subscription","onMicrotaskEmpty","$digest","unsubscribe","catch","_readyFn","ng1RootScope","ng2ModuleRef","ng2Injector","ngModuleRef","ready","fn","dispose"],"mappings":"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","sourcesContent":["/**\n * @license Angular v7.2.4\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser-dynamic')) :\n    typeof define === 'function' && define.amd ? define('@angular/upgrade', ['exports', '@angular/core', '@angular/platform-browser-dynamic'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.upgrade = {}), global.ng.core, global.ng.platformBrowserDynamic));\n}(this, function (exports, core, platformBrowserDynamic) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @publicApi\n     */\n    var VERSION = new core.Version('7.2.4');\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noNg() {\n        throw new Error('AngularJS v1.x is not loaded!');\n    }\n    var ɵ0 = function () { return noNg(); };\n    var noNgElement = (ɵ0);\n    noNgElement.cleanData = noNg;\n    var angular = {\n        bootstrap: noNg,\n        module: noNg,\n        element: noNgElement,\n        version: undefined,\n        resumeBootstrap: noNg,\n        getTestability: noNg\n    };\n    try {\n        if (window.hasOwnProperty('angular')) {\n            angular = window.angular;\n        }\n    }\n    catch (_a) {\n        // ignore in CJS mode.\n    }\n    var bootstrap = function (e, modules, config) {\n        return angular.bootstrap(e, modules, config);\n    };\n    var module$1 = function (prefix, dependencies) {\n        return angular.module(prefix, dependencies);\n    };\n    var element = (function (e) { return angular.element(e); });\n    element.cleanData = function (nodes) { return angular.element.cleanData(nodes); };\n    var version = angular.version;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var $COMPILE = '$compile';\n    var $CONTROLLER = '$controller';\n    var $HTTP_BACKEND = '$httpBackend';\n    var $INJECTOR = '$injector';\n    var $PARSE = '$parse';\n    var $ROOT_SCOPE = '$rootScope';\n    var $SCOPE = '$scope';\n    var $TEMPLATE_CACHE = '$templateCache';\n    var $$TESTABILITY = '$$testability';\n    var COMPILER_KEY = '$$angularCompiler';\n    var DOWNGRADED_MODULE_COUNT_KEY = '$$angularDowngradedModuleCount';\n    var INJECTOR_KEY = '$$angularInjector';\n    var LAZY_MODULE_REF = '$$angularLazyModuleRef';\n    var NG_ZONE_KEY = '$$angularNgZone';\n    var UPGRADE_APP_TYPE_KEY = '$$angularUpgradeAppType';\n    var REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\n    var REQUIRE_NG_MODEL = '?ngModel';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A `PropertyBinding` represents a mapping between a property name\n     * and an attribute name. It is parsed from a string of the form\n     * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n     * and attribute have the same identifier.\n     */\n    var PropertyBinding = /** @class */ (function () {\n        function PropertyBinding(prop, attr) {\n            this.prop = prop;\n            this.attr = attr;\n            this.parseBinding();\n        }\n        PropertyBinding.prototype.parseBinding = function () {\n            this.bracketAttr = \"[\" + this.attr + \"]\";\n            this.parenAttr = \"(\" + this.attr + \")\";\n            this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n            var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n            this.onAttr = \"on\" + capitalAttr;\n            this.bindAttr = \"bind\" + capitalAttr;\n            this.bindonAttr = \"bindon\" + capitalAttr;\n        };\n        return PropertyBinding;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\n    var DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n    function onError(e) {\n        // TODO: (misko): We seem to not have a stack trace here!\n        if (console.error) {\n            console.error(e, e.stack);\n        }\n        else {\n            // tslint:disable-next-line:no-console\n            console.log(e, e.stack);\n        }\n        throw e;\n    }\n    function controllerKey(name) {\n        return '$' + name + 'Controller';\n    }\n    function directiveNormalize(name) {\n        return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n            .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n    }\n    function getTypeName(type) {\n        // Return the name of the type or the first line of its stringified version.\n        return type.overriddenName || type.name || type.toString().split('\\n')[0];\n    }\n    function getDowngradedModuleCount($injector) {\n        return $injector.has(DOWNGRADED_MODULE_COUNT_KEY) ? $injector.get(DOWNGRADED_MODULE_COUNT_KEY) :\n            0;\n    }\n    function getUpgradeAppType($injector) {\n        return $injector.has(UPGRADE_APP_TYPE_KEY) ? $injector.get(UPGRADE_APP_TYPE_KEY) :\n            0 /* None */;\n    }\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n    function validateInjectionKey($injector, downgradedModule, injectionKey, attemptedAction) {\n        var upgradeAppType = getUpgradeAppType($injector);\n        var downgradedModuleCount = getDowngradedModuleCount($injector);\n        // Check for common errors.\n        switch (upgradeAppType) {\n            case 1 /* Dynamic */:\n            case 2 /* Static */:\n                if (downgradedModule) {\n                    throw new Error(\"Error while \" + attemptedAction + \": 'downgradedModule' unexpectedly specified.\\n\" +\n                        'You should not specify a value for \\'downgradedModule\\', unless you are downgrading ' +\n                        'more than one Angular module (via \\'downgradeModule()\\').');\n                }\n                break;\n            case 3 /* Lite */:\n                if (!downgradedModule && (downgradedModuleCount >= 2)) {\n                    throw new Error(\"Error while \" + attemptedAction + \": 'downgradedModule' not specified.\\n\" +\n                        'This application contains more than one downgraded Angular module, thus you need to ' +\n                        'always specify \\'downgradedModule\\' when downgrading components and injectables.');\n                }\n                if (!$injector.has(injectionKey)) {\n                    throw new Error(\"Error while \" + attemptedAction + \": Unable to find the specified downgraded module.\\n\" +\n                        'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n                        'application?');\n                }\n                break;\n            default:\n                throw new Error(\"Error while \" + attemptedAction + \": Not a valid '@angular/upgrade' application.\\n\" +\n                    'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n                    'application?');\n        }\n    }\n    var Deferred = /** @class */ (function () {\n        function Deferred() {\n            var _this = this;\n            this.promise = new Promise(function (res, rej) {\n                _this.resolve = res;\n                _this.reject = rej;\n            });\n        }\n        return Deferred;\n    }());\n    /**\n     * @return Whether the passed-in component implements the subset of the\n     *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n     *     compatibility.\n     */\n    function supportsNgModel(component) {\n        return typeof component.writeValue === 'function' &&\n            typeof component.registerOnChange === 'function';\n    }\n    /**\n     * Glue the AngularJS `NgModelController` (if it exists) to the component\n     * (if it implements the needed subset of the `ControlValueAccessor` interface).\n     */\n    function hookupNgModel(ngModel, component) {\n        if (ngModel && supportsNgModel(component)) {\n            ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n            component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n            if (typeof component.registerOnTouched === 'function') {\n                component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n            }\n        }\n    }\n    /**\n     * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n     */\n    function strictEquals(val1, val2) {\n        return val1 === val2 || (val1 !== val1 && val2 !== val2);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var INITIAL_VALUE = {\n        __UNINITIALIZED__: true\n    };\n    var DowngradeComponentAdapter = /** @class */ (function () {\n        function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n            this.element = element;\n            this.attrs = attrs;\n            this.scope = scope;\n            this.ngModel = ngModel;\n            this.parentInjector = parentInjector;\n            this.$injector = $injector;\n            this.$compile = $compile;\n            this.$parse = $parse;\n            this.componentFactory = componentFactory;\n            this.wrapCallback = wrapCallback;\n            this.implementsOnChanges = false;\n            this.inputChangeCount = 0;\n            this.inputChanges = {};\n            this.componentScope = scope.$new();\n        }\n        DowngradeComponentAdapter.prototype.compileContents = function () {\n            var _this = this;\n            var compiledProjectableNodes = [];\n            var projectableNodes = this.groupProjectableNodes();\n            var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n            this.element.empty();\n            linkFns.forEach(function (linkFn) {\n                linkFn(_this.scope, function (clone) {\n                    compiledProjectableNodes.push(clone);\n                    _this.element.append(clone);\n                });\n            });\n            return compiledProjectableNodes;\n        };\n        DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n            var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n            var childInjector = core.Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n            this.componentRef =\n                this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n            this.viewChangeDetector = this.componentRef.injector.get(core.ChangeDetectorRef);\n            this.changeDetector = this.componentRef.changeDetectorRef;\n            this.component = this.componentRef.instance;\n            // testability hook is commonly added during component bootstrap in\n            // packages/core/src/application_ref.bootstrap()\n            // in downgraded application, component creation will take place here as well as adding the\n            // testability hook.\n            var testability = this.componentRef.injector.get(core.Testability, null);\n            if (testability) {\n                this.componentRef.injector.get(core.TestabilityRegistry)\n                    .registerApplication(this.componentRef.location.nativeElement, testability);\n            }\n            hookupNgModel(this.ngModel, this.component);\n        };\n        DowngradeComponentAdapter.prototype.setupInputs = function (manuallyAttachView, propagateDigest) {\n            var _this = this;\n            if (propagateDigest === void 0) { propagateDigest = true; }\n            var attrs = this.attrs;\n            var inputs = this.componentFactory.inputs || [];\n            var _loop_1 = function (i) {\n                var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n                var expr = null;\n                if (attrs.hasOwnProperty(input.attr)) {\n                    var observeFn_1 = (function (prop) {\n                        var prevValue = INITIAL_VALUE;\n                        return function (currValue) {\n                            // Initially, both `$observe()` and `$watch()` will call this function.\n                            if (!strictEquals(prevValue, currValue)) {\n                                if (prevValue === INITIAL_VALUE) {\n                                    prevValue = currValue;\n                                }\n                                _this.updateInput(prop, prevValue, currValue);\n                                prevValue = currValue;\n                            }\n                        };\n                    })(input.prop);\n                    attrs.$observe(input.attr, observeFn_1);\n                    // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                    // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                    // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                    var unwatch_1 = this_1.componentScope.$watch(function () {\n                        unwatch_1();\n                        unwatch_1 = null;\n                        observeFn_1(attrs[input.attr]);\n                    });\n                }\n                else if (attrs.hasOwnProperty(input.bindAttr)) {\n                    expr = attrs[input.bindAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                    expr = attrs[input.bracketAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                    expr = attrs[input.bindonAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                    expr = attrs[input.bracketParenAttr];\n                }\n                if (expr != null) {\n                    var watchFn = (function (prop) { return function (currValue, prevValue) {\n                        return _this.updateInput(prop, prevValue, currValue);\n                    }; })(input.prop);\n                    this_1.componentScope.$watch(expr, watchFn);\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < inputs.length; i++) {\n                _loop_1(i);\n            }\n            // Invoke `ngOnChanges()` and Change Detection (when necessary)\n            var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n            var prototype = this.componentFactory.componentType.prototype;\n            this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n            this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n                // Invoke `ngOnChanges()`\n                if (_this.implementsOnChanges) {\n                    var inputChanges = _this.inputChanges;\n                    _this.inputChanges = {};\n                    _this.component.ngOnChanges(inputChanges);\n                }\n                _this.viewChangeDetector.markForCheck();\n                // If opted out of propagating digests, invoke change detection when inputs change.\n                if (!propagateDigest) {\n                    detectChanges();\n                }\n            }));\n            // If not opted out of propagating digests, invoke change detection on every digest\n            if (propagateDigest) {\n                this.componentScope.$watch(this.wrapCallback(detectChanges));\n            }\n            // If necessary, attach the view so that it will be dirty-checked.\n            // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n            if (manuallyAttachView || !propagateDigest) {\n                var unwatch_2 = this.componentScope.$watch(function () {\n                    unwatch_2();\n                    unwatch_2 = null;\n                    var appRef = _this.parentInjector.get(core.ApplicationRef);\n                    appRef.attachView(_this.componentRef.hostView);\n                });\n            }\n        };\n        DowngradeComponentAdapter.prototype.setupOutputs = function () {\n            var attrs = this.attrs;\n            var outputs = this.componentFactory.outputs || [];\n            for (var j = 0; j < outputs.length; j++) {\n                var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n                var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n                var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n                // order below is important - first update bindings then evaluate expressions\n                if (attrs.hasOwnProperty(bindonAttr)) {\n                    this.subscribeToOutput(output, attrs[bindonAttr], true);\n                }\n                if (attrs.hasOwnProperty(bracketParenAttr)) {\n                    this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n                }\n                if (attrs.hasOwnProperty(output.onAttr)) {\n                    this.subscribeToOutput(output, attrs[output.onAttr]);\n                }\n                if (attrs.hasOwnProperty(output.parenAttr)) {\n                    this.subscribeToOutput(output, attrs[output.parenAttr]);\n                }\n            }\n        };\n        DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {\n            var _this = this;\n            if (isAssignment === void 0) { isAssignment = false; }\n            var getter = this.$parse(expr);\n            var setter = getter.assign;\n            if (isAssignment && !setter) {\n                throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n            }\n            var emitter = this.component[output.prop];\n            if (emitter) {\n                emitter.subscribe({\n                    next: isAssignment ? function (v) { return setter(_this.scope, v); } :\n                        function (v) { return getter(_this.scope, { '$event': v }); }\n                });\n            }\n            else {\n                throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getTypeName(this.componentFactory.componentType) + \"'!\");\n            }\n        };\n        DowngradeComponentAdapter.prototype.registerCleanup = function () {\n            var _this = this;\n            var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n            var destroyed = false;\n            this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });\n            this.componentScope.$on('$destroy', function () {\n                if (!destroyed) {\n                    destroyed = true;\n                    _this.componentRef.injector.get(core.TestabilityRegistry)\n                        .unregisterApplication(_this.componentRef.location.nativeElement);\n                    destroyComponentRef();\n                }\n            });\n        };\n        DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n        DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n            if (this.implementsOnChanges) {\n                this.inputChanges[prop] = new core.SimpleChange(prevValue, currValue, prevValue === currValue);\n            }\n            this.inputChangeCount++;\n            this.component[prop] = currValue;\n        };\n        DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n            var ngContentSelectors = this.componentFactory.ngContentSelectors;\n            return groupNodesBySelector(ngContentSelectors, this.element.contents());\n        };\n        return DowngradeComponentAdapter;\n    }());\n    /**\n     * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n     */\n    function groupNodesBySelector(ngContentSelectors, nodes) {\n        var projectableNodes = [];\n        for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n            projectableNodes[i] = [];\n        }\n        for (var j = 0, jj = nodes.length; j < jj; ++j) {\n            var node = nodes[j];\n            var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n            if (ngContentIndex != null) {\n                projectableNodes[ngContentIndex].push(node);\n            }\n        }\n        return projectableNodes;\n    }\n    function findMatchingNgContentIndex(element, ngContentSelectors) {\n        var ngContentIndices = [];\n        var wildcardNgContentIndex = -1;\n        for (var i = 0; i < ngContentSelectors.length; i++) {\n            var selector = ngContentSelectors[i];\n            if (selector === '*') {\n                wildcardNgContentIndex = i;\n            }\n            else {\n                if (matchesSelector(element, selector)) {\n                    ngContentIndices.push(i);\n                }\n            }\n        }\n        ngContentIndices.sort();\n        if (wildcardNgContentIndex !== -1) {\n            ngContentIndices.push(wildcardNgContentIndex);\n        }\n        return ngContentIndices.length ? ngContentIndices[0] : null;\n    }\n    var _matches;\n    function matchesSelector(el, selector) {\n        if (!_matches) {\n            var elProto = Element.prototype;\n            _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n                elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n        }\n        return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function that allows an Angular component to be used from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function to be used for registering\n     * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n     *\n     * @usageNotes\n     * ### Examples\n     *\n     * Let's assume that you have an Angular component called `ng2Heroes` that needs\n     * to be made available in AngularJS templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n     *\n     * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n     * that will make this Angular component available inside AngularJS templates.\n     * The `downgradeComponent()` function returns a factory function that we\n     * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n     *\n     * @param info contains information about the Component that is being downgraded:\n     *\n     * - `component: Type<any>`: The type of the Component that will be downgraded\n     * - `downgradedModule?: string`: The name of the downgraded module (if any) that the component\n     *   \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose\n     *   corresponding Angular module will be bootstrapped, when the component needs to be instantiated.\n     *   <br />\n     *   (This option is only necessary when using `downgradeModule()` to downgrade more than one\n     *   Angular module.)\n     * - `propagateDigest?: boolean`: Whether to perform {@link ChangeDetectorRef#detectChanges\n     *   change detection} on the component on every\n     *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n     *   change detection will still be performed when any of the component's inputs changes.\n     *   (Default: true)\n     *\n     * @returns a factory function that can be used to register the component in an\n     * AngularJS module.\n     *\n     * @publicApi\n     */\n    function downgradeComponent(info) {\n        var directiveFactory = function ($compile, $injector, $parse) {\n            // When using `downgradeModule()`, we need to handle certain things specially. For example:\n            // - We always need to attach the component view to the `ApplicationRef` for it to be\n            //   dirty-checked.\n            // - We need to ensure callbacks to Angular APIs (e.g. change detection) are run inside the\n            //   Angular zone.\n            //   NOTE: This is not needed, when using `UpgradeModule`, because `$digest()` will be run\n            //         inside the Angular zone (except if explicitly escaped, in which case we shouldn't\n            //         force it back in).\n            var isNgUpgradeLite = getUpgradeAppType($injector) === 3 /* Lite */;\n            var wrapCallback = !isNgUpgradeLite ? function (cb) { return cb; } : function (cb) { return function () { return core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb); }; };\n            var ngZone;\n            // When downgrading multiple modules, special handling is needed wrt injectors.\n            var hasMultipleDowngradedModules = isNgUpgradeLite && (getDowngradedModuleCount($injector) > 1);\n            return {\n                restrict: 'E',\n                terminal: true,\n                require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n                link: function (scope, element, attrs, required) {\n                    // We might have to compile the contents asynchronously, because this might have been\n                    // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                    // been compiled.\n                    var ngModel = required[1];\n                    var parentInjector = required[0];\n                    var moduleInjector = undefined;\n                    var ranAsync = false;\n                    if (!parentInjector || hasMultipleDowngradedModules) {\n                        var downgradedModule = info.downgradedModule || '';\n                        var lazyModuleRefKey = \"\" + LAZY_MODULE_REF + downgradedModule;\n                        var attemptedAction = \"instantiating component '\" + getTypeName(info.component) + \"'\";\n                        validateInjectionKey($injector, downgradedModule, lazyModuleRefKey, attemptedAction);\n                        var lazyModuleRef = $injector.get(lazyModuleRefKey);\n                        moduleInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                    }\n                    // Notes:\n                    //\n                    // There are two injectors: `finalModuleInjector` and `finalParentInjector` (they might be\n                    // the same instance, but that is irrelevant):\n                    // - `finalModuleInjector` is used to retrieve `ComponentFactoryResolver`, thus it must be\n                    //   on the same tree as the `NgModule` that declares this downgraded component.\n                    // - `finalParentInjector` is used for all other injection purposes.\n                    //   (Note that Angular knows to only traverse the component-tree part of that injector,\n                    //   when looking for an injectable and then switch to the module injector.)\n                    //\n                    // There are basically three cases:\n                    // - If there is no parent component (thus no `parentInjector`), we bootstrap the downgraded\n                    //   `NgModule` and use its injector as both `finalModuleInjector` and\n                    //   `finalParentInjector`.\n                    // - If there is a parent component (and thus a `parentInjector`) and we are sure that it\n                    //   belongs to the same `NgModule` as this downgraded component (e.g. because there is only\n                    //   one downgraded module, we use that `parentInjector` as both `finalModuleInjector` and\n                    //   `finalParentInjector`.\n                    // - If there is a parent component, but it may belong to a different `NgModule`, then we\n                    //   use the `parentInjector` as `finalParentInjector` and this downgraded component's\n                    //   declaring `NgModule`'s injector as `finalModuleInjector`.\n                    //   Note 1: If the `NgModule` is already bootstrapped, we just get its injector (we don't\n                    //           bootstrap again).\n                    //   Note 2: It is possible that (while there are multiple downgraded modules) this\n                    //           downgraded component and its parent component both belong to the same NgModule.\n                    //           In that case, we could have used the `parentInjector` as both\n                    //           `finalModuleInjector` and `finalParentInjector`, but (for simplicity) we are\n                    //           treating this case as if they belong to different `NgModule`s. That doesn't\n                    //           really affect anything, since `parentInjector` has `moduleInjector` as ancestor\n                    //           and trying to resolve `ComponentFactoryResolver` from either one will return\n                    //           the same instance.\n                    // If there is a parent component, use its injector as parent injector.\n                    // If this is a \"top-level\" Angular component, use the module injector.\n                    var finalParentInjector = parentInjector || moduleInjector;\n                    // If this is a \"top-level\" Angular component or the parent component may belong to a\n                    // different `NgModule`, use the module injector for module-specific dependencies.\n                    // If there is a parent component that belongs to the same `NgModule`, use its injector.\n                    var finalModuleInjector = moduleInjector || parentInjector;\n                    var doDowngrade = function (injector, moduleInjector) {\n                        // Retrieve `ComponentFactoryResolver` from the injector tied to the `NgModule` this\n                        // component belongs to.\n                        var componentFactoryResolver = moduleInjector.get(core.ComponentFactoryResolver);\n                        var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);\n                        if (!componentFactory) {\n                            throw new Error(\"Expecting ComponentFactory for: \" + getTypeName(info.component));\n                        }\n                        var injectorPromise = new ParentInjectorPromise(element);\n                        var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                        var projectableNodes = facade.compileContents();\n                        facade.createComponent(projectableNodes);\n                        facade.setupInputs(isNgUpgradeLite, info.propagateDigest);\n                        facade.setupOutputs();\n                        facade.registerCleanup();\n                        injectorPromise.resolve(facade.getInjector());\n                        if (ranAsync) {\n                            // If this is run async, it is possible that it is not run inside a\n                            // digest and initial input values will not be detected.\n                            scope.$evalAsync(function () { });\n                        }\n                    };\n                    var downgradeFn = !isNgUpgradeLite ? doDowngrade : function (pInjector, mInjector) {\n                        if (!ngZone) {\n                            ngZone = pInjector.get(core.NgZone);\n                        }\n                        wrapCallback(function () { return doDowngrade(pInjector, mInjector); })();\n                    };\n                    if (isThenable(finalParentInjector) || isThenable(finalModuleInjector)) {\n                        Promise.all([finalParentInjector, finalModuleInjector])\n                            .then(function (_a) {\n                            var _b = __read(_a, 2), pInjector = _b[0], mInjector = _b[1];\n                            return downgradeFn(pInjector, mInjector);\n                        });\n                    }\n                    else {\n                        downgradeFn(finalParentInjector, finalModuleInjector);\n                    }\n                    ranAsync = true;\n                }\n            };\n        };\n        // bracket-notation because of closure - see #14441\n        directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n        return directiveFactory;\n    }\n    /**\n     * Synchronous promise-like object to wrap parent injectors,\n     * to preserve the synchronous nature of Angular 1's $compile.\n     */\n    var ParentInjectorPromise = /** @class */ (function () {\n        function ParentInjectorPromise(element) {\n            this.element = element;\n            this.injectorKey = controllerKey(INJECTOR_KEY);\n            this.callbacks = [];\n            // Store the promise on the element.\n            element.data(this.injectorKey, this);\n        }\n        ParentInjectorPromise.prototype.then = function (callback) {\n            if (this.injector) {\n                callback(this.injector);\n            }\n            else {\n                this.callbacks.push(callback);\n            }\n        };\n        ParentInjectorPromise.prototype.resolve = function (injector) {\n            this.injector = injector;\n            // Store the real injector on the element.\n            this.element.data(this.injectorKey, injector);\n            // Release the element to prevent memory leaks.\n            this.element = null;\n            // Run the queued callbacks.\n            this.callbacks.forEach(function (callback) { return callback(injector); });\n            this.callbacks.length = 0;\n        };\n        return ParentInjectorPromise;\n    }());\n    function isThenable(obj) {\n        return isFunction(obj.then);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function to allow an Angular service to be accessible from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function that provides access to the Angular\n     * service identified by the `token` parameter.\n     *\n     * @usageNotes\n     * ### Examples\n     *\n     * First ensure that the service to be downgraded is provided in an `NgModule`\n     * that will be part of the upgrade application. For example, let's assume we have\n     * defined `HeroesService`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n     *\n     * and that we have included this in our upgrade app `NgModule`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n     *\n     * Now we can register the `downgradeInjectable` factory function for the service\n     * on an AngularJS module.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n     *\n     * Inside an AngularJS component's controller we can get hold of the\n     * downgraded service via the name we gave when downgrading.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n     *\n     * <div class=\"alert is-important\">\n     *\n     *   When using `downgradeModule()`, downgraded injectables will not be available until the Angular\n     *   module that provides them is instantiated. In order to be safe, you need to ensure that the\n     *   downgraded injectables are not used anywhere _outside_ the part of the app where it is\n     *   guaranteed that their module has been instantiated.\n     *\n     *   For example, it is _OK_ to use a downgraded service in an upgraded component that is only used\n     *   from a downgraded Angular component provided by the same Angular module as the injectable, but\n     *   it is _not OK_ to use it in an AngularJS component that may be used independently of Angular or\n     *   use it in a downgraded Angular component from a different module.\n     *\n     * </div>\n     *\n     * @param token an `InjectionToken` that identifies a service provided from Angular.\n     * @param downgradedModule the name of the downgraded module (if any) that the injectable\n     * \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose injector will\n     * be used for instantiating the injectable.<br />\n     * (This option is only necessary when using `downgradeModule()` to downgrade more than one Angular\n     * module.)\n     *\n     * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n     * used to register the service on an AngularJS module.\n     *\n     * @publicApi\n     */\n    function downgradeInjectable(token, downgradedModule) {\n        if (downgradedModule === void 0) { downgradedModule = ''; }\n        var factory = function ($injector) {\n            var injectorKey = \"\" + INJECTOR_KEY + downgradedModule;\n            var injectableName = isFunction(token) ? getTypeName(token) : String(token);\n            var attemptedAction = \"instantiating injectable '\" + injectableName + \"'\";\n            validateInjectionKey($injector, downgradedModule, injectorKey, attemptedAction);\n            var injector = $injector.get(injectorKey);\n            return injector.get(token);\n        };\n        factory['$inject'] = [$INJECTOR];\n        return factory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Constants\n    var REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n    // Classes\n    var UpgradeHelper = /** @class */ (function () {\n        function UpgradeHelper(injector, name, elementRef, directive) {\n            this.injector = injector;\n            this.name = name;\n            this.$injector = injector.get($INJECTOR);\n            this.$compile = this.$injector.get($COMPILE);\n            this.$controller = this.$injector.get($CONTROLLER);\n            this.element = elementRef.nativeElement;\n            this.$element = element(this.element);\n            this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n        }\n        UpgradeHelper.getDirective = function ($injector, name) {\n            var directives = $injector.get(name + 'Directive');\n            if (directives.length > 1) {\n                throw new Error(\"Only support single directive definition for: \" + name);\n            }\n            var directive = directives[0];\n            // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n            // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n            if (directive.compile && !directive.link)\n                notSupported(name, 'compile');\n            if (directive.replace)\n                notSupported(name, 'replace');\n            if (directive.terminal)\n                notSupported(name, 'terminal');\n            return directive;\n        };\n        UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate) {\n            if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n            if (directive.template !== undefined) {\n                return getOrCall(directive.template);\n            }\n            else if (directive.templateUrl) {\n                var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n                var url_1 = getOrCall(directive.templateUrl);\n                var template = $templateCache_1.get(url_1);\n                if (template !== undefined) {\n                    return template;\n                }\n                else if (!fetchRemoteTemplate) {\n                    throw new Error('loading directive templates asynchronously is not supported');\n                }\n                return new Promise(function (resolve, reject) {\n                    var $httpBackend = $injector.get($HTTP_BACKEND);\n                    $httpBackend('GET', url_1, null, function (status, response) {\n                        if (status === 200) {\n                            resolve($templateCache_1.put(url_1, response));\n                        }\n                        else {\n                            reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                        }\n                    });\n                });\n            }\n            else {\n                throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n            }\n        };\n        UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n            // TODO: Document that we do not pre-assign bindings on the controller instance.\n            // Quoted properties below so that this code can be optimized with Closure Compiler.\n            var locals = { '$scope': $scope, '$element': this.$element };\n            var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n            this.$element.data(controllerKey(this.directive.name), controller);\n            return controller;\n        };\n        UpgradeHelper.prototype.compileTemplate = function (template) {\n            if (template === undefined) {\n                template = UpgradeHelper.getTemplate(this.$injector, this.directive);\n            }\n            return this.compileHtml(template);\n        };\n        UpgradeHelper.prototype.onDestroy = function ($scope, controllerInstance) {\n            if (controllerInstance && isFunction(controllerInstance.$onDestroy)) {\n                controllerInstance.$onDestroy();\n            }\n            $scope.$destroy();\n            // Clean the jQuery/jqLite data on the component+child elements.\n            // Equivelent to how jQuery/jqLite invoke `cleanData` on an Element (this.element)\n            //  https://github.com/jquery/jquery/blob/e743cbd28553267f955f71ea7248377915613fd9/src/manipulation.js#L223\n            //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/jqLite.js#L306-L312\n            // `cleanData` will invoke the AngularJS `$destroy` DOM event\n            //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/Angular.js#L1911-L1924\n            element.cleanData([this.element]);\n            element.cleanData(this.element.querySelectorAll('*'));\n        };\n        UpgradeHelper.prototype.prepareTransclusion = function () {\n            var _this = this;\n            var transclude = this.directive.transclude;\n            var contentChildNodes = this.extractChildNodes();\n            var attachChildrenFn = function (scope, cloneAttachFn) {\n                // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n                // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n                // there will be no transclusion scope here.\n                // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n                scope = scope || { $destroy: function () { return undefined; } };\n                return cloneAttachFn($template, scope);\n            };\n            var $template = contentChildNodes;\n            if (transclude) {\n                var slots_1 = Object.create(null);\n                if (typeof transclude === 'object') {\n                    $template = [];\n                    var slotMap_1 = Object.create(null);\n                    var filledSlots_1 = Object.create(null);\n                    // Parse the element selectors.\n                    Object.keys(transclude).forEach(function (slotName) {\n                        var selector = transclude[slotName];\n                        var optional = selector.charAt(0) === '?';\n                        selector = optional ? selector.substring(1) : selector;\n                        slotMap_1[selector] = slotName;\n                        slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                        filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                    });\n                    // Add the matching elements into their slot.\n                    contentChildNodes.forEach(function (node) {\n                        var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                        if (slotName) {\n                            filledSlots_1[slotName] = true;\n                            slots_1[slotName] = slots_1[slotName] || [];\n                            slots_1[slotName].push(node);\n                        }\n                        else {\n                            $template.push(node);\n                        }\n                    });\n                    // Check for required slots that were not filled.\n                    Object.keys(filledSlots_1).forEach(function (slotName) {\n                        if (!filledSlots_1[slotName]) {\n                            throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                        }\n                    });\n                    Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                        var nodes = slots_1[slotName];\n                        slots_1[slotName] = function (scope, cloneAttach) {\n                            return cloneAttach(nodes, scope);\n                        };\n                    });\n                }\n                // Attach `$$slots` to default slot transclude fn.\n                attachChildrenFn.$$slots = slots_1;\n                // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n                // removes all text content after the first interpolation and updates it later, after\n                // evaluating the expressions. This would result in AngularJS failing to recognize text\n                // nodes that start with an interpolation as transcluded content and use the fallback\n                // content instead.\n                // To avoid this issue, we add a\n                // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n                // to empty text nodes (which can only be a result of Angular removing their initial content).\n                // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n                //       will still fail to be detected by AngularJS v1.6+\n                $template.forEach(function (node) {\n                    if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                        node.nodeValue = '\\u200C';\n                    }\n                });\n            }\n            return attachChildrenFn;\n        };\n        UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n            var directiveRequire = this.getDirectiveRequire();\n            var requiredControllers = this.resolveRequire(directiveRequire);\n            if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n                var requiredControllersMap_1 = requiredControllers;\n                Object.keys(requiredControllersMap_1).forEach(function (key) {\n                    controllerInstance[key] = requiredControllersMap_1[key];\n                });\n            }\n            return requiredControllers;\n        };\n        UpgradeHelper.prototype.compileHtml = function (html) {\n            this.element.innerHTML = html;\n            return this.$compile(this.element.childNodes);\n        };\n        UpgradeHelper.prototype.extractChildNodes = function () {\n            var childNodes = [];\n            var childNode;\n            while (childNode = this.element.firstChild) {\n                this.element.removeChild(childNode);\n                childNodes.push(childNode);\n            }\n            return childNodes;\n        };\n        UpgradeHelper.prototype.getDirectiveRequire = function () {\n            var require = this.directive.require || (this.directive.controller && this.directive.name);\n            if (isMap(require)) {\n                Object.keys(require).forEach(function (key) {\n                    var value = require[key];\n                    var match = value.match(REQUIRE_PREFIX_RE);\n                    var name = value.substring(match[0].length);\n                    if (!name) {\n                        require[key] = match[0] + key;\n                    }\n                });\n            }\n            return require;\n        };\n        UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n            var _this = this;\n            if (!require) {\n                return null;\n            }\n            else if (Array.isArray(require)) {\n                return require.map(function (req) { return _this.resolveRequire(req); });\n            }\n            else if (typeof require === 'object') {\n                var value_1 = {};\n                Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(require[key]); });\n                return value_1;\n            }\n            else if (typeof require === 'string') {\n                var match = require.match(REQUIRE_PREFIX_RE);\n                var inheritType = match[1] || match[3];\n                var name_1 = require.substring(match[0].length);\n                var isOptional = !!match[2];\n                var searchParents = !!inheritType;\n                var startOnParent = inheritType === '^^';\n                var ctrlKey = controllerKey(name_1);\n                var elem = startOnParent ? this.$element.parent() : this.$element;\n                var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n                if (!value && !isOptional) {\n                    throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n                }\n                return value;\n            }\n            else {\n                throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n            }\n        };\n        return UpgradeHelper;\n    }());\n    function getOrCall(property) {\n        return isFunction(property) ? property() : property;\n    }\n    // NOTE: Only works for `typeof T !== 'object'`.\n    function isMap(value) {\n        return value && !Array.isArray(value) && typeof value === 'object';\n    }\n    function notSupported(name, feature) {\n        throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var CAMEL_CASE = /([A-Z])/g;\n    var INITIAL_VALUE$1 = {\n        __UNINITIALIZED__: true\n    };\n    var NOT_SUPPORTED = 'NOT_SUPPORTED';\n    var UpgradeNg1ComponentAdapterBuilder = /** @class */ (function () {\n        function UpgradeNg1ComponentAdapterBuilder(name) {\n            this.name = name;\n            this.inputs = [];\n            this.inputsRename = [];\n            this.outputs = [];\n            this.outputsRename = [];\n            this.propertyOutputs = [];\n            this.checkProperties = [];\n            this.propertyMap = {};\n            this.directive = null;\n            var selector = name.replace(CAMEL_CASE, function (all, next) { return '-' + next.toLowerCase(); });\n            var self = this;\n            // Note: There is a bug in TS 2.4 that prevents us from\n            // inlining this into @Directive\n            // TODO(tbosch): find or file a bug against TypeScript for this.\n            var directive = { selector: selector, inputs: this.inputsRename, outputs: this.outputsRename };\n            var MyClass = /** @class */ (function (_super) {\n                __extends(MyClass, _super);\n                function MyClass(scope, injector, elementRef) {\n                    var _this = this;\n                    _this = _super.call(this, new UpgradeHelper(injector, name, elementRef, self.directive || undefined), scope, self.template, self.inputs, self.outputs, self.propertyOutputs, self.checkProperties, self.propertyMap) || this;\n                    return _this;\n                }\n                MyClass = __decorate([\n                    core.Directive(__assign({ jit: true }, directive)),\n                    __param(0, core.Inject($SCOPE)),\n                    __metadata(\"design:paramtypes\", [Object, core.Injector, core.ElementRef])\n                ], MyClass);\n                return MyClass;\n            }(UpgradeNg1ComponentAdapter));\n            this.type = MyClass;\n        }\n        UpgradeNg1ComponentAdapterBuilder.prototype.extractBindings = function () {\n            var _this = this;\n            var btcIsObject = typeof this.directive.bindToController === 'object';\n            if (btcIsObject && Object.keys(this.directive.scope).length) {\n                throw new Error(\"Binding definitions on scope and controller at the same time are not supported.\");\n            }\n            var context = (btcIsObject) ? this.directive.bindToController : this.directive.scope;\n            if (typeof context == 'object') {\n                Object.keys(context).forEach(function (propName) {\n                    var definition = context[propName];\n                    var bindingType = definition.charAt(0);\n                    var bindingOptions = definition.charAt(1);\n                    var attrName = definition.substring(bindingOptions === '?' ? 2 : 1) || propName;\n                    // QUESTION: What about `=*`? Ignore? Throw? Support?\n                    var inputName = \"input_\" + attrName;\n                    var inputNameRename = inputName + \": \" + attrName;\n                    var outputName = \"output_\" + attrName;\n                    var outputNameRename = outputName + \": \" + attrName;\n                    var outputNameRenameChange = outputNameRename + \"Change\";\n                    switch (bindingType) {\n                        case '@':\n                        case '<':\n                            _this.inputs.push(inputName);\n                            _this.inputsRename.push(inputNameRename);\n                            _this.propertyMap[inputName] = propName;\n                            break;\n                        case '=':\n                            _this.inputs.push(inputName);\n                            _this.inputsRename.push(inputNameRename);\n                            _this.propertyMap[inputName] = propName;\n                            _this.outputs.push(outputName);\n                            _this.outputsRename.push(outputNameRenameChange);\n                            _this.propertyMap[outputName] = propName;\n                            _this.checkProperties.push(propName);\n                            _this.propertyOutputs.push(outputName);\n                            break;\n                        case '&':\n                            _this.outputs.push(outputName);\n                            _this.outputsRename.push(outputNameRename);\n                            _this.propertyMap[outputName] = propName;\n                            break;\n                        default:\n                            var json = JSON.stringify(context);\n                            throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                    }\n                });\n            }\n        };\n        /**\n         * Upgrade ng1 components into Angular.\n         */\n        UpgradeNg1ComponentAdapterBuilder.resolve = function (exportedComponents, $injector) {\n            var promises = Object.keys(exportedComponents).map(function (name) {\n                var exportedComponent = exportedComponents[name];\n                exportedComponent.directive = UpgradeHelper.getDirective($injector, name);\n                exportedComponent.extractBindings();\n                return Promise\n                    .resolve(UpgradeHelper.getTemplate($injector, exportedComponent.directive, true))\n                    .then(function (template) { return exportedComponent.template = template; });\n            });\n            return Promise.all(promises);\n        };\n        return UpgradeNg1ComponentAdapterBuilder;\n    }());\n    var UpgradeNg1ComponentAdapter = /** @class */ (function () {\n        function UpgradeNg1ComponentAdapter(helper, scope, template, inputs, outputs, propOuts, checkProperties, propertyMap) {\n            this.helper = helper;\n            this.template = template;\n            this.inputs = inputs;\n            this.outputs = outputs;\n            this.propOuts = propOuts;\n            this.checkProperties = checkProperties;\n            this.propertyMap = propertyMap;\n            this.controllerInstance = null;\n            this.destinationObj = null;\n            this.checkLastValues = [];\n            this.$element = null;\n            this.directive = helper.directive;\n            this.element = helper.element;\n            this.$element = helper.$element;\n            this.componentScope = scope.$new(!!this.directive.scope);\n            var controllerType = this.directive.controller;\n            if (this.directive.bindToController && controllerType) {\n                this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n                this.destinationObj = this.controllerInstance;\n            }\n            else {\n                this.destinationObj = this.componentScope;\n            }\n            for (var i = 0; i < inputs.length; i++) {\n                this[inputs[i]] = null;\n            }\n            for (var j = 0; j < outputs.length; j++) {\n                var emitter = this[outputs[j]] = new core.EventEmitter();\n                if (this.propOuts.indexOf(outputs[j]) === -1) {\n                    this.setComponentProperty(outputs[j], (function (emitter) { return function (value) { return emitter.emit(value); }; })(emitter));\n                }\n            }\n            for (var k = 0; k < propOuts.length; k++) {\n                this.checkLastValues.push(INITIAL_VALUE$1);\n            }\n        }\n        UpgradeNg1ComponentAdapter.prototype.ngOnInit = function () {\n            // Collect contents, insert and compile template\n            var attachChildNodes = this.helper.prepareTransclusion();\n            var linkFn = this.helper.compileTemplate(this.template);\n            // Instantiate controller (if not already done so)\n            var controllerType = this.directive.controller;\n            var bindToController = this.directive.bindToController;\n            if (controllerType && !bindToController) {\n                this.controllerInstance = this.helper.buildController(controllerType, this.componentScope);\n            }\n            // Require other controllers\n            var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n            // Hook: $onInit\n            if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n                this.controllerInstance.$onInit();\n            }\n            // Linking\n            var link = this.directive.link;\n            var preLink = (typeof link == 'object') && link.pre;\n            var postLink = (typeof link == 'object') ? link.post : link;\n            var attrs = NOT_SUPPORTED;\n            var transcludeFn = NOT_SUPPORTED;\n            if (preLink) {\n                preLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            linkFn(this.componentScope, null, { parentBoundTranscludeFn: attachChildNodes });\n            if (postLink) {\n                postLink(this.componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            // Hook: $postLink\n            if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n                this.controllerInstance.$postLink();\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngOnChanges = function (changes) {\n            var _this = this;\n            var ng1Changes = {};\n            Object.keys(changes).forEach(function (name) {\n                var change = changes[name];\n                _this.setComponentProperty(name, change.currentValue);\n                ng1Changes[_this.propertyMap[name]] = change;\n            });\n            if (isFunction(this.destinationObj.$onChanges)) {\n                this.destinationObj.$onChanges(ng1Changes);\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngDoCheck = function () {\n            var _this = this;\n            var destinationObj = this.destinationObj;\n            var lastValues = this.checkLastValues;\n            var checkProperties = this.checkProperties;\n            var propOuts = this.propOuts;\n            checkProperties.forEach(function (propName, i) {\n                var value = destinationObj[propName];\n                var last = lastValues[i];\n                if (!strictEquals(last, value)) {\n                    var eventEmitter = _this[propOuts[i]];\n                    eventEmitter.emit(lastValues[i] = value);\n                }\n            });\n            if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n                this.controllerInstance.$doCheck();\n            }\n        };\n        UpgradeNg1ComponentAdapter.prototype.ngOnDestroy = function () { this.helper.onDestroy(this.componentScope, this.controllerInstance); };\n        UpgradeNg1ComponentAdapter.prototype.setComponentProperty = function (name, value) {\n            this.destinationObj[this.propertyMap[name]] = value;\n        };\n        return UpgradeNg1ComponentAdapter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var upgradeCount = 0;\n    /**\n     * Use `UpgradeAdapter` to allow AngularJS and Angular to coexist in a single application.\n     *\n     * The `UpgradeAdapter` allows:\n     * 1. creation of Angular component from AngularJS component directive\n     *    (See [UpgradeAdapter#upgradeNg1Component()])\n     * 2. creation of AngularJS directive from Angular component.\n     *    (See [UpgradeAdapter#downgradeNg2Component()])\n     * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n     *    coexisting in a single application.\n     *\n     * @usageNotes\n     * ### Mental Model\n     *\n     * When reasoning about how a hybrid application works it is useful to have a mental model which\n     * describes what is happening and explains what is happening at the lowest level.\n     *\n     * 1. There are two independent frameworks running in a single application, each framework treats\n     *    the other as a black box.\n     * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n     *    instantiated the element is the owner. Each framework only updates/interacts with its own\n     *    DOM elements and ignores others.\n     * 3. AngularJS directives always execute inside AngularJS framework codebase regardless of\n     *    where they are instantiated.\n     * 4. Angular components always execute inside Angular framework codebase regardless of\n     *    where they are instantiated.\n     * 5. An AngularJS component can be upgraded to an Angular component. This creates an\n     *    Angular directive, which bootstraps the AngularJS component directive in that location.\n     * 6. An Angular component can be downgraded to an AngularJS component directive. This creates\n     *    an AngularJS directive, which bootstraps the Angular component in that location.\n     * 7. Whenever an adapter component is instantiated the host element is owned by the framework\n     *    doing the instantiation. The other framework then instantiates and owns the view for that\n     *    component. This implies that component bindings will always follow the semantics of the\n     *    instantiation framework. The syntax is always that of Angular syntax.\n     * 8. AngularJS is always bootstrapped first and owns the bottom most view.\n     * 9. The new application is running in Angular zone, and therefore it no longer needs calls to\n     *    `$apply()`.\n     *\n     * ### Example\n     *\n     * ```\n     * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module), myCompilerOptions);\n     * const module = angular.module('myExample', []);\n     * module.directive('ng2Comp', adapter.downgradeNg2Component(Ng2Component));\n     *\n     * module.directive('ng1Hello', function() {\n     *   return {\n     *      scope: { title: '=' },\n     *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n     *   };\n     * });\n     *\n     *\n     * @Component({\n     *   selector: 'ng2-comp',\n     *   inputs: ['name'],\n     *   template: 'ng2[<ng1-hello [title]=\"name\">transclude</ng1-hello>](<ng-content></ng-content>)',\n     *   directives:\n     * })\n     * class Ng2Component {\n     * }\n     *\n     * @NgModule({\n     *   declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n     *   imports: [BrowserModule]\n     * })\n     * class MyNg2Module {}\n     *\n     *\n     * document.body.innerHTML = '<ng2-comp name=\"World\">project</ng2-comp>';\n     *\n     * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n     *   expect(document.body.textContent).toEqual(\n     *       \"ng2[ng1[Hello World!](transclude)](project)\");\n     * });\n     *\n     * ```\n     *\n     * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n     * [Ahead-of-Time compilation](guide/aot-compiler).\n     * @publicApi\n     */\n    var UpgradeAdapter = /** @class */ (function () {\n        function UpgradeAdapter(ng2AppModule, compilerOptions) {\n            this.ng2AppModule = ng2AppModule;\n            this.compilerOptions = compilerOptions;\n            this.idPrefix = \"NG2_UPGRADE_\" + upgradeCount++ + \"_\";\n            this.downgradedComponents = [];\n            /**\n             * An internal map of ng1 components which need to up upgraded to ng2.\n             *\n             * We can't upgrade until injector is instantiated and we can retrieve the component metadata.\n             * For this reason we keep a list of components to upgrade until ng1 injector is bootstrapped.\n             *\n             * @internal\n             */\n            this.ng1ComponentsToBeUpgraded = {};\n            this.upgradedProviders = [];\n            this.moduleRef = null;\n            if (!ng2AppModule) {\n                throw new Error('UpgradeAdapter cannot be instantiated without an NgModule of the Angular app.');\n            }\n        }\n        /**\n         * Allows Angular Component to be used from AngularJS.\n         *\n         * Use `downgradeNg2Component` to create an AngularJS Directive Definition Factory from\n         * Angular Component. The adapter will bootstrap Angular component from within the\n         * AngularJS template.\n         *\n         * @usageNotes\n         * ### Mental Model\n         *\n         * 1. The component is instantiated by being listed in AngularJS template. This means that the\n         *    host element is controlled by AngularJS, but the component's view will be controlled by\n         *    Angular.\n         * 2. Even thought the component is instantiated in AngularJS, it will be using Angular\n         *    syntax. This has to be done, this way because we must follow Angular components do not\n         *    declare how the attributes should be interpreted.\n         * 3. `ng-model` is controlled by AngularJS and communicates with the downgraded Angular component\n         *    by way of the `ControlValueAccessor` interface from @angular/forms. Only components that\n         *    implement this interface are eligible.\n         *\n         * ### Supported Features\n         *\n         * - Bindings:\n         *   - Attribute: `<comp name=\"World\">`\n         *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n         *   - Expression:  `<comp [name]=\"username\">`\n         *   - Event:  `<comp (close)=\"doSomething()\">`\n         *   - ng-model: `<comp ng-model=\"name\">`\n         * - Content projection: yes\n         *\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n         * const module = angular.module('myExample', []);\n         * module.directive('greet', adapter.downgradeNg2Component(Greeter));\n         *\n         * @Component({\n         *   selector: 'greet',\n         *   template: '{{salutation}} {{name}}! - <ng-content></ng-content>'\n         * })\n         * class Greeter {\n         *   @Input() salutation: string;\n         *   @Input() name: string;\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Greeter],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML =\n         *   'ng1 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.downgradeNg2Component = function (component) {\n            this.downgradedComponents.push(component);\n            return downgradeComponent({ component: component });\n        };\n        /**\n         * Allows AngularJS Component to be used from Angular.\n         *\n         * Use `upgradeNg1Component` to create an Angular component from AngularJS Component\n         * directive. The adapter will bootstrap AngularJS component from within the Angular\n         * template.\n         *\n         * @usageNotes\n         * ### Mental Model\n         *\n         * 1. The component is instantiated by being listed in Angular template. This means that the\n         *    host element is controlled by Angular, but the component's view will be controlled by\n         *    AngularJS.\n         *\n         * ### Supported Features\n         *\n         * - Bindings:\n         *   - Attribute: `<comp name=\"World\">`\n         *   - Interpolation:  `<comp greeting=\"Hello {{name}}!\">`\n         *   - Expression:  `<comp [name]=\"username\">`\n         *   - Event:  `<comp (close)=\"doSomething()\">`\n         * - Transclusion: yes\n         * - Only some of the features of\n         *   [Directive Definition Object](https://docs.angularjs.org/api/ng/service/$compile) are\n         *   supported:\n         *   - `compile`: not supported because the host element is owned by Angular, which does\n         *     not allow modifying DOM structure during compilation.\n         *   - `controller`: supported. (NOTE: injection of `$attrs` and `$transclude` is not supported.)\n         *   - `controllerAs`: supported.\n         *   - `bindToController`: supported.\n         *   - `link`: supported. (NOTE: only pre-link function is supported.)\n         *   - `name`: supported.\n         *   - `priority`: ignored.\n         *   - `replace`: not supported.\n         *   - `require`: supported.\n         *   - `restrict`: must be set to 'E'.\n         *   - `scope`: supported.\n         *   - `template`: supported.\n         *   - `templateUrl`: supported.\n         *   - `terminal`: ignored.\n         *   - `transclude`: supported.\n         *\n         *\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(forwardRef(() => MyNg2Module));\n         * const module = angular.module('myExample', []);\n         *\n         * module.directive('greet', function() {\n         *   return {\n         *     scope: {salutation: '=', name: '=' },\n         *     template: '{{salutation}} {{name}}! - <span ng-transclude></span>'\n         *   };\n         * });\n         *\n         * module.directive('ng2', adapter.downgradeNg2Component(Ng2Component));\n         *\n         * @Component({\n         *   selector: 'ng2',\n         *   template: 'ng2 template: <greet salutation=\"Hello\" [name]=\"world\">text</greet>'\n         * })\n         * class Ng2Component {\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Ng2Component, adapter.upgradeNg1Component('greet')],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML = '<ng2></ng2>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.upgradeNg1Component = function (name) {\n            if (this.ng1ComponentsToBeUpgraded.hasOwnProperty(name)) {\n                return this.ng1ComponentsToBeUpgraded[name].type;\n            }\n            else {\n                return (this.ng1ComponentsToBeUpgraded[name] = new UpgradeNg1ComponentAdapterBuilder(name))\n                    .type;\n            }\n        };\n        /**\n         * Registers the adapter's AngularJS upgrade module for unit testing in AngularJS.\n         * Use this instead of `angular.mock.module()` to load the upgrade module into\n         * the AngularJS testing injector.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```\n         * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n         *\n         * // configure the adapter with upgrade/downgrade components and services\n         * upgradeAdapter.downgradeNg2Component(MyComponent);\n         *\n         * let upgradeAdapterRef: UpgradeAdapterRef;\n         * let $compile, $rootScope;\n         *\n         * // We must register the adapter before any calls to `inject()`\n         * beforeEach(() => {\n         *   upgradeAdapterRef = upgradeAdapter.registerForNg1Tests(['heroApp']);\n         * });\n         *\n         * beforeEach(inject((_$compile_, _$rootScope_) => {\n         *   $compile = _$compile_;\n         *   $rootScope = _$rootScope_;\n         * }));\n         *\n         * it(\"says hello\", (done) => {\n         *   upgradeAdapterRef.ready(() => {\n         *     const element = $compile(\"<my-component></my-component>\")($rootScope);\n         *     $rootScope.$apply();\n         *     expect(element.html()).toContain(\"Hello World\");\n         *     done();\n         *   })\n         * });\n         *\n         * ```\n         *\n         * @param modules any AngularJS modules that the upgrade module should depend upon\n         * @returns an `UpgradeAdapterRef`, which lets you register a `ready()` callback to\n         * run assertions once the Angular components are ready to test through AngularJS.\n         */\n        UpgradeAdapter.prototype.registerForNg1Tests = function (modules) {\n            var _this = this;\n            var windowNgMock = window['angular'].mock;\n            if (!windowNgMock || !windowNgMock.module) {\n                throw new Error('Failed to find \\'angular.mock.module\\'.');\n            }\n            this.declareNg1Module(modules);\n            windowNgMock.module(this.ng1Module.name);\n            var upgrade = new UpgradeAdapterRef();\n            this.ng2BootstrapDeferred.promise.then(function (ng1Injector) { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); }, onError);\n            return upgrade;\n        };\n        /**\n         * Bootstrap a hybrid AngularJS / Angular application.\n         *\n         * This `bootstrap` method is a direct replacement (takes same arguments) for AngularJS\n         * [`bootstrap`](https://docs.angularjs.org/api/ng/function/angular.bootstrap) method. Unlike\n         * AngularJS, this bootstrap is asynchronous.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         * const module = angular.module('myExample', []);\n         * module.directive('ng2', adapter.downgradeNg2Component(Ng2));\n         *\n         * module.directive('ng1', function() {\n         *   return {\n         *      scope: { title: '=' },\n         *      template: 'ng1[Hello {{title}}!](<span ng-transclude></span>)'\n         *   };\n         * });\n         *\n         *\n         * @Component({\n         *   selector: 'ng2',\n         *   inputs: ['name'],\n         *   template: 'ng2[<ng1 [title]=\"name\">transclude</ng1>](<ng-content></ng-content>)'\n         * })\n         * class Ng2 {\n         * }\n         *\n         * @NgModule({\n         *   declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n         *   imports: [BrowserModule]\n         * })\n         * class MyNg2Module {}\n         *\n         * document.body.innerHTML = '<ng2 name=\"World\">project</ng2>';\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready(function() {\n         *   expect(document.body.textContent).toEqual(\n         *       \"ng2[ng1[Hello World!](transclude)](project)\");\n         * });\n         * ```\n         */\n        UpgradeAdapter.prototype.bootstrap = function (element$$1, modules, config) {\n            var _this = this;\n            this.declareNg1Module(modules);\n            var upgrade = new UpgradeAdapterRef();\n            // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n            var windowAngular = window /** TODO #???? */['angular'];\n            windowAngular.resumeBootstrap = undefined;\n            this.ngZone.run(function () { bootstrap(element$$1, [_this.ng1Module.name], config); });\n            var ng1BootstrapPromise = new Promise(function (resolve) {\n                if (windowAngular.resumeBootstrap) {\n                    var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                    windowAngular.resumeBootstrap = function () {\n                        windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                        var r = windowAngular.resumeBootstrap.apply(this, arguments);\n                        resolve();\n                        return r;\n                    };\n                }\n                else {\n                    resolve();\n                }\n            });\n            Promise.all([this.ng2BootstrapDeferred.promise, ng1BootstrapPromise]).then(function (_a) {\n                var _b = __read(_a, 1), ng1Injector = _b[0];\n                element(element$$1).data(controllerKey(INJECTOR_KEY), _this.moduleRef.injector);\n                _this.moduleRef.injector.get(core.NgZone).run(function () { upgrade._bootstrapDone(_this.moduleRef, ng1Injector); });\n            }, onError);\n            return upgrade;\n        };\n        /**\n         * Allows AngularJS service to be accessible from Angular.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```\n         * class Login { ... }\n         * class Server { ... }\n         *\n         * @Injectable()\n         * class Example {\n         *   constructor(@Inject('server') server, login: Login) {\n         *     ...\n         *   }\n         * }\n         *\n         * const module = angular.module('myExample', []);\n         * module.service('server', Server);\n         * module.service('login', Login);\n         *\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         * adapter.upgradeNg1Provider('server');\n         * adapter.upgradeNg1Provider('login', {asToken: Login});\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n         *   const example: Example = ref.ng2Injector.get(Example);\n         * });\n         *\n         * ```\n         */\n        UpgradeAdapter.prototype.upgradeNg1Provider = function (name, options) {\n            var token = options && options.asToken || name;\n            this.upgradedProviders.push({\n                provide: token,\n                useFactory: function ($injector) { return $injector.get(name); },\n                deps: [$INJECTOR]\n            });\n        };\n        /**\n         * Allows Angular service to be accessible from AngularJS.\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```\n         * class Example {\n         * }\n         *\n         * const adapter = new UpgradeAdapter(MyNg2Module);\n         *\n         * const module = angular.module('myExample', []);\n         * module.factory('example', adapter.downgradeNg2Provider(Example));\n         *\n         * adapter.bootstrap(document.body, ['myExample']).ready((ref) => {\n         *   const example: Example = ref.ng1Injector.get('example');\n         * });\n         *\n         * ```\n         */\n        UpgradeAdapter.prototype.downgradeNg2Provider = function (token) { return downgradeInjectable(token); };\n        /**\n         * Declare the AngularJS upgrade module for this adapter without bootstrapping the whole\n         * hybrid application.\n         *\n         * This method is automatically called by `bootstrap()` and `registerForNg1Tests()`.\n         *\n         * @param modules The AngularJS modules that this upgrade module should depend upon.\n         * @returns The AngularJS upgrade module that is declared by this method\n         *\n         * @usageNotes\n         * ### Example\n         *\n         * ```\n         * const upgradeAdapter = new UpgradeAdapter(MyNg2Module);\n         * upgradeAdapter.declareNg1Module(['heroApp']);\n         * ```\n         */\n        UpgradeAdapter.prototype.declareNg1Module = function (modules) {\n            var _this = this;\n            if (modules === void 0) { modules = []; }\n            var delayApplyExps = [];\n            var original$applyFn;\n            var rootScopePrototype;\n            var rootScope;\n            var upgradeAdapter = this;\n            var ng1Module = this.ng1Module = module$1(this.idPrefix, modules);\n            var platformRef = platformBrowserDynamic.platformBrowserDynamic();\n            this.ngZone = new core.NgZone({ enableLongStackTrace: Zone.hasOwnProperty('longStackTraceZoneSpec') });\n            this.ng2BootstrapDeferred = new Deferred();\n            ng1Module.constant(UPGRADE_APP_TYPE_KEY, 1 /* Dynamic */)\n                .factory(INJECTOR_KEY, function () { return _this.moduleRef.injector.get(core.Injector); })\n                .factory(LAZY_MODULE_REF, [INJECTOR_KEY, function (injector) { return ({ injector: injector }); }])\n                .constant(NG_ZONE_KEY, this.ngZone)\n                .factory(COMPILER_KEY, function () { return _this.moduleRef.injector.get(core.Compiler); })\n                .config([\n                '$provide', '$injector',\n                function (provide, ng1Injector) {\n                    provide.decorator($ROOT_SCOPE, [\n                        '$delegate',\n                        function (rootScopeDelegate) {\n                            // Capture the root apply so that we can delay first call to $apply until we\n                            // bootstrap Angular and then we replay and restore the $apply.\n                            rootScopePrototype = rootScopeDelegate.constructor.prototype;\n                            if (rootScopePrototype.hasOwnProperty('$apply')) {\n                                original$applyFn = rootScopePrototype.$apply;\n                                rootScopePrototype.$apply = function (exp) { return delayApplyExps.push(exp); };\n                            }\n                            else {\n                                throw new Error('Failed to find \\'$apply\\' on \\'$rootScope\\'!');\n                            }\n                            return rootScope = rootScopeDelegate;\n                        }\n                    ]);\n                    if (ng1Injector.has($$TESTABILITY)) {\n                        provide.decorator($$TESTABILITY, [\n                            '$delegate',\n                            function (testabilityDelegate) {\n                                var originalWhenStable = testabilityDelegate.whenStable;\n                                // Cannot use arrow function below because we need the context\n                                var newWhenStable = function (callback) {\n                                    originalWhenStable.call(this, function () {\n                                        var ng2Testability = upgradeAdapter.moduleRef.injector.get(core.Testability);\n                                        if (ng2Testability.isStable()) {\n                                            callback.apply(this, arguments);\n                                        }\n                                        else {\n                                            ng2Testability.whenStable(newWhenStable.bind(this, callback));\n                                        }\n                                    });\n                                };\n                                testabilityDelegate.whenStable = newWhenStable;\n                                return testabilityDelegate;\n                            }\n                        ]);\n                    }\n                }\n            ]);\n            ng1Module.run([\n                '$injector', '$rootScope',\n                function (ng1Injector, rootScope) {\n                    UpgradeNg1ComponentAdapterBuilder.resolve(_this.ng1ComponentsToBeUpgraded, ng1Injector)\n                        .then(function () {\n                        // Note: There is a bug in TS 2.4 that prevents us from\n                        // inlining this into @NgModule\n                        // TODO(tbosch): find or file a bug against TypeScript for this.\n                        var ngModule = {\n                            providers: [\n                                { provide: $INJECTOR, useFactory: function () { return ng1Injector; } },\n                                { provide: $COMPILE, useFactory: function () { return ng1Injector.get($COMPILE); } },\n                                _this.upgradedProviders\n                            ],\n                            imports: [core.resolveForwardRef(_this.ng2AppModule)],\n                            entryComponents: _this.downgradedComponents\n                        };\n                        // At this point we have ng1 injector and we have prepared\n                        // ng1 components to be upgraded, we now can bootstrap ng2.\n                        var DynamicNgUpgradeModule = /** @class */ (function () {\n                            function DynamicNgUpgradeModule() {\n                            }\n                            DynamicNgUpgradeModule.prototype.ngDoBootstrap = function () { };\n                            DynamicNgUpgradeModule = __decorate([\n                                core.NgModule(__assign({ jit: true }, ngModule)),\n                                __metadata(\"design:paramtypes\", [])\n                            ], DynamicNgUpgradeModule);\n                            return DynamicNgUpgradeModule;\n                        }());\n                        platformRef\n                            .bootstrapModule(DynamicNgUpgradeModule, [_this.compilerOptions, { ngZone: _this.ngZone }])\n                            .then(function (ref) {\n                            _this.moduleRef = ref;\n                            _this.ngZone.run(function () {\n                                if (rootScopePrototype) {\n                                    rootScopePrototype.$apply = original$applyFn; // restore original $apply\n                                    while (delayApplyExps.length) {\n                                        rootScope.$apply(delayApplyExps.shift());\n                                    }\n                                    rootScopePrototype = null;\n                                }\n                            });\n                        })\n                            .then(function () { return _this.ng2BootstrapDeferred.resolve(ng1Injector); }, onError)\n                            .then(function () {\n                            var subscription = _this.ngZone.onMicrotaskEmpty.subscribe({ next: function () { return rootScope.$digest(); } });\n                            rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                        });\n                    })\n                        .catch(function (e) { return _this.ng2BootstrapDeferred.reject(e); });\n                }\n            ]);\n            return ng1Module;\n        };\n        return UpgradeAdapter;\n    }());\n    /**\n     * Use `UpgradeAdapterRef` to control a hybrid AngularJS / Angular application.\n     *\n     * @deprecated Deprecated since v5. Use `upgrade/static` instead, which also supports\n     * [Ahead-of-Time compilation](guide/aot-compiler).\n     * @publicApi\n     */\n    var UpgradeAdapterRef = /** @class */ (function () {\n        function UpgradeAdapterRef() {\n            /* @internal */\n            this._readyFn = null;\n            this.ng1RootScope = null;\n            this.ng1Injector = null;\n            this.ng2ModuleRef = null;\n            this.ng2Injector = null;\n        }\n        /* @internal */\n        UpgradeAdapterRef.prototype._bootstrapDone = function (ngModuleRef, ng1Injector) {\n            this.ng2ModuleRef = ngModuleRef;\n            this.ng2Injector = ngModuleRef.injector;\n            this.ng1Injector = ng1Injector;\n            this.ng1RootScope = ng1Injector.get($ROOT_SCOPE);\n            this._readyFn && this._readyFn(this);\n        };\n        /**\n         * Register a callback function which is notified upon successful hybrid AngularJS / Angular\n         * application has been bootstrapped.\n         *\n         * The `ready` callback function is invoked inside the Angular zone, therefore it does not\n         * require a call to `$apply()`.\n         */\n        UpgradeAdapterRef.prototype.ready = function (fn) { this._readyFn = fn; };\n        /**\n         * Dispose of running hybrid AngularJS / Angular application.\n         */\n        UpgradeAdapterRef.prototype.dispose = function () {\n            this.ng1Injector.get($ROOT_SCOPE).$destroy();\n            this.ng2ModuleRef.destroy();\n        };\n        return UpgradeAdapterRef;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only re-exports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.VERSION = VERSION;\n    exports.UpgradeAdapter = UpgradeAdapter;\n    exports.UpgradeAdapterRef = UpgradeAdapterRef;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=upgrade.umd.js.map\n"]}
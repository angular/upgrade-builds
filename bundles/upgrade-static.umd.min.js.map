{"version":3,"file":"upgrade-static.umd.min.js","sources":["../../../../packages/upgrade/static/src/common/constants.ts","../../../../packages/upgrade/static/src/common/compiler_helpers/ml_parser/html_tags.ts","../../../../packages/upgrade/static/src/common/compiler_helpers/ml_parser/tags.ts","../../../../packages/upgrade/static/src/common/compiler_helpers/selector.ts","../../../../packages/upgrade/static/src/common/compiler_helpers/createElementCssSelector.ts","../../../../packages/upgrade/static/src/common/component_info.ts","../../../../packages/upgrade/static/src/common/ng_content_selector_helper.ts","../../../../packages/upgrade/static/src/common/util.ts","../../../../packages/upgrade/static/src/common/downgrade_component_adapter.ts","../../../../packages/upgrade/static/src/common/downgrade_component.ts","../../../../packages/upgrade/static/src/common/downgrade_injectable.ts","../../../../packages/upgrade/static/src/common/angular1.ts","../../../../packages/upgrade/static/src/static/upgrade_component.ts","../../../../packages/upgrade/static/src/static/angular1_providers.ts","../../../../packages/upgrade/static/src/static/upgrade_module.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const $COMPILE = '$compile';\nexport const $CONTROLLER = '$controller';\nexport const $DELEGATE = '$delegate';\nexport const $HTTP_BACKEND = '$httpBackend';\nexport const $INJECTOR = '$injector';\nexport const $PARSE = '$parse';\nexport const $PROVIDE = '$provide';\nexport const $ROOT_SCOPE = '$rootScope';\nexport const $SCOPE = '$scope';\nexport const $TEMPLATE_CACHE = '$templateCache';\nexport const $TEMPLATE_REQUEST = '$templateRequest';\n\nexport const $$TESTABILITY = '$$testability';\n\nexport const COMPILER_KEY = '$$angularCompiler';\nexport const GROUP_PROJECTABLE_NODES_KEY = '$$angularGroupProjectableNodes';\nexport const INJECTOR_KEY = '$$angularInjector';\nexport const NG_ZONE_KEY = '$$angularNgZone';\n\nexport const REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\nexport const REQUIRE_NG_MODEL = '?ngModel';\n\nexport const UPGRADE_MODULE_NAME = '$$UpgradeModule';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TagContentType, TagDefinition} from './tags';\n\nexport class HtmlTagDefinition implements TagDefinition {\n  private closedByChildren: {[key: string]: boolean} = {};\n\n  closedByParent: boolean = false;\n  requiredParents: {[key: string]: boolean};\n  parentToAdd: string;\n  implicitNamespacePrefix: string;\n  contentType: TagContentType;\n  isVoid: boolean;\n  ignoreFirstLf: boolean;\n  canSelfClose: boolean = false;\n\n  constructor(\n      {closedByChildren, requiredParents, implicitNamespacePrefix,\n       contentType = TagContentType.PARSABLE_DATA, closedByParent = false, isVoid = false,\n       ignoreFirstLf = false}: {\n        closedByChildren?: string[],\n        closedByParent?: boolean,\n        requiredParents?: string[],\n        implicitNamespacePrefix?: string,\n        contentType?: TagContentType,\n        isVoid?: boolean,\n        ignoreFirstLf?: boolean\n      } = {}) {\n    if (closedByChildren && closedByChildren.length > 0) {\n      closedByChildren.forEach(tagName => this.closedByChildren[tagName] = true);\n    }\n    this.isVoid = isVoid;\n    this.closedByParent = closedByParent || isVoid;\n    if (requiredParents && requiredParents.length > 0) {\n      this.requiredParents = {};\n      // The first parent is the list is automatically when none of the listed parents are present\n      this.parentToAdd = requiredParents[0];\n      requiredParents.forEach(tagName => this.requiredParents[tagName] = true);\n    }\n    this.implicitNamespacePrefix = implicitNamespacePrefix;\n    this.contentType = contentType;\n    this.ignoreFirstLf = ignoreFirstLf;\n  }\n\n  requireExtraParent(currentParent: string): boolean {\n    if (!this.requiredParents) {\n      return false;\n    }\n\n    if (!currentParent) {\n      return true;\n    }\n\n    const lcParent = currentParent.toLowerCase();\n    const isParentTemplate = lcParent === 'template' || currentParent === 'ng-template';\n    return !isParentTemplate && this.requiredParents[lcParent] != true;\n  }\n\n  isClosedByChild(name: string): boolean {\n    return this.isVoid || name.toLowerCase() in this.closedByChildren;\n  }\n}\n\n// see http://www.w3.org/TR/html51/syntax.html#optional-tags\n// This implementation does not fully conform to the HTML5 spec.\nconst TAG_DEFINITIONS: {[key: string]: HtmlTagDefinition} = {\n  'base': new HtmlTagDefinition({isVoid: true}),\n  'meta': new HtmlTagDefinition({isVoid: true}),\n  'area': new HtmlTagDefinition({isVoid: true}),\n  'embed': new HtmlTagDefinition({isVoid: true}),\n  'link': new HtmlTagDefinition({isVoid: true}),\n  'img': new HtmlTagDefinition({isVoid: true}),\n  'input': new HtmlTagDefinition({isVoid: true}),\n  'param': new HtmlTagDefinition({isVoid: true}),\n  'hr': new HtmlTagDefinition({isVoid: true}),\n  'br': new HtmlTagDefinition({isVoid: true}),\n  'source': new HtmlTagDefinition({isVoid: true}),\n  'track': new HtmlTagDefinition({isVoid: true}),\n  'wbr': new HtmlTagDefinition({isVoid: true}),\n  'p': new HtmlTagDefinition({\n    closedByChildren: [\n      'address', 'article', 'aside', 'blockquote', 'div', 'dl',      'fieldset', 'footer', 'form',\n      'h1',      'h2',      'h3',    'h4',         'h5',  'h6',      'header',   'hgroup', 'hr',\n      'main',    'nav',     'ol',    'p',          'pre', 'section', 'table',    'ul'\n    ],\n    closedByParent: true\n  }),\n  'thead': new HtmlTagDefinition({closedByChildren: ['tbody', 'tfoot']}),\n  'tbody': new HtmlTagDefinition({closedByChildren: ['tbody', 'tfoot'], closedByParent: true}),\n  'tfoot': new HtmlTagDefinition({closedByChildren: ['tbody'], closedByParent: true}),\n  'tr': new HtmlTagDefinition({\n    closedByChildren: ['tr'],\n    requiredParents: ['tbody', 'tfoot', 'thead'],\n    closedByParent: true\n  }),\n  'td': new HtmlTagDefinition({closedByChildren: ['td', 'th'], closedByParent: true}),\n  'th': new HtmlTagDefinition({closedByChildren: ['td', 'th'], closedByParent: true}),\n  'col': new HtmlTagDefinition({requiredParents: ['colgroup'], isVoid: true}),\n  'svg': new HtmlTagDefinition({implicitNamespacePrefix: 'svg'}),\n  'math': new HtmlTagDefinition({implicitNamespacePrefix: 'math'}),\n  'li': new HtmlTagDefinition({closedByChildren: ['li'], closedByParent: true}),\n  'dt': new HtmlTagDefinition({closedByChildren: ['dt', 'dd']}),\n  'dd': new HtmlTagDefinition({closedByChildren: ['dt', 'dd'], closedByParent: true}),\n  'rb': new HtmlTagDefinition({closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true}),\n  'rt': new HtmlTagDefinition({closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true}),\n  'rtc': new HtmlTagDefinition({closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true}),\n  'rp': new HtmlTagDefinition({closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true}),\n  'optgroup': new HtmlTagDefinition({closedByChildren: ['optgroup'], closedByParent: true}),\n  'option': new HtmlTagDefinition({closedByChildren: ['option', 'optgroup'], closedByParent: true}),\n  'pre': new HtmlTagDefinition({ignoreFirstLf: true}),\n  'listing': new HtmlTagDefinition({ignoreFirstLf: true}),\n  'style': new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),\n  'script': new HtmlTagDefinition({contentType: TagContentType.RAW_TEXT}),\n  'title': new HtmlTagDefinition({contentType: TagContentType.ESCAPABLE_RAW_TEXT}),\n  'textarea':\n      new HtmlTagDefinition({contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true}),\n};\n\nconst _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();\n\nexport function getHtmlTagDefinition(tagName: string): HtmlTagDefinition {\n  return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport enum TagContentType {\n  RAW_TEXT,\n  ESCAPABLE_RAW_TEXT,\n  PARSABLE_DATA\n}\n\n// TODO(vicb): read-only when TS supports it\nexport interface TagDefinition {\n  closedByParent: boolean;\n  requiredParents: {[key: string]: boolean};\n  parentToAdd: string;\n  implicitNamespacePrefix: string;\n  contentType: TagContentType;\n  isVoid: boolean;\n  ignoreFirstLf: boolean;\n  canSelfClose: boolean;\n\n  requireExtraParent(currentParent: string): boolean;\n\n  isClosedByChild(name: string): boolean;\n}\n\nexport function splitNsName(elementName: string): [string, string] {\n  if (elementName[0] != ':') {\n    return [null, elementName];\n  }\n\n  const colonIndex = elementName.indexOf(':', 1);\n\n  if (colonIndex == -1) {\n    throw new Error(`Unsupported format \"${elementName}\" expecting \":namespace:name\"`);\n  }\n\n  return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n}\n\nexport function getNsPrefix(fullName: string): string {\n  return fullName === null ? null : splitNsName(fullName)[0];\n}\n\nexport function mergeNsAndName(prefix: string, localName: string): string {\n  return prefix ? `:${prefix}:${localName}` : localName;\n}\n\n// see http://www.w3.org/TR/html51/syntax.html#named-character-references\n// see https://html.spec.whatwg.org/multipage/entities.json\n// This list is not exhaustive to keep the compiler footprint low.\n// The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.\nexport const NAMED_ENTITIES: {[k: string]: string} = {\n  'Aacute': '\\u00C1',\n  'aacute': '\\u00E1',\n  'Acirc': '\\u00C2',\n  'acirc': '\\u00E2',\n  'acute': '\\u00B4',\n  'AElig': '\\u00C6',\n  'aelig': '\\u00E6',\n  'Agrave': '\\u00C0',\n  'agrave': '\\u00E0',\n  'alefsym': '\\u2135',\n  'Alpha': '\\u0391',\n  'alpha': '\\u03B1',\n  'amp': '&',\n  'and': '\\u2227',\n  'ang': '\\u2220',\n  'apos': '\\u0027',\n  'Aring': '\\u00C5',\n  'aring': '\\u00E5',\n  'asymp': '\\u2248',\n  'Atilde': '\\u00C3',\n  'atilde': '\\u00E3',\n  'Auml': '\\u00C4',\n  'auml': '\\u00E4',\n  'bdquo': '\\u201E',\n  'Beta': '\\u0392',\n  'beta': '\\u03B2',\n  'brvbar': '\\u00A6',\n  'bull': '\\u2022',\n  'cap': '\\u2229',\n  'Ccedil': '\\u00C7',\n  'ccedil': '\\u00E7',\n  'cedil': '\\u00B8',\n  'cent': '\\u00A2',\n  'Chi': '\\u03A7',\n  'chi': '\\u03C7',\n  'circ': '\\u02C6',\n  'clubs': '\\u2663',\n  'cong': '\\u2245',\n  'copy': '\\u00A9',\n  'crarr': '\\u21B5',\n  'cup': '\\u222A',\n  'curren': '\\u00A4',\n  'dagger': '\\u2020',\n  'Dagger': '\\u2021',\n  'darr': '\\u2193',\n  'dArr': '\\u21D3',\n  'deg': '\\u00B0',\n  'Delta': '\\u0394',\n  'delta': '\\u03B4',\n  'diams': '\\u2666',\n  'divide': '\\u00F7',\n  'Eacute': '\\u00C9',\n  'eacute': '\\u00E9',\n  'Ecirc': '\\u00CA',\n  'ecirc': '\\u00EA',\n  'Egrave': '\\u00C8',\n  'egrave': '\\u00E8',\n  'empty': '\\u2205',\n  'emsp': '\\u2003',\n  'ensp': '\\u2002',\n  'Epsilon': '\\u0395',\n  'epsilon': '\\u03B5',\n  'equiv': '\\u2261',\n  'Eta': '\\u0397',\n  'eta': '\\u03B7',\n  'ETH': '\\u00D0',\n  'eth': '\\u00F0',\n  'Euml': '\\u00CB',\n  'euml': '\\u00EB',\n  'euro': '\\u20AC',\n  'exist': '\\u2203',\n  'fnof': '\\u0192',\n  'forall': '\\u2200',\n  'frac12': '\\u00BD',\n  'frac14': '\\u00BC',\n  'frac34': '\\u00BE',\n  'frasl': '\\u2044',\n  'Gamma': '\\u0393',\n  'gamma': '\\u03B3',\n  'ge': '\\u2265',\n  'gt': '>',\n  'harr': '\\u2194',\n  'hArr': '\\u21D4',\n  'hearts': '\\u2665',\n  'hellip': '\\u2026',\n  'Iacute': '\\u00CD',\n  'iacute': '\\u00ED',\n  'Icirc': '\\u00CE',\n  'icirc': '\\u00EE',\n  'iexcl': '\\u00A1',\n  'Igrave': '\\u00CC',\n  'igrave': '\\u00EC',\n  'image': '\\u2111',\n  'infin': '\\u221E',\n  'int': '\\u222B',\n  'Iota': '\\u0399',\n  'iota': '\\u03B9',\n  'iquest': '\\u00BF',\n  'isin': '\\u2208',\n  'Iuml': '\\u00CF',\n  'iuml': '\\u00EF',\n  'Kappa': '\\u039A',\n  'kappa': '\\u03BA',\n  'Lambda': '\\u039B',\n  'lambda': '\\u03BB',\n  'lang': '\\u27E8',\n  'laquo': '\\u00AB',\n  'larr': '\\u2190',\n  'lArr': '\\u21D0',\n  'lceil': '\\u2308',\n  'ldquo': '\\u201C',\n  'le': '\\u2264',\n  'lfloor': '\\u230A',\n  'lowast': '\\u2217',\n  'loz': '\\u25CA',\n  'lrm': '\\u200E',\n  'lsaquo': '\\u2039',\n  'lsquo': '\\u2018',\n  'lt': '<',\n  'macr': '\\u00AF',\n  'mdash': '\\u2014',\n  'micro': '\\u00B5',\n  'middot': '\\u00B7',\n  'minus': '\\u2212',\n  'Mu': '\\u039C',\n  'mu': '\\u03BC',\n  'nabla': '\\u2207',\n  'nbsp': '\\u00A0',\n  'ndash': '\\u2013',\n  'ne': '\\u2260',\n  'ni': '\\u220B',\n  'not': '\\u00AC',\n  'notin': '\\u2209',\n  'nsub': '\\u2284',\n  'Ntilde': '\\u00D1',\n  'ntilde': '\\u00F1',\n  'Nu': '\\u039D',\n  'nu': '\\u03BD',\n  'Oacute': '\\u00D3',\n  'oacute': '\\u00F3',\n  'Ocirc': '\\u00D4',\n  'ocirc': '\\u00F4',\n  'OElig': '\\u0152',\n  'oelig': '\\u0153',\n  'Ograve': '\\u00D2',\n  'ograve': '\\u00F2',\n  'oline': '\\u203E',\n  'Omega': '\\u03A9',\n  'omega': '\\u03C9',\n  'Omicron': '\\u039F',\n  'omicron': '\\u03BF',\n  'oplus': '\\u2295',\n  'or': '\\u2228',\n  'ordf': '\\u00AA',\n  'ordm': '\\u00BA',\n  'Oslash': '\\u00D8',\n  'oslash': '\\u00F8',\n  'Otilde': '\\u00D5',\n  'otilde': '\\u00F5',\n  'otimes': '\\u2297',\n  'Ouml': '\\u00D6',\n  'ouml': '\\u00F6',\n  'para': '\\u00B6',\n  'permil': '\\u2030',\n  'perp': '\\u22A5',\n  'Phi': '\\u03A6',\n  'phi': '\\u03C6',\n  'Pi': '\\u03A0',\n  'pi': '\\u03C0',\n  'piv': '\\u03D6',\n  'plusmn': '\\u00B1',\n  'pound': '\\u00A3',\n  'prime': '\\u2032',\n  'Prime': '\\u2033',\n  'prod': '\\u220F',\n  'prop': '\\u221D',\n  'Psi': '\\u03A8',\n  'psi': '\\u03C8',\n  'quot': '\\u0022',\n  'radic': '\\u221A',\n  'rang': '\\u27E9',\n  'raquo': '\\u00BB',\n  'rarr': '\\u2192',\n  'rArr': '\\u21D2',\n  'rceil': '\\u2309',\n  'rdquo': '\\u201D',\n  'real': '\\u211C',\n  'reg': '\\u00AE',\n  'rfloor': '\\u230B',\n  'Rho': '\\u03A1',\n  'rho': '\\u03C1',\n  'rlm': '\\u200F',\n  'rsaquo': '\\u203A',\n  'rsquo': '\\u2019',\n  'sbquo': '\\u201A',\n  'Scaron': '\\u0160',\n  'scaron': '\\u0161',\n  'sdot': '\\u22C5',\n  'sect': '\\u00A7',\n  'shy': '\\u00AD',\n  'Sigma': '\\u03A3',\n  'sigma': '\\u03C3',\n  'sigmaf': '\\u03C2',\n  'sim': '\\u223C',\n  'spades': '\\u2660',\n  'sub': '\\u2282',\n  'sube': '\\u2286',\n  'sum': '\\u2211',\n  'sup': '\\u2283',\n  'sup1': '\\u00B9',\n  'sup2': '\\u00B2',\n  'sup3': '\\u00B3',\n  'supe': '\\u2287',\n  'szlig': '\\u00DF',\n  'Tau': '\\u03A4',\n  'tau': '\\u03C4',\n  'there4': '\\u2234',\n  'Theta': '\\u0398',\n  'theta': '\\u03B8',\n  'thetasym': '\\u03D1',\n  'thinsp': '\\u2009',\n  'THORN': '\\u00DE',\n  'thorn': '\\u00FE',\n  'tilde': '\\u02DC',\n  'times': '\\u00D7',\n  'trade': '\\u2122',\n  'Uacute': '\\u00DA',\n  'uacute': '\\u00FA',\n  'uarr': '\\u2191',\n  'uArr': '\\u21D1',\n  'Ucirc': '\\u00DB',\n  'ucirc': '\\u00FB',\n  'Ugrave': '\\u00D9',\n  'ugrave': '\\u00F9',\n  'uml': '\\u00A8',\n  'upsih': '\\u03D2',\n  'Upsilon': '\\u03A5',\n  'upsilon': '\\u03C5',\n  'Uuml': '\\u00DC',\n  'uuml': '\\u00FC',\n  'weierp': '\\u2118',\n  'Xi': '\\u039E',\n  'xi': '\\u03BE',\n  'Yacute': '\\u00DD',\n  'yacute': '\\u00FD',\n  'yen': '\\u00A5',\n  'yuml': '\\u00FF',\n  'Yuml': '\\u0178',\n  'Zeta': '\\u0396',\n  'zeta': '\\u03B6',\n  'zwj': '\\u200D',\n  'zwnj': '\\u200C',\n};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {getHtmlTagDefinition} from './ml_parser/html_tags';\n\nconst _SELECTOR_REGEXP = new RegExp(\n    '(\\\\:not\\\\()|' +           //\":not(\"\n        '([-\\\\w]+)|' +         // \"tag\"\n        '(?:\\\\.([-\\\\w]+))|' +  // \".class\"\n        // \"-\" should appear first in the regexp below as FF31 parses \"[.-\\w]\" as a range\n        '(?:\\\\[([-.\\\\w*]+)(?:=([^\\\\]]*))?\\\\])|' +  // \"[name]\", \"[name=value]\"\n        '(\\\\))|' +                                 // \")\"\n        '(\\\\s*,\\\\s*)',                             // \",\"\n    'g');\n\n/**\n * A css selector contains an element name,\n * css classes and attribute/value pairs with the purpose\n * of selecting subsets out of them.\n */\nexport class CssSelector {\n  element: string = null;\n  classNames: string[] = [];\n  attrs: string[] = [];\n  notSelectors: CssSelector[] = [];\n\n  static parse(selector: string): CssSelector[] {\n    const results: CssSelector[] = [];\n    const _addResult = (res: CssSelector[], cssSel: CssSelector) => {\n      if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&\n          cssSel.attrs.length == 0) {\n        cssSel.element = '*';\n      }\n      res.push(cssSel);\n    };\n    let cssSelector = new CssSelector();\n    let match: string[];\n    let current = cssSelector;\n    let inNot = false;\n    _SELECTOR_REGEXP.lastIndex = 0;\n    while (match = _SELECTOR_REGEXP.exec(selector)) {\n      if (match[1]) {\n        if (inNot) {\n          throw new Error('Nesting :not is not allowed in a selector');\n        }\n        inNot = true;\n        current = new CssSelector();\n        cssSelector.notSelectors.push(current);\n      }\n      if (match[2]) {\n        current.setElement(match[2]);\n      }\n      if (match[3]) {\n        current.addClassName(match[3]);\n      }\n      if (match[4]) {\n        current.addAttribute(match[4], match[5]);\n      }\n      if (match[6]) {\n        inNot = false;\n        current = cssSelector;\n      }\n      if (match[7]) {\n        if (inNot) {\n          throw new Error('Multiple selectors in :not are not supported');\n        }\n        _addResult(results, cssSelector);\n        cssSelector = current = new CssSelector();\n      }\n    }\n    _addResult(results, cssSelector);\n    return results;\n  }\n\n  isElementSelector(): boolean {\n    return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&\n        this.notSelectors.length === 0;\n  }\n\n  hasElementSelector(): boolean { return !!this.element; }\n\n  setElement(element: string = null) { this.element = element; }\n\n  /** Gets a template string for an element that matches the selector. */\n  getMatchingElementTemplate(): string {\n    const tagName = this.element || 'div';\n    const classAttr = this.classNames.length > 0 ? ` class=\"${this.classNames.join(' ')}\"` : '';\n\n    let attrs = '';\n    for (let i = 0; i < this.attrs.length; i += 2) {\n      const attrName = this.attrs[i];\n      const attrValue = this.attrs[i + 1] !== '' ? `=\"${this.attrs[i + 1]}\"` : '';\n      attrs += ` ${attrName}${attrValue}`;\n    }\n\n    return getHtmlTagDefinition(tagName).isVoid ? `<${tagName}${classAttr}${attrs}/>` :\n                                                  `<${tagName}${classAttr}${attrs}></${tagName}>`;\n  }\n\n  addAttribute(name: string, value: string = '') {\n    this.attrs.push(name, value && value.toLowerCase() || '');\n  }\n\n  addClassName(name: string) { this.classNames.push(name.toLowerCase()); }\n\n  toString(): string {\n    let res: string = this.element || '';\n    if (this.classNames) {\n      this.classNames.forEach(klass => res += `.${klass}`);\n    }\n    if (this.attrs) {\n      for (let i = 0; i < this.attrs.length; i += 2) {\n        const name = this.attrs[i];\n        const value = this.attrs[i + 1];\n        res += `[${name}${value ? '=' + value : ''}]`;\n      }\n    }\n    this.notSelectors.forEach(notSelector => res += `:not(${notSelector})`);\n    return res;\n  }\n}\n\n/**\n * Reads a list of CssSelectors and allows to calculate which ones\n * are contained in a given CssSelector.\n */\nexport class SelectorMatcher {\n  static createNotMatcher(notSelectors: CssSelector[]): SelectorMatcher {\n    const notMatcher = new SelectorMatcher();\n    notMatcher.addSelectables(notSelectors, null);\n    return notMatcher;\n  }\n\n  private _elementMap = new Map<string, SelectorContext[]>();\n  private _elementPartialMap = new Map<string, SelectorMatcher>();\n  private _classMap = new Map<string, SelectorContext[]>();\n  private _classPartialMap = new Map<string, SelectorMatcher>();\n  private _attrValueMap = new Map<string, Map<string, SelectorContext[]>>();\n  private _attrValuePartialMap = new Map<string, Map<string, SelectorMatcher>>();\n  private _listContexts: SelectorListContext[] = [];\n\n  addSelectables(cssSelectors: CssSelector[], callbackCtxt?: any) {\n    let listContext: SelectorListContext = null;\n    if (cssSelectors.length > 1) {\n      listContext = new SelectorListContext(cssSelectors);\n      this._listContexts.push(listContext);\n    }\n    for (let i = 0; i < cssSelectors.length; i++) {\n      this._addSelectable(cssSelectors[i], callbackCtxt, listContext);\n    }\n  }\n\n  /**\n   * Add an object that can be found later on by calling `match`.\n   * @param cssSelector A css selector\n   * @param callbackCtxt An opaque object that will be given to the callback of the `match` function\n   */\n  private _addSelectable(\n      cssSelector: CssSelector, callbackCtxt: any, listContext: SelectorListContext) {\n    let matcher: SelectorMatcher = this;\n    const element = cssSelector.element;\n    const classNames = cssSelector.classNames;\n    const attrs = cssSelector.attrs;\n    const selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);\n\n    if (element) {\n      const isTerminal = attrs.length === 0 && classNames.length === 0;\n      if (isTerminal) {\n        this._addTerminal(matcher._elementMap, element, selectable);\n      } else {\n        matcher = this._addPartial(matcher._elementPartialMap, element);\n      }\n    }\n\n    if (classNames) {\n      for (let i = 0; i < classNames.length; i++) {\n        const isTerminal = attrs.length === 0 && i === classNames.length - 1;\n        const className = classNames[i];\n        if (isTerminal) {\n          this._addTerminal(matcher._classMap, className, selectable);\n        } else {\n          matcher = this._addPartial(matcher._classPartialMap, className);\n        }\n      }\n    }\n\n    if (attrs) {\n      for (let i = 0; i < attrs.length; i += 2) {\n        const isTerminal = i === attrs.length - 2;\n        const name = attrs[i];\n        const value = attrs[i + 1];\n        if (isTerminal) {\n          const terminalMap = matcher._attrValueMap;\n          let terminalValuesMap = terminalMap.get(name);\n          if (!terminalValuesMap) {\n            terminalValuesMap = new Map<string, SelectorContext[]>();\n            terminalMap.set(name, terminalValuesMap);\n          }\n          this._addTerminal(terminalValuesMap, value, selectable);\n        } else {\n          const partialMap = matcher._attrValuePartialMap;\n          let partialValuesMap = partialMap.get(name);\n          if (!partialValuesMap) {\n            partialValuesMap = new Map<string, SelectorMatcher>();\n            partialMap.set(name, partialValuesMap);\n          }\n          matcher = this._addPartial(partialValuesMap, value);\n        }\n      }\n    }\n  }\n\n  private _addTerminal(\n      map: Map<string, SelectorContext[]>, name: string, selectable: SelectorContext) {\n    let terminalList = map.get(name);\n    if (!terminalList) {\n      terminalList = [];\n      map.set(name, terminalList);\n    }\n    terminalList.push(selectable);\n  }\n\n  private _addPartial(map: Map<string, SelectorMatcher>, name: string): SelectorMatcher {\n    let matcher = map.get(name);\n    if (!matcher) {\n      matcher = new SelectorMatcher();\n      map.set(name, matcher);\n    }\n    return matcher;\n  }\n\n  /**\n   * Find the objects that have been added via `addSelectable`\n   * whose css selector is contained in the given css selector.\n   * @param cssSelector A css selector\n   * @param matchedCallback This callback will be called with the object handed into `addSelectable`\n   * @return boolean true if a match was found\n  */\n  match(cssSelector: CssSelector, matchedCallback: (c: CssSelector, a: any) => void): boolean {\n    let result = false;\n    const element = cssSelector.element;\n    const classNames = cssSelector.classNames;\n    const attrs = cssSelector.attrs;\n\n    for (let i = 0; i < this._listContexts.length; i++) {\n      this._listContexts[i].alreadyMatched = false;\n    }\n\n    result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;\n    result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||\n        result;\n\n    if (classNames) {\n      for (let i = 0; i < classNames.length; i++) {\n        const className = classNames[i];\n        result =\n            this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;\n        result =\n            this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||\n            result;\n      }\n    }\n\n    if (attrs) {\n      for (let i = 0; i < attrs.length; i += 2) {\n        const name = attrs[i];\n        const value = attrs[i + 1];\n\n        const terminalValuesMap = this._attrValueMap.get(name);\n        if (value) {\n          result =\n              this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;\n        }\n        result =\n            this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;\n\n        const partialValuesMap = this._attrValuePartialMap.get(name);\n        if (value) {\n          result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;\n        }\n        result =\n            this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;\n      }\n    }\n    return result;\n  }\n\n  /** @internal */\n  _matchTerminal(\n      map: Map<string, SelectorContext[]>, name: string, cssSelector: CssSelector,\n      matchedCallback: (c: CssSelector, a: any) => void): boolean {\n    if (!map || typeof name !== 'string') {\n      return false;\n    }\n\n    let selectables: SelectorContext[] = map.get(name) || [];\n    const starSelectables: SelectorContext[] = map.get('*');\n    if (starSelectables) {\n      selectables = selectables.concat(starSelectables);\n    }\n    if (selectables.length === 0) {\n      return false;\n    }\n    let selectable: SelectorContext;\n    let result = false;\n    for (let i = 0; i < selectables.length; i++) {\n      selectable = selectables[i];\n      result = selectable.finalize(cssSelector, matchedCallback) || result;\n    }\n    return result;\n  }\n\n  /** @internal */\n  _matchPartial(\n      map: Map<string, SelectorMatcher>, name: string, cssSelector: CssSelector,\n      matchedCallback: (c: CssSelector, a: any) => void): boolean {\n    if (!map || typeof name !== 'string') {\n      return false;\n    }\n\n    const nestedSelector = map.get(name);\n    if (!nestedSelector) {\n      return false;\n    }\n    // TODO(perf): get rid of recursion and measure again\n    // TODO(perf): don't pass the whole selector into the recursion,\n    // but only the not processed parts\n    return nestedSelector.match(cssSelector, matchedCallback);\n  }\n}\n\n\nexport class SelectorListContext {\n  alreadyMatched: boolean = false;\n\n  constructor(public selectors: CssSelector[]) {}\n}\n\n// Store context to pass back selector and context when a selector is matched\nexport class SelectorContext {\n  notSelectors: CssSelector[];\n\n  constructor(\n      public selector: CssSelector, public cbContext: any,\n      public listContext: SelectorListContext) {\n    this.notSelectors = selector.notSelectors;\n  }\n\n  finalize(cssSelector: CssSelector, callback: (c: CssSelector, a: any) => void): boolean {\n    let result = true;\n    if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {\n      const notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);\n      result = !notMatcher.match(cssSelector, null);\n    }\n    if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {\n      if (this.listContext) {\n        this.listContext.alreadyMatched = true;\n      }\n      callback(this.selector, this.cbContext);\n    }\n    return result;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CssSelector} from './selector';\n\n/*\n * The following items are copied from the Angular Compiler to be used here\n * without the need to import the entire compiler into the build\n */\n\nconst CLASS_ATTR = 'class';\n\nexport function createElementCssSelector(\n    elementName: string, attributes: [string, string][]): CssSelector {\n  const cssSelector = new CssSelector();\n  const elNameNoNs = splitNsName(elementName)[1];\n\n  cssSelector.setElement(elNameNoNs);\n\n  for (let i = 0; i < attributes.length; i++) {\n    const attrName = attributes[i][0];\n    const attrNameNoNs = splitNsName(attrName)[1];\n    const attrValue = attributes[i][1];\n\n    cssSelector.addAttribute(attrNameNoNs, attrValue);\n    if (attrName.toLowerCase() == CLASS_ATTR) {\n      const classes = splitClasses(attrValue);\n      classes.forEach(className => cssSelector.addClassName(className));\n    }\n  }\n  return cssSelector;\n}\n\nexport function splitNsName(elementName: string): [string, string] {\n  if (elementName[0] != ':') {\n    return [null, elementName];\n  }\n\n  const colonIndex = elementName.indexOf(':', 1);\n\n  if (colonIndex == -1) {\n    throw new Error(`Unsupported format \"${elementName}\" expecting \":namespace:name\"`);\n  }\n\n  return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];\n}\n\nexport function splitClasses(classAttrValue: string): string[] {\n  return classAttrValue.trim().split(/\\s+/g);\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\n\nexport interface ComponentInfo {\n  component: Type<any>;\n  inputs?: string[];\n  outputs?: string[];\n  selectors?: string[];\n}\n\n/**\n * A `PropertyBinding` represents a mapping between a property name\n * and an attribute name. It is parsed from a string of the form\n * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n * and attribute have the same identifier.\n */\nexport class PropertyBinding {\n  prop: string;\n  attr: string;\n  bracketAttr: string;\n  bracketParenAttr: string;\n  parenAttr: string;\n  onAttr: string;\n  bindAttr: string;\n  bindonAttr: string;\n\n  constructor(public binding: string) { this.parseBinding(); }\n\n  private parseBinding() {\n    const parts = this.binding.split(':');\n    this.prop = parts[0].trim();\n    this.attr = (parts[1] || this.prop).trim();\n    this.bracketAttr = `[${this.attr}]`;\n    this.parenAttr = `(${this.attr})`;\n    this.bracketParenAttr = `[(${this.attr})]`;\n    const capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n    this.onAttr = `on${capitalAttr}`;\n    this.bindAttr = `bind${capitalAttr}`;\n    this.bindonAttr = `bindon${capitalAttr}`;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentInfo} from './component_info';\n\n/**\n * This class gives an extension point between the static and dynamic versions\n * of ngUpgrade:\n * * In the static version (this one) we must specify them manually as part of\n *   the call to `downgradeComponent(...)`.\n * * In the dynamic version (`DynamicNgContentSelectorHelper`) we are able to\n *   ask the compiler for the selectors of a component.\n */\nexport class NgContentSelectorHelper {\n  getNgContentSelectors(info: ComponentInfo): string[] {\n    // if no selectors are passed then default to a single \"wildcard\" selector\n    return info.selectors || ['*'];\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport * as angular from './angular1';\n\nexport function onError(e: any) {\n  // TODO: (misko): We seem to not have a stack trace here!\n  if (console.error) {\n    console.error(e, e.stack);\n  } else {\n    // tslint:disable-next-line:no-console\n    console.log(e, e.stack);\n  }\n  throw e;\n}\n\nexport function controllerKey(name: string): string {\n  return '$' + name + 'Controller';\n}\n\nexport function getAttributesAsArray(node: Node): [string, string][] {\n  const attributes = node.attributes;\n  let asArray: [string, string][];\n  if (attributes) {\n    let attrLen = attributes.length;\n    asArray = new Array(attrLen);\n    for (let i = 0; i < attrLen; i++) {\n      asArray[i] = [attributes[i].nodeName, attributes[i].nodeValue];\n    }\n  }\n  return asArray || [];\n}\n\nexport function getComponentName(component: Type<any>): string {\n  // Return the name of the component or the first line of its stringified version.\n  return (component as any).overriddenName || component.name || component.toString().split('\\n')[0];\n}\n\nexport class Deferred<R> {\n  promise: Promise<R>;\n  resolve: (value?: R|PromiseLike<R>) => void;\n  reject: (error?: any) => void;\n\n  constructor() {\n    this.promise = new Promise((res, rej) => {\n      this.resolve = res;\n      this.reject = rej;\n    });\n  }\n}\n\n/**\n * @return Whether the passed-in component implements the subset of the\n *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n *     compatibility.\n */\nfunction supportsNgModel(component: any) {\n  return typeof component.writeValue === 'function' &&\n      typeof component.registerOnChange === 'function';\n}\n\n/**\n * Glue the AngularJS `NgModelController` (if it exists) to the component\n * (if it implements the needed subset of the `ControlValueAccessor` interface).\n */\nexport function hookupNgModel(ngModel: angular.INgModelController, component: any) {\n  if (ngModel && supportsNgModel(component)) {\n    ngModel.$render = () => { component.writeValue(ngModel.$viewValue); };\n    component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectorRef, ComponentFactory, ComponentRef, EventEmitter, Injector, OnChanges, ReflectiveInjector, SimpleChange, SimpleChanges, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {createElementCssSelector} from './compiler_helpers/createElementCssSelector';\nimport {CssSelector, SelectorMatcher} from './compiler_helpers/selector';\nimport {ComponentInfo, PropertyBinding} from './component_info';\nimport {$SCOPE} from './constants';\nimport {NgContentSelectorHelper} from './ng_content_selector_helper';\nimport {getAttributesAsArray, getComponentName, hookupNgModel} from './util';\n\nconst INITIAL_VALUE = {\n  __UNINITIALIZED__: true\n};\n\nexport class DowngradeComponentAdapter {\n  private inputChangeCount: number = 0;\n  private inputChanges: SimpleChanges = null;\n  private componentScope: angular.IScope;\n  private componentRef: ComponentRef<any> = null;\n  private component: any = null;\n  private changeDetector: ChangeDetectorRef = null;\n\n  constructor(\n      private id: string, private info: ComponentInfo, private element: angular.IAugmentedJQuery,\n      private attrs: angular.IAttributes, private scope: angular.IScope,\n      private ngModel: angular.INgModelController, private parentInjector: Injector,\n      private $injector: angular.IInjectorService, private $compile: angular.ICompileService,\n      private $parse: angular.IParseService, private componentFactory: ComponentFactory<any>) {\n    (this.element[0] as any).id = id;\n    this.componentScope = scope.$new();\n  }\n\n  compileContents(): Node[][] {\n    const compiledProjectableNodes: Node[][] = [];\n    const projectableNodes: Node[][] = this.groupProjectableNodes();\n    const linkFns = projectableNodes.map(nodes => this.$compile(nodes));\n\n    this.element.empty();\n\n    linkFns.forEach(linkFn => {\n      linkFn(this.scope, (clone: Node[]) => {\n        compiledProjectableNodes.push(clone);\n        this.element.append(clone);\n      });\n    });\n\n    return compiledProjectableNodes;\n  }\n\n  createComponent(projectableNodes: Node[][]) {\n    const childInjector = ReflectiveInjector.resolveAndCreate(\n        [{provide: $SCOPE, useValue: this.componentScope}], this.parentInjector);\n\n    this.componentRef =\n        this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n    this.changeDetector = this.componentRef.changeDetectorRef;\n    this.component = this.componentRef.instance;\n\n    hookupNgModel(this.ngModel, this.component);\n  }\n\n  setupInputs(): void {\n    const attrs = this.attrs;\n    const inputs = this.info.inputs || [];\n    for (let i = 0; i < inputs.length; i++) {\n      const input = new PropertyBinding(inputs[i]);\n      let expr: any /** TODO #9100 */ = null;\n\n      if (attrs.hasOwnProperty(input.attr)) {\n        const observeFn = (prop => {\n          let prevValue = INITIAL_VALUE;\n          return (currValue: any) => {\n            if (prevValue === INITIAL_VALUE) {\n              prevValue = currValue;\n            }\n\n            this.updateInput(prop, prevValue, currValue);\n            prevValue = currValue;\n          };\n        })(input.prop);\n        attrs.$observe(input.attr, observeFn);\n\n      } else if (attrs.hasOwnProperty(input.bindAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[input.bindAttr];\n      } else if (attrs.hasOwnProperty(input.bracketAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[input.bracketAttr];\n      } else if (attrs.hasOwnProperty(input.bindonAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[input.bindonAttr];\n      } else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[input.bracketParenAttr];\n      }\n      if (expr != null) {\n        const watchFn =\n            (prop => (currValue: any, prevValue: any) =>\n                 this.updateInput(prop, prevValue, currValue))(input.prop);\n        this.componentScope.$watch(expr, watchFn);\n      }\n    }\n\n    const prototype = this.info.component.prototype;\n    if (prototype && (<OnChanges>prototype).ngOnChanges) {\n      // Detect: OnChanges interface\n      this.inputChanges = {};\n      this.componentScope.$watch(() => this.inputChangeCount, () => {\n        const inputChanges = this.inputChanges;\n        this.inputChanges = {};\n        (<OnChanges>this.component).ngOnChanges(inputChanges);\n      });\n    }\n    this.componentScope.$watch(() => this.changeDetector && this.changeDetector.detectChanges());\n  }\n\n  setupOutputs() {\n    const attrs = this.attrs;\n    const outputs = this.info.outputs || [];\n    for (let j = 0; j < outputs.length; j++) {\n      const output = new PropertyBinding(outputs[j]);\n      let expr: any /** TODO #9100 */ = null;\n      let assignExpr = false;\n\n      const bindonAttr =\n          output.bindonAttr ? output.bindonAttr.substring(0, output.bindonAttr.length - 6) : null;\n      const bracketParenAttr = output.bracketParenAttr ?\n          `[(${output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8)})]` :\n          null;\n\n      if (attrs.hasOwnProperty(output.onAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[output.onAttr];\n      } else if (attrs.hasOwnProperty(output.parenAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[output.parenAttr];\n      } else if (attrs.hasOwnProperty(bindonAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[bindonAttr];\n        assignExpr = true;\n      } else if (attrs.hasOwnProperty(bracketParenAttr)) {\n        expr = (attrs as any /** TODO #9100 */)[bracketParenAttr];\n        assignExpr = true;\n      }\n\n      if (expr != null && assignExpr != null) {\n        const getter = this.$parse(expr);\n        const setter = getter.assign;\n        if (assignExpr && !setter) {\n          throw new Error(`Expression '${expr}' is not assignable!`);\n        }\n        const emitter = this.component[output.prop] as EventEmitter<any>;\n        if (emitter) {\n          emitter.subscribe({\n            next: assignExpr ?\n                ((setter: any) => (v: any /** TODO #9100 */) => setter(this.scope, v))(setter) :\n                ((getter: any) => (v: any /** TODO #9100 */) =>\n                     getter(this.scope, {$event: v}))(getter)\n          });\n        } else {\n          throw new Error(\n              `Missing emitter '${output.prop}' on component '${getComponentName(this.info.component)}'!`);\n        }\n      }\n    }\n  }\n\n  registerCleanup() {\n    this.element.bind('$destroy', () => {\n      this.componentScope.$destroy();\n      this.componentRef.destroy();\n    });\n  }\n\n  getInjector(): Injector { return this.componentRef && this.componentRef.injector; }\n\n  private updateInput(prop: string, prevValue: any, currValue: any) {\n    if (this.inputChanges) {\n      this.inputChangeCount++;\n      this.inputChanges[prop] = new SimpleChange(prevValue, currValue, prevValue === currValue);\n    }\n\n    this.component[prop] = currValue;\n  }\n\n  groupProjectableNodes() {\n    const ngContentSelectorHelper =\n        this.parentInjector.get(NgContentSelectorHelper) as NgContentSelectorHelper;\n    const ngContentSelectors = ngContentSelectorHelper.getNgContentSelectors(this.info);\n\n    if (!ngContentSelectors) {\n      throw new Error('Expecting ngContentSelectors for: ' + getComponentName(this.info.component));\n    }\n\n    return this._groupNodesBySelector(ngContentSelectors, this.element.contents());\n  }\n\n  /**\n   * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n   */\n  private _groupNodesBySelector(ngContentSelectors: string[], nodes: Node[]): Node[][] {\n    const projectableNodes: Node[][] = [];\n    let matcher = new SelectorMatcher();\n    let wildcardNgContentIndex: number;\n\n    for (let i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n      projectableNodes[i] = [];\n\n      const selector = ngContentSelectors[i];\n      if (selector === '*') {\n        wildcardNgContentIndex = i;\n      } else {\n        matcher.addSelectables(CssSelector.parse(selector), i);\n      }\n    }\n\n    for (let j = 0, jj = nodes.length; j < jj; ++j) {\n      const ngContentIndices: number[] = [];\n      const node = nodes[j];\n      const selector =\n          createElementCssSelector(node.nodeName.toLowerCase(), getAttributesAsArray(node));\n\n      matcher.match(selector, (_, index) => ngContentIndices.push(index));\n      ngContentIndices.sort();\n\n      if (wildcardNgContentIndex !== undefined) {\n        ngContentIndices.push(wildcardNgContentIndex);\n      }\n\n      if (ngContentIndices.length) {\n        projectableNodes[ngContentIndices[0]].push(node);\n      }\n    }\n\n    return projectableNodes;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactory, ComponentFactoryResolver, Injector, Type} from '@angular/core';\n\nimport * as angular from './angular1';\nimport {$COMPILE, $INJECTOR, $PARSE, INJECTOR_KEY, REQUIRE_INJECTOR, REQUIRE_NG_MODEL} from './constants';\nimport {DowngradeComponentAdapter} from './downgrade_component_adapter';\nimport {NgContentSelectorHelper} from './ng_content_selector_helper';\nimport {controllerKey, getComponentName} from './util';\n\nlet downgradeCount = 0;\n\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows an Angular component to be used from AngularJS.\n *\n * @howToUse\n *\n * Let's assume that you have an Angular component called `ng2Heroes` that needs\n * to be made available in AngularJS templates.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes\"}\n *\n * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n * that will make this Angular component available inside AngularJS templates.\n * The `downgradeComponent()` function returns a factory function that we\n * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes-wrapper\"}\n *\n * In this example you can see that we must provide information about the component being\n * \"downgraded\". This is because once the AoT compiler has run, all metadata about the\n * component has been removed from the code, and so cannot be inferred.\n *\n * We must do the following:\n * * specify the Angular component class that is to be downgraded\n * * specify all inputs and outputs that the AngularJS component expects\n * * specify the selectors used in any `ng-content` elements in the component's template\n *\n * @description\n *\n * A helper function that returns a factory function to be used for registering an\n * AngularJS wrapper directive for \"downgrading\" an Angular component.\n *\n * The parameter contains information about the Component that is being downgraded:\n *\n * * `component: Type<any>`: The type of the Component that will be downgraded\n * * `inputs: string[]`: A collection of strings that specify what inputs the component accepts\n * * `outputs: string[]`: A collection of strings that specify what outputs the component emits\n * * `selectors: string[]`: A collection of strings that specify what selectors are expected on\n *   `ng-content` elements in the template to enable content projection (a.k.a. transclusion in\n *   AngularJS)\n *\n * The `inputs` and `outputs` are strings that map the names of properties to camelCased\n * attribute names. They are of the form `\"prop: attr\"`; or simply `\"propAndAttr\" where the\n * property and attribute have the same identifier.\n *\n * The `selectors` are the values of the `select` attribute of each of the `ng-content` elements\n * that appear in the downgraded component's template.\n * These selectors must be provided in the order that they appear in the template as they are\n * mapped by index to the projected nodes.\n *\n * @experimental\n */\nexport function downgradeComponent(info: /* ComponentInfo */ {\n  component: Type<any>;\n  inputs?: string[];\n  outputs?: string[];\n  selectors?: string[]\n}): any /* angular.IInjectable */ {\n  const idPrefix = `NG2_UPGRADE_${downgradeCount++}_`;\n  let idCount = 0;\n\n  const directiveFactory:\n      angular.IAnnotatedFunction = function(\n                                       $compile: angular.ICompileService,\n                                       $injector: angular.IInjectorService,\n                                       $parse: angular.IParseService): angular.IDirective {\n\n    return {\n      restrict: 'E',\n      terminal: true,\n      require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n      link: (scope: angular.IScope, element: angular.IAugmentedJQuery, attrs: angular.IAttributes,\n             required: any[]) => {\n        // We might have to compile the contents asynchronously, because this might have been\n        // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n        // been compiled.\n\n        const parentInjector: Injector|ParentInjectorPromise =\n            required[0] || $injector.get(INJECTOR_KEY);\n        const ngModel: angular.INgModelController = required[1];\n\n        const downgradeFn = (injector: Injector) => {\n          const componentFactoryResolver: ComponentFactoryResolver =\n              injector.get(ComponentFactoryResolver);\n          const componentFactory: ComponentFactory<any> =\n              componentFactoryResolver.resolveComponentFactory(info.component);\n\n          if (!componentFactory) {\n            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n          }\n\n          const id = idPrefix + (idCount++);\n          const injectorPromise = new ParentInjectorPromise(element);\n          const facade = new DowngradeComponentAdapter(\n              id, info, element, attrs, scope, ngModel, injector, $injector, $compile, $parse,\n              componentFactory);\n\n          const projectableNodes = facade.compileContents();\n          facade.createComponent(projectableNodes);\n          facade.setupInputs();\n          facade.setupOutputs();\n          facade.registerCleanup();\n\n          injectorPromise.resolve(facade.getInjector());\n        };\n\n        if (parentInjector instanceof ParentInjectorPromise) {\n          parentInjector.then(downgradeFn);\n        } else {\n          downgradeFn(parentInjector);\n        }\n      }\n    };\n  };\n\n  // bracket-notation because of closure - see #14441\n  directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n  return directiveFactory;\n}\n\n/**\n * Synchronous promise-like object to wrap parent injectors,\n * to preserve the synchronous nature of Angular 1's $compile.\n */\nclass ParentInjectorPromise {\n  private injector: Injector;\n  private injectorKey: string = controllerKey(INJECTOR_KEY);\n  private callbacks: ((injector: Injector) => any)[] = [];\n\n  constructor(private element: angular.IAugmentedJQuery) {\n    // Store the promise on the element.\n    element.data(this.injectorKey, this);\n  }\n\n  then(callback: (injector: Injector) => any) {\n    if (this.injector) {\n      callback(this.injector);\n    } else {\n      this.callbacks.push(callback);\n    }\n  }\n\n  resolve(injector: Injector) {\n    this.injector = injector;\n\n    // Store the real injector on the element.\n    this.element.data(this.injectorKey, injector);\n\n    // Release the element to prevent memory leaks.\n    this.element = null;\n\n    // Run the queued callbacks.\n    this.callbacks.forEach(callback => callback(injector));\n    this.callbacks.length = 0;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '@angular/core';\nimport {INJECTOR_KEY} from './constants';\n\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allow an Angular service to be accessible from AngularJS.\n *\n * @howToUse\n *\n * First ensure that the service to be downgraded is provided in an {@link NgModule}\n * that will be part of the upgrade application. For example, let's assume we have\n * defined `HeroesService`\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-heroes-service\"}\n *\n * and that we have included this in our upgrade app {@link NgModule}\n *\n * {@example upgrade/static/ts/module.ts region=\"ng2-module\"}\n *\n * Now we can register the `downgradeInjectable` factory function for the service\n * on an AngularJS module.\n *\n * {@example upgrade/static/ts/module.ts region=\"downgrade-ng2-heroes-service\"}\n *\n * Inside an AngularJS component's controller we can get hold of the\n * downgraded service via the name we gave when downgrading.\n *\n * {@example upgrade/static/ts/module.ts region=\"example-app\"}\n *\n * @description\n *\n * Takes a `token` that identifies a service provided from Angular.\n *\n * Returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n * used to register the service on an AngularJS module.\n *\n * The factory function provides access to the Angular service that\n * is identified by the `token` parameter.\n *\n * @experimental\n */\nexport function downgradeInjectable(token: any): Function {\n  const factory = function(i: Injector) { return i.get(token); };\n  (factory as any).$inject = [INJECTOR_KEY];\n\n  return factory;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport type Ng1Token = string;\n\nexport type Ng1Expression = string | Function;\n\nexport interface IAnnotatedFunction extends Function { $inject?: Ng1Token[]; }\n\nexport type IInjectable = (Ng1Token | Function)[] | IAnnotatedFunction;\n\nexport type SingleOrListOrMap<T> = T | T[] | {[key: string]: T};\n\nexport interface IModule {\n  name: string;\n  requires: (string|IInjectable)[];\n  config(fn: IInjectable): IModule;\n  directive(selector: string, factory: IInjectable): IModule;\n  component(selector: string, component: IComponent): IModule;\n  controller(name: string, type: IInjectable): IModule;\n  factory(key: Ng1Token, factoryFn: IInjectable): IModule;\n  value(key: Ng1Token, value: any): IModule;\n  constant(token: Ng1Token, value: any): IModule;\n  run(a: IInjectable): IModule;\n}\nexport interface ICompileService {\n  (element: Element|NodeList|Node[]|string, transclude?: Function): ILinkFn;\n}\nexport interface ILinkFn {\n  (scope: IScope, cloneAttachFn?: ICloneAttachFunction, options?: ILinkFnOptions): IAugmentedJQuery;\n}\nexport interface ILinkFnOptions {\n  parentBoundTranscludeFn?: Function;\n  transcludeControllers?: {[key: string]: any};\n  futureParentElement?: Node;\n}\nexport interface IRootScopeService {\n  $new(isolate?: boolean): IScope;\n  $id: string;\n  $parent: IScope;\n  $root: IScope;\n  $watch(exp: Ng1Expression, fn?: (a1?: any, a2?: any) => void): Function;\n  $on(event: string, fn?: (event?: any, ...args: any[]) => void): Function;\n  $destroy(): any;\n  $apply(exp?: Ng1Expression): any;\n  $digest(): any;\n  $evalAsync(): any;\n  $on(event: string, fn?: (event?: any, ...args: any[]) => void): Function;\n  $$childTail: IScope;\n  $$childHead: IScope;\n  $$nextSibling: IScope;\n  [key: string]: any;\n}\nexport interface IScope extends IRootScopeService {}\n\nexport interface IAngularBootstrapConfig { strictDi?: boolean; }\nexport interface IDirective {\n  compile?: IDirectiveCompileFn;\n  controller?: IController;\n  controllerAs?: string;\n  bindToController?: boolean|{[key: string]: string};\n  link?: IDirectiveLinkFn|IDirectivePrePost;\n  name?: string;\n  priority?: number;\n  replace?: boolean;\n  require?: DirectiveRequireProperty;\n  restrict?: string;\n  scope?: boolean|{[key: string]: string};\n  template?: string|Function;\n  templateUrl?: string|Function;\n  templateNamespace?: string;\n  terminal?: boolean;\n  transclude?: boolean|'element'|{[key: string]: string};\n}\nexport type DirectiveRequireProperty = SingleOrListOrMap<string>;\nexport interface IDirectiveCompileFn {\n  (templateElement: IAugmentedJQuery, templateAttributes: IAttributes,\n   transclude: ITranscludeFunction): IDirectivePrePost;\n}\nexport interface IDirectivePrePost {\n  pre?: IDirectiveLinkFn;\n  post?: IDirectiveLinkFn;\n}\nexport interface IDirectiveLinkFn {\n  (scope: IScope, instanceElement: IAugmentedJQuery, instanceAttributes: IAttributes,\n   controller: any, transclude: ITranscludeFunction): void;\n}\nexport interface IComponent {\n  bindings?: {[key: string]: string};\n  controller?: string|IInjectable;\n  controllerAs?: string;\n  require?: DirectiveRequireProperty;\n  template?: string|Function;\n  templateUrl?: string|Function;\n  transclude?: boolean;\n}\nexport interface IAttributes { $observe(attr: string, fn: (v: string) => void): void; }\nexport interface ITranscludeFunction {\n  // If the scope is provided, then the cloneAttachFn must be as well.\n  (scope: IScope, cloneAttachFn: ICloneAttachFunction): IAugmentedJQuery;\n  // If one argument is provided, then it's assumed to be the cloneAttachFn.\n  (cloneAttachFn?: ICloneAttachFunction): IAugmentedJQuery;\n}\nexport interface ICloneAttachFunction {\n  // Let's hint but not force cloneAttachFn's signature\n  (clonedElement?: IAugmentedJQuery, scope?: IScope): any;\n}\nexport type IAugmentedJQuery = Node[] & {\n  bind?: (name: string, fn: () => void) => void;\n  data?: (name: string, value?: any) => any;\n  text?: () => string;\n  inheritedData?: (name: string, value?: any) => any;\n  contents?: () => IAugmentedJQuery;\n  parent?: () => IAugmentedJQuery;\n  empty?: () => void;\n  append?: (content: IAugmentedJQuery | string) => IAugmentedJQuery;\n  controller?: (name: string) => any;\n  isolateScope?: () => IScope;\n  injector?: () => IInjectorService;\n};\nexport interface IProvider { $get: IInjectable; }\nexport interface IProvideService {\n  provider(token: Ng1Token, provider: IProvider): IProvider;\n  factory(token: Ng1Token, factory: IInjectable): IProvider;\n  service(token: Ng1Token, type: IInjectable): IProvider;\n  value(token: Ng1Token, value: any): IProvider;\n  constant(token: Ng1Token, value: any): void;\n  decorator(token: Ng1Token, factory: IInjectable): void;\n}\nexport interface IParseService { (expression: string): ICompiledExpression; }\nexport interface ICompiledExpression { assign(context: any, value: any): any; }\nexport interface IHttpBackendService {\n  (method: string, url: string, post?: any, callback?: Function, headers?: any, timeout?: number,\n   withCredentials?: boolean): void;\n}\nexport interface ICacheObject {\n  put<T>(key: string, value?: T): T;\n  get(key: string): any;\n}\nexport interface ITemplateCacheService extends ICacheObject {}\nexport interface ITemplateRequestService {\n  (template: string|any /* TrustedResourceUrl */, ignoreRequestError?: boolean): Promise<string>;\n  totalPendingRequests: number;\n}\nexport type IController = string | IInjectable;\nexport interface IControllerService {\n  (controllerConstructor: IController, locals?: any, later?: any, ident?: any): any;\n  (controllerName: string, locals?: any): any;\n}\n\nexport interface IInjectorService {\n  get(key: string): any;\n  has(key: string): boolean;\n}\n\nexport interface ITestabilityService {\n  findBindings(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  findModels(element: Element, expression: string, opt_exactMatch?: boolean): Element[];\n  getLocation(): string;\n  setLocation(url: string): void;\n  whenStable(callback: Function): void;\n}\n\nexport interface INgModelController {\n  $render(): void;\n  $isEmpty(value: any): boolean;\n  $setValidity(validationErrorKey: string, isValid: boolean): void;\n  $setPristine(): void;\n  $setDirty(): void;\n  $setUntouched(): void;\n  $setTouched(): void;\n  $rollbackViewValue(): void;\n  $validate(): void;\n  $commitViewValue(): void;\n  $setViewValue(value: any, trigger: string): void;\n\n  $viewValue: any;\n  $modelValue: any;\n  $parsers: Function[];\n  $formatters: Function[];\n  $validators: {[key: string]: Function};\n  $asyncValidators: {[key: string]: Function};\n  $viewChangeListeners: Function[];\n  $error: Object;\n  $pending: Object;\n  $untouched: boolean;\n  $touched: boolean;\n  $pristine: boolean;\n  $dirty: boolean;\n  $valid: boolean;\n  $invalid: boolean;\n  $name: string;\n}\n\nfunction noNg() {\n  throw new Error('AngularJS v1.x is not loaded!');\n}\n\nlet angular: {\n  bootstrap: (e: Element, modules: (string | IInjectable)[], config: IAngularBootstrapConfig) =>\n                 void,\n  module: (prefix: string, dependencies?: string[]) => IModule,\n  element: (e: Element | string) => IAugmentedJQuery,\n  version: {major: number}, resumeBootstrap?: () => void,\n  getTestability: (e: Element) => ITestabilityService\n} = <any>{\n  bootstrap: noNg,\n  module: noNg,\n  element: noNg,\n  version: noNg,\n  resumeBootstrap: noNg,\n  getTestability: noNg\n};\n\n\ntry {\n  if (window.hasOwnProperty('angular')) {\n    angular = (<any>window).angular;\n  }\n} catch (e) {\n  // ignore in CJS mode.\n}\n\nexport const bootstrap = angular.bootstrap;\nexport const module = angular.module;\nexport const element = angular.element;\nexport const version = angular.version;\nexport const resumeBootstrap = angular.resumeBootstrap;\nexport const getTestability = angular.getTestability;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DoCheck, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges, ɵlooseIdentical as looseIdentical} from '@angular/core';\nimport * as angular from '../common/angular1';\nimport {$COMPILE, $CONTROLLER, $HTTP_BACKEND, $INJECTOR, $SCOPE, $TEMPLATE_CACHE} from '../common/constants';\nimport {controllerKey} from '../common/util';\n\nconst REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\nconst NOT_SUPPORTED: any = 'NOT_SUPPORTED';\nconst INITIAL_VALUE = {\n  __UNINITIALIZED__: true\n};\n\nclass Bindings {\n  twoWayBoundProperties: string[] = [];\n  twoWayBoundLastValues: any[] = [];\n\n  expressionBoundProperties: string[] = [];\n\n  propertyToOutputMap: {[propName: string]: string} = {};\n}\n\ninterface IBindingDestination {\n  [key: string]: any;\n  $onChanges?: (changes: SimpleChanges) => void;\n}\n\ninterface IControllerInstance extends IBindingDestination {\n  $doCheck?: () => void;\n  $onDestroy?: () => void;\n  $onInit?: () => void;\n  $postLink?: () => void;\n}\n\ntype LifecycleHook = '$doCheck' | '$onChanges' | '$onDestroy' | '$onInit' | '$postLink';\n\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows an AngularJS component to be used from Angular.\n *\n * @howToUse\n *\n * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n * to be made available in Angular templates.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng1-hero\"}\n *\n * We must create a {@link Directive} that will make this AngularJS component\n * available inside Angular templates.\n *\n * {@example upgrade/static/ts/module.ts region=\"ng1-hero-wrapper\"}\n *\n * In this example you can see that we must derive from the {@link UpgradeComponent}\n * base class but also provide an {@link Directive `@Directive`} decorator. This is\n * because the AoT compiler requires that this information is statically available at\n * compile time.\n *\n * Note that we must do the following:\n * * specify the directive's selector (`ng1-hero`)\n * * specify all inputs and outputs that the AngularJS component expects\n * * derive from `UpgradeComponent`\n * * call the base class from the constructor, passing\n *   * the AngularJS name of the component (`ng1Hero`)\n *   * the {@link ElementRef} and {@link Injector} for the component wrapper\n *\n * @description\n *\n * A helper class that should be used as a base class for creating Angular directives\n * that wrap AngularJS components that need to be \"upgraded\".\n *\n * @experimental\n */\nexport class UpgradeComponent implements OnInit, OnChanges, DoCheck, OnDestroy {\n  private $injector: angular.IInjectorService;\n  private $compile: angular.ICompileService;\n  private $templateCache: angular.ITemplateCacheService;\n  private $httpBackend: angular.IHttpBackendService;\n  private $controller: angular.IControllerService;\n\n  private element: Element;\n  private $element: angular.IAugmentedJQuery;\n  private $componentScope: angular.IScope;\n\n  private directive: angular.IDirective;\n  private bindings: Bindings;\n\n  private controllerInstance: IControllerInstance;\n  private bindingDestination: IBindingDestination;\n\n  // We will be instantiating the controller in the `ngOnInit` hook, when the first `ngOnChanges`\n  // will have been already triggered. We store the `SimpleChanges` and \"play them back\" later.\n  private pendingChanges: SimpleChanges;\n\n  private unregisterDoCheckWatcher: Function;\n\n  /**\n   * Create a new `UpgradeComponent` instance. You should not normally need to do this.\n   * Instead you should derive a new class from this one and call the super constructor\n   * from the base class.\n   *\n   * {@example upgrade/static/ts/module.ts region=\"ng1-hero-wrapper\" }\n   *\n   * * The `name` parameter should be the name of the AngularJS directive.\n   * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency\n   *   injection into the base class constructor.\n   *\n   * Note that we must manually implement lifecycle hooks that call through to the super class.\n   * This is because, at the moment, the AoT compiler is not able to tell that the\n   * `UpgradeComponent`\n   * already implements them and so does not wire up calls to them at runtime.\n   */\n  constructor(private name: string, private elementRef: ElementRef, private injector: Injector) {\n    this.$injector = injector.get($INJECTOR);\n    this.$compile = this.$injector.get($COMPILE);\n    this.$templateCache = this.$injector.get($TEMPLATE_CACHE);\n    this.$httpBackend = this.$injector.get($HTTP_BACKEND);\n    this.$controller = this.$injector.get($CONTROLLER);\n\n    this.element = elementRef.nativeElement;\n    this.$element = angular.element(this.element);\n\n    this.directive = this.getDirective(name);\n    this.bindings = this.initializeBindings(this.directive);\n\n    // We ask for the AngularJS scope from the Angular injector, since\n    // we will put the new component scope onto the new injector for each component\n    const $parentScope = injector.get($SCOPE);\n    // QUESTION 1: Should we create an isolated scope if the scope is only true?\n    // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?\n    this.$componentScope = $parentScope.$new(!!this.directive.scope);\n\n    this.initializeOutputs();\n  }\n\n  ngOnInit() {\n    // Collect contents, insert and compile template\n    const contentChildNodes = this.extractChildNodes(this.element);\n    const linkFn = this.compileTemplate(this.directive);\n\n    // Instantiate controller\n    const controllerType = this.directive.controller;\n    const bindToController = this.directive.bindToController;\n    if (controllerType) {\n      this.controllerInstance = this.buildController(\n          controllerType, this.$componentScope, this.$element, this.directive.controllerAs);\n    } else if (bindToController) {\n      throw new Error(\n          `Upgraded directive '${this.directive.name}' specifies 'bindToController' but no controller.`);\n    }\n\n    // Set up outputs\n    this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;\n    this.bindOutputs();\n\n    // Require other controllers\n    const directiveRequire = this.getDirectiveRequire(this.directive);\n    const requiredControllers =\n        this.resolveRequire(this.directive.name, this.$element, directiveRequire);\n\n    if (this.directive.bindToController && isMap(directiveRequire)) {\n      const requiredControllersMap = requiredControllers as{[key: string]: IControllerInstance};\n      Object.keys(requiredControllersMap).forEach(key => {\n        this.controllerInstance[key] = requiredControllersMap[key];\n      });\n    }\n\n    // Hook: $onChanges\n    if (this.pendingChanges) {\n      this.forwardChanges(this.pendingChanges);\n      this.pendingChanges = null;\n    }\n\n    // Hook: $onInit\n    if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n      this.controllerInstance.$onInit();\n    }\n\n    // Hook: $doCheck\n    if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n      const callDoCheck = () => this.controllerInstance.$doCheck();\n\n      this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);\n      callDoCheck();\n    }\n\n    // Linking\n    const link = this.directive.link;\n    const preLink = (typeof link == 'object') && (link as angular.IDirectivePrePost).pre;\n    const postLink = (typeof link == 'object') ? (link as angular.IDirectivePrePost).post : link;\n    const attrs: angular.IAttributes = NOT_SUPPORTED;\n    const transcludeFn: angular.ITranscludeFunction = NOT_SUPPORTED;\n    if (preLink) {\n      preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    const attachChildNodes: angular.ILinkFn = (scope, cloneAttach) =>\n        cloneAttach(contentChildNodes);\n    linkFn(this.$componentScope, null, {parentBoundTranscludeFn: attachChildNodes});\n\n    if (postLink) {\n      postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n    }\n\n    // Hook: $postLink\n    if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n      this.controllerInstance.$postLink();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (!this.bindingDestination) {\n      this.pendingChanges = changes;\n    } else {\n      this.forwardChanges(changes);\n    }\n  }\n\n  ngDoCheck() {\n    const twoWayBoundProperties = this.bindings.twoWayBoundProperties;\n    const twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;\n    const propertyToOutputMap = this.bindings.propertyToOutputMap;\n\n    twoWayBoundProperties.forEach((propName, idx) => {\n      const newValue = this.bindingDestination[propName];\n      const oldValue = twoWayBoundLastValues[idx];\n\n      if (!looseIdentical(newValue, oldValue)) {\n        const outputName = propertyToOutputMap[propName];\n        const eventEmitter: EventEmitter<any> = (this as any)[outputName];\n\n        eventEmitter.emit(newValue);\n        twoWayBoundLastValues[idx] = newValue;\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    if (isFunction(this.unregisterDoCheckWatcher)) {\n      this.unregisterDoCheckWatcher();\n    }\n    if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n      this.controllerInstance.$onDestroy();\n    }\n    this.$componentScope.$destroy();\n  }\n\n  private getDirective(name: string): angular.IDirective {\n    const directives: angular.IDirective[] = this.$injector.get(name + 'Directive');\n    if (directives.length > 1) {\n      throw new Error('Only support single directive definition for: ' + this.name);\n    }\n    const directive = directives[0];\n    if (directive.replace) this.notSupported('replace');\n    if (directive.terminal) this.notSupported('terminal');\n    if (directive.compile) this.notSupported('compile');\n    const link = directive.link;\n    // QUESTION: why not support link.post?\n    if (typeof link == 'object') {\n      if ((<angular.IDirectivePrePost>link).post) this.notSupported('link.post');\n    }\n    return directive;\n  }\n\n  private getDirectiveRequire(directive: angular.IDirective): angular.DirectiveRequireProperty {\n    const require = directive.require || (directive.controller && directive.name);\n\n    if (isMap(require)) {\n      Object.keys(require).forEach(key => {\n        const value = require[key];\n        const match = value.match(REQUIRE_PREFIX_RE);\n        const name = value.substring(match[0].length);\n\n        if (!name) {\n          require[key] = match[0] + key;\n        }\n      });\n    }\n\n    return require;\n  }\n\n  private initializeBindings(directive: angular.IDirective) {\n    const btcIsObject = typeof directive.bindToController === 'object';\n    if (btcIsObject && Object.keys(directive.scope).length) {\n      throw new Error(\n          `Binding definitions on scope and controller at the same time is not supported.`);\n    }\n\n    const context = (btcIsObject) ? directive.bindToController : directive.scope;\n    const bindings = new Bindings();\n\n    if (typeof context == 'object') {\n      Object.keys(context).forEach(propName => {\n        const definition = context[propName];\n        const bindingType = definition.charAt(0);\n\n        // QUESTION: What about `=*`? Ignore? Throw? Support?\n\n        switch (bindingType) {\n          case '@':\n          case '<':\n            // We don't need to do anything special. They will be defined as inputs on the\n            // upgraded component facade and the change propagation will be handled by\n            // `ngOnChanges()`.\n            break;\n          case '=':\n            bindings.twoWayBoundProperties.push(propName);\n            bindings.twoWayBoundLastValues.push(INITIAL_VALUE);\n            bindings.propertyToOutputMap[propName] = propName + 'Change';\n            break;\n          case '&':\n            bindings.expressionBoundProperties.push(propName);\n            bindings.propertyToOutputMap[propName] = propName;\n            break;\n          default:\n            let json = JSON.stringify(context);\n            throw new Error(\n                `Unexpected mapping '${bindingType}' in '${json}' in '${this.name}' directive.`);\n        }\n      });\n    }\n\n    return bindings;\n  }\n\n  private extractChildNodes(element: Element): Node[] {\n    const childNodes: Node[] = [];\n    let childNode: Node;\n\n    while (childNode = element.firstChild) {\n      element.removeChild(childNode);\n      childNodes.push(childNode);\n    }\n\n    return childNodes;\n  }\n\n  private compileTemplate(directive: angular.IDirective): angular.ILinkFn {\n    if (this.directive.template !== undefined) {\n      return this.compileHtml(getOrCall(this.directive.template));\n    } else if (this.directive.templateUrl) {\n      const url = getOrCall(this.directive.templateUrl);\n      const html = this.$templateCache.get(url) as string;\n      if (html !== undefined) {\n        return this.compileHtml(html);\n      } else {\n        throw new Error('loading directive templates asynchronously is not supported');\n        // return new Promise((resolve, reject) => {\n        //   this.$httpBackend('GET', url, null, (status: number, response: string) => {\n        //     if (status == 200) {\n        //       resolve(this.compileHtml(this.$templateCache.put(url, response)));\n        //     } else {\n        //       reject(`GET component template from '${url}' returned '${status}: ${response}'`);\n        //     }\n        //   });\n        // });\n      }\n    } else {\n      throw new Error(`Directive '${this.name}' is not a component, it is missing template.`);\n    }\n  }\n\n  private buildController(\n      controllerType: angular.IController, $scope: angular.IScope,\n      $element: angular.IAugmentedJQuery, controllerAs: string) {\n    // TODO: Document that we do not pre-assign bindings on the controller instance\n    // Quoted properties below so that this code can be optimized with Closure Compiler.\n    const locals = {'$scope': $scope, '$element': $element};\n    const controller = this.$controller(controllerType, locals, null, controllerAs);\n    $element.data(controllerKey(this.directive.name), controller);\n    return controller;\n  }\n\n  private resolveRequire(\n      directiveName: string, $element: angular.IAugmentedJQuery,\n      require: angular.DirectiveRequireProperty): angular.SingleOrListOrMap<IControllerInstance> {\n    if (!require) {\n      return null;\n    } else if (Array.isArray(require)) {\n      return require.map(req => this.resolveRequire(directiveName, $element, req));\n    } else if (typeof require === 'object') {\n      const value: {[key: string]: IControllerInstance} = {};\n\n      Object.keys(require).forEach(\n          key => value[key] = this.resolveRequire(directiveName, $element, require[key]));\n\n      return value;\n    } else if (typeof require === 'string') {\n      const match = require.match(REQUIRE_PREFIX_RE);\n      const inheritType = match[1] || match[3];\n\n      const name = require.substring(match[0].length);\n      const isOptional = !!match[2];\n      const searchParents = !!inheritType;\n      const startOnParent = inheritType === '^^';\n\n      const ctrlKey = controllerKey(name);\n\n      if (startOnParent) {\n        $element = $element.parent();\n      }\n\n      const value = searchParents ? $element.inheritedData(ctrlKey) : $element.data(ctrlKey);\n\n      if (!value && !isOptional) {\n        throw new Error(\n            `Unable to find required '${require}' in upgraded directive '${directiveName}'.`);\n      }\n\n      return value;\n    } else {\n      throw new Error(\n          `Unrecognized require syntax on upgraded directive '${directiveName}': ${require}`);\n    }\n  }\n\n  private initializeOutputs() {\n    // Initialize the outputs for `=` and `&` bindings\n    this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)\n        .forEach(propName => {\n          const outputName = this.bindings.propertyToOutputMap[propName];\n          (this as any)[outputName] = new EventEmitter();\n        });\n  }\n\n  private bindOutputs() {\n    // Bind `&` bindings to the corresponding outputs\n    this.bindings.expressionBoundProperties.forEach(propName => {\n      const outputName = this.bindings.propertyToOutputMap[propName];\n      const emitter = (this as any)[outputName];\n\n      this.bindingDestination[propName] = (value: any) => emitter.emit(value);\n    });\n  }\n\n  private forwardChanges(changes: SimpleChanges) {\n    // Forward input changes to `bindingDestination`\n    Object.keys(changes).forEach(\n        propName => this.bindingDestination[propName] = changes[propName].currentValue);\n\n    if (isFunction(this.bindingDestination.$onChanges)) {\n      this.bindingDestination.$onChanges(changes);\n    }\n  }\n\n  private notSupported(feature: string) {\n    throw new Error(\n        `Upgraded directive '${this.name}' contains unsupported feature: '${feature}'.`);\n  }\n\n  private compileHtml(html: string): angular.ILinkFn {\n    this.element.innerHTML = html;\n    return this.$compile(this.element.childNodes);\n  }\n}\n\n\nfunction getOrCall<T>(property: Function | T): T {\n  return isFunction(property) ? property() : property;\n}\n\nfunction isFunction(value: any): value is Function {\n  return typeof value === 'function';\n}\n\n// NOTE: Only works for `typeof T !== 'object'`.\nfunction isMap<T>(value: angular.SingleOrListOrMap<T>): value is {[key: string]: T} {\n  return value && !Array.isArray(value) && typeof value === 'object';\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as angular from '../common/angular1';\n\n// We have to do a little dance to get the ng1 injector into the module injector.\n// We store the ng1 injector so that the provider in the module injector can access it\n// Then we \"get\" the ng1 injector from the module injector, which triggers the provider to read\n// the stored injector and release the reference to it.\nlet tempInjectorRef: angular.IInjectorService;\nexport function setTempInjectorRef(injector: angular.IInjectorService) {\n  tempInjectorRef = injector;\n}\nexport function injectorFactory() {\n  const injector: angular.IInjectorService = tempInjectorRef;\n  tempInjectorRef = null;  // clear the value to prevent memory leaks\n  return injector;\n}\n\nexport function rootScopeFactory(i: angular.IInjectorService) {\n  return i.get('$rootScope');\n}\n\nexport function compileFactory(i: angular.IInjectorService) {\n  return i.get('$compile');\n}\n\nexport function parseFactory(i: angular.IInjectorService) {\n  return i.get('$parse');\n}\n\nexport const angular1Providers = [\n  // We must use exported named functions for the ng2 factories to keep the compiler happy:\n  // > Metadata collected contains an error that will be reported at runtime:\n  // >   Function calls are not supported.\n  // >   Consider replacing the function or lambda with a reference to an exported function\n  {provide: '$injector', useFactory: injectorFactory},\n  {provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector']},\n  {provide: '$compile', useFactory: compileFactory, deps: ['$injector']},\n  {provide: '$parse', useFactory: parseFactory, deps: ['$injector']}\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector, NgModule, NgZone, Testability} from '@angular/core';\n\nimport * as angular from '../common/angular1';\nimport {$$TESTABILITY, $DELEGATE, $INJECTOR, $PROVIDE, $ROOT_SCOPE, INJECTOR_KEY, UPGRADE_MODULE_NAME} from '../common/constants';\nimport {NgContentSelectorHelper} from '../common/ng_content_selector_helper';\nimport {controllerKey} from '../common/util';\n\nimport {angular1Providers, setTempInjectorRef} from './angular1_providers';\n\n\n\n/**\n * @whatItDoes\n *\n * *Part of the [upgrade/static](/docs/ts/latest/api/#!?query=upgrade%2Fstatic)\n * library for hybrid upgrade apps that support AoT compilation*\n *\n * Allows AngularJS and Angular components to be used together inside a hybrid upgrade\n * application, which supports AoT compilation.\n *\n * Specifically, the classes and functions in the `upgrade/static` module allow the following:\n * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so\n *    that it can be used in an Angular template. See {@link UpgradeComponent}.\n * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so\n *    that it can be used in an AngularJS template. See {@link downgradeComponent}.\n * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS\n *    service so that it can be injected into an Angular context. See\n *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.\n * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable\n *    so that it can be injected into an AngularJS context. See {@link downgradeInjectable}.\n * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n *    coexisting in a single application. See the\n *    {@link UpgradeModule#example example} below.\n *\n * ## Mental Model\n *\n * When reasoning about how a hybrid application works it is useful to have a mental model which\n * describes what is happening and explains what is happening at the lowest level.\n *\n * 1. There are two independent frameworks running in a single application, each framework treats\n *    the other as a black box.\n * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n *    instantiated the element is the owner. Each framework only updates/interacts with its own\n *    DOM elements and ignores others.\n * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of\n *    where they are instantiated.\n * 4. Angular components always execute inside the Angular framework codebase regardless of\n *    where they are instantiated.\n * 5. An AngularJS component can be \"upgraded\"\" to an Angular component. This is achieved by\n *    defining an Angular directive, which bootstraps the AngularJS component at its location\n *    in the DOM. See {@link UpgradeComponent}.\n * 6. An Angular component can be \"downgraded\"\" to an AngularJS component. This is achieved by\n *    defining an AngularJS directive, which bootstraps the Angular component at its location\n *    in the DOM. See {@link downgradeComponent}.\n * 7. Whenever an \"upgraded\"/\"downgraded\" component is instantiated the host element is owned by\n *    the framework doing the instantiation. The other framework then instantiates and owns the\n *    view for that component.\n *    a. This implies that the component bindings will always follow the semantics of the\n *       instantiation framework.\n *    b. The DOM attributes are parsed by the framework that owns the current template. So\n * attributes\n *       in AngularJS templates must use kebab-case, while AngularJS templates must use camelCase.\n *    c. However the template binding syntax will always use the Angular style, e.g. square\n *       brackets (`[...]`) for property binding.\n * 8. AngularJS is always bootstrapped first and owns the root component.\n * 9. The new application is running in an Angular zone, and therefore it no longer needs calls\n * to\n *    `$apply()`.\n *\n * @howToUse\n *\n * `import {UpgradeModule} from '@angular/upgrade/static';`\n *\n * ## Example\n * Import the {@link UpgradeModule} into your top level {@link NgModule Angular `NgModule`}.\n *\n * {@example upgrade/static/ts/module.ts region='ng2-module'}\n *\n * Then bootstrap the hybrid upgrade app's module, get hold of the {@link UpgradeModule} instance\n * and use it to bootstrap the top level [AngularJS\n * module](https://docs.angularjs.org/api/ng/type/angular.Module).\n *\n * {@example upgrade/static/ts/module.ts region='bootstrap'}\n *\n *\n * ## Upgrading an AngularJS service\n *\n * There is no specific API for upgrading an AngularJS service. Instead you should just follow the\n * following recipe:\n *\n * Let's say you have an AngularJS service:\n *\n * {@example upgrade/static/ts/module.ts region=\"ng1-title-case-service\"}\n *\n * Then you should define an Angular provider to be included in your {@link NgModule} `providers`\n * property.\n *\n * {@example upgrade/static/ts/module.ts region=\"upgrade-ng1-service\"}\n *\n * Then you can use the \"upgraded\" AngularJS service by injecting it into an Angular component\n * or service.\n *\n * {@example upgrade/static/ts/module.ts region=\"use-ng1-upgraded-service\"}\n *\n * @description\n *\n * This class is an `NgModule`, which you import to provide AngularJS core services,\n * and has an instance method used to bootstrap the hybrid upgrade application.\n *\n * ## Core AngularJS services\n * Importing this {@link NgModule} will add providers for the core\n * [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.\n *\n * ## Bootstrap\n * The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}\n * method, which you use to bootstrap the top level AngularJS module onto an element in the\n * DOM for the hybrid upgrade app.\n *\n * It also contains properties to access the {@link UpgradeModule#injector root injector}, the\n * bootstrap {@link NgZone} and the\n * [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).\n *\n * @experimental\n */\n\nexport class UpgradeModule {\n  /**\n   * The AngularJS `$injector` for the upgrade application.\n   */\n  public $injector: any /*angular.IInjectorService*/;\n\n  constructor(\n      /** The root {@link Injector} for the upgrade application. */\n      public injector: Injector,\n      /** The bootstrap zone for the upgrade application */\n      public ngZone: NgZone) {}\n\n  /**\n   * Bootstrap an AngularJS application from this NgModule\n   * @param element the element on which to bootstrap the AngularJS application\n   * @param [modules] the AngularJS modules to bootstrap for this application\n   * @param [config] optional extra AngularJS bootstrap configuration\n   */\n  bootstrap(\n      element: Element, modules: string[] = [], config?: any /*angular.IAngularBootstrapConfig*/) {\n    const INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';\n\n    // Create an ng1 module to bootstrap\n    const initModule =\n        angular\n            .module(INIT_MODULE_NAME, [])\n\n            .value(INJECTOR_KEY, this.injector)\n\n            .config([\n              $PROVIDE, $INJECTOR,\n              ($provide: angular.IProvideService, $injector: angular.IInjectorService) => {\n                if ($injector.has($$TESTABILITY)) {\n                  $provide.decorator($$TESTABILITY, [\n                    $DELEGATE,\n                    (testabilityDelegate: angular.ITestabilityService) => {\n                      const originalWhenStable: Function = testabilityDelegate.whenStable;\n                      const injector = this.injector;\n                      // Cannot use arrow function below because we need the context\n                      const newWhenStable = function(callback: Function) {\n                        originalWhenStable.call(testabilityDelegate, function() {\n                          const ng2Testability: Testability = injector.get(Testability);\n                          if (ng2Testability.isStable()) {\n                            callback();\n                          } else {\n                            ng2Testability.whenStable(\n                                newWhenStable.bind(testabilityDelegate, callback));\n                          }\n                        });\n                      };\n\n                      testabilityDelegate.whenStable = newWhenStable;\n                      return testabilityDelegate;\n                    }\n                  ]);\n                }\n              }\n            ])\n\n            .run([\n              $INJECTOR,\n              ($injector: angular.IInjectorService) => {\n                this.$injector = $injector;\n\n                // Initialize the ng1 $injector provider\n                setTempInjectorRef($injector);\n                this.injector.get($INJECTOR);\n\n                // Put the injector on the DOM, so that it can be \"required\"\n                angular.element(element).data(controllerKey(INJECTOR_KEY), this.injector);\n\n                // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles\n                // We need to do this in the next tick so that we don't prevent the bootup\n                // stabilizing\n                setTimeout(() => {\n                  const $rootScope = $injector.get('$rootScope');\n                  const subscription =\n                      this.ngZone.onMicrotaskEmpty.subscribe(() => $rootScope.$digest());\n                  $rootScope.$on('$destroy', () => { subscription.unsubscribe(); });\n                }, 0);\n              }\n            ]);\n\n    const upgradeModule = angular.module(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));\n\n    // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n    const windowAngular = (window as any /** TODO #???? */)['angular'];\n    windowAngular.resumeBootstrap = undefined;\n\n    // Bootstrap the AngularJS application inside our zone\n    this.ngZone.run(() => { angular.bootstrap(element, [upgradeModule.name], config); });\n\n    // Patch resumeBootstrap() to run inside the ngZone\n    if (windowAngular.resumeBootstrap) {\n      const originalResumeBootstrap: () => void = windowAngular.resumeBootstrap;\n      const ngZone = this.ngZone;\n      windowAngular.resumeBootstrap = function() {\n        let args = arguments;\n        windowAngular.resumeBootstrap = originalResumeBootstrap;\n        ngZone.run(() => { windowAngular.resumeBootstrap.apply(this, args); });\n      };\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{providers: [angular1Providers, NgContentSelectorHelper]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n{type: NgZone, },\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["TagContentType","$COMPILE","$CONTROLLER","$DELEGATE","$HTTP_BACKEND","$PARSE","HtmlTagDefinition","_a","_b","closedByChildren","requiredParents","implicitNamespacePrefix","_c","contentType","PARSABLE_DATA","_d","closedByParent","_e","isVoid","_f","ignoreFirstLf","_this","this","canSelfClose","length","forEach","tagName","parentToAdd","prototype","requireExtraParent","currentParent","isParentTemplate","lcParent","isClosedByChild","name","toLowerCase","TAG_DEFINITIONS","base","meta","area","embed","link","img","input","param","hr","br","source","track","wbr","p","thead","tbody","tfoot","tr","td","th","col","svg","math","li","dt","dd","rb","rt","rtc","rp","optgroup","option","pre","style","RAW_TEXT","script","title","ESCAPABLE_RAW_TEXT","_DEFAULT_TAG_DEFINITION","CssSelector","element","classNames","attrs","notSelectors","parse","selector","match","results","_addResult","res","cssSel","push","cssSelector","current","inNot","_SELECTOR_REGEXP","lastIndex","exec","Error","setElement","addClassName","addAttribute","isElementSelector","hasElementSelector","getMatchingElementTemplate","classAttr","join","i","attrName","attrValue","getHtmlTagDefinition","value","toString","klass","name_1","notSelector","SelectorMatcher","_elementMap","Map","_elementPartialMap","_classMap","_classPartialMap","_attrValueMap","_attrValuePartialMap","_listContexts","createNotMatcher","notMatcher","addSelectables","_addSelectable","callbackCtxt","listContext","matcher","selectable","SelectorContext","isTerminal","_addTerminal","_addPartial","className","name_2","terminalMap","terminalValuesMap","get","set","partialMap","partialValuesMap","map","terminalList","matchedCallback","result","alreadyMatched","_matchTerminal","_matchPartial","name_3","selectables","starSelectables","concat","finalize","nestedSelector","SelectorListContext","selectors","cbContext","callback","CLASS_ATTR","PropertyBinding","binding","parseBinding","parts","split","prop","trim","attr","parenAttr","NgContentSelectorHelper","getNgContentSelectors","info","INITIAL_VALUE","__UNINITIALIZED__","DowngradeComponentAdapter","id","scope","ngModel","parentInjector","$injector","$compile","$parse","componentFactory","inputChangeCount","inputChanges","componentRef","component","changeDetector","componentScope","$new","compileContents","compiledProjectableNodes","projectableNodes","groupProjectableNodes","linkFns","nodes","empty","linkFn","clone","append","createComponent","childInjector","_angular_core","ReflectiveInjector","resolveAndCreate","provide","$SCOPE","useValue","create","changeDetectorRef","instance","hookupNgModel","setupInputs","inputs","expr","hasOwnProperty","observeFn","prevValue","currValue","updateInput","$observe","bindAttr","bracketAttr","bindonAttr","bracketParenAttr","$watch","watchFn","ngOnChanges","detectChanges","setupOutputs","outputs","j","output","assignExpr","substring","onAttr","getter","setter","assign","emitter","getComponentName","subscribe","next","v","$event","registerCleanup","bind","$destroy","destroy","getInjector","injector","SimpleChange","ngContentSelectorHelper","ngContentSelectors","_groupNodesBySelector","contents","wildcardNgContentIndex","ii","_loop_1","jj","ngContentIndices","node","createElementCssSelector","nodeName","getAttributesAsArray","_","index","sort","undefined","ParentInjectorPromise","injectorKey","controllerKey","INJECTOR_KEY","callbacks","data","resolve","angular","bootstrap","noNg","module","version","resumeBootstrap","window","e","tempInjectorRef","module$1","REQUIRE_PREFIX_RE","NOT_SUPPORTED","INITIAL_VALUE$1","UpgradeComponent","elementRef","$controller","nativeElement","$element","directive","getDirective","bindings","initializeBindings","$parentScope","$componentScope","initializeOutputs","ngOnInit","contentChildNodes","extractChildNodes","controllerType","controller","controllerInstance","buildController","controllerAs","bindToController","bindingDestination","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","isMap","Object","keys","requiredControllersMap_1","key","pendingChanges","forwardChanges","isFunction","$onInit","$doCheck","callDoCheck","unregisterDoCheckWatcher","$parent","preLink","postLink","post","transcludeFn","attachChildNodes","cloneAttach","parentBoundTranscludeFn","$postLink","changes","ngDoCheck","twoWayBoundProperties","twoWayBoundLastValues","propertyToOutputMap","propName","idx","newValue","oldValue","ɵlooseIdentical","outputName","eventEmitter","emit","ngOnDestroy","$onDestroy","directives","replace","notSupported","terminal","compile","require","btcIsObject","context","definition","bindingType","charAt","expressionBoundProperties","json","JSON","stringify","childNode","childNodes","firstChild","removeChild","compileTemplate","template","compileHtml","getOrCall","templateUrl","url","html","$templateCache","$scope","locals","directiveName","Array","isArray","req","value_1","inheritType","isOptional","searchParents","startOnParent","ctrlKey","parent","inheritedData","EventEmitter","bindOutputs","currentValue","$onChanges","feature","innerHTML","UpgradeModule","element$$","modules","config","INIT_MODULE_NAME","UPGRADE_MODULE_NAME","upgradeModule","$PROVIDE","$INJECTOR","$provide","has","$$TESTABILITY","decorator","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","call","ng2Testability","Testability","isStable","setTempInjectorRef","setTimeout","subscription","ngZone","onMicrotaskEmpty","$rootScope","$digest","windowAngular","run","originalResumeBootstrap_1","ngZone_1","args","arguments","apply","property","injectorFactory","parseFactory","elementName","attributes","elNameNoNs","splitNsName","attrNameNoNs","classes","splitClasses","colonIndex","indexOf","asArray","attrLen","registerOnChange","supportsNgModel","$render","writeValue","$viewValue","$setViewValue","idCount","directiveFactory","restrict","REQUIRE_INJECTOR","REQUIRE_NG_MODEL","required","downgradeFn","componentFactoryResolver","ComponentFactoryResolver","resolveComponentFactory","idPrefix","injectorPromise","facade","then","downgradeInjectable","token"],"mappings":"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"}
{"version":3,"sources":["packages/upgrade/upgrade-static.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","upgrade","static","core","platformBrowser","this","noNg","Error","noNgElement","cleanData","angular","bootstrap","element","version","undefined","resumeBootstrap","getTestability","window","hasOwnProperty","_a","setAngularJSGlobal","getAngularJSGlobal","module$1","prefix","dependencies","e","__read","o","n","m","Symbol","iterator","r","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","nodes","$COMPILE","$CONTROLLER","$INJECTOR","$SCOPE","DOWNGRADED_MODULE_COUNT_KEY","INJECTOR_KEY","UPGRADE_APP_TYPE_KEY","REQUIRE_INJECTOR","PropertyBinding","prop","attr","parseBinding","prototype","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","bindAttr","bindonAttr","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","controllerKey","name","getTypeName","type","overriddenName","toString","split","getDowngradedModuleCount","$injector","has","get","getUpgradeAppType","isFunction","validateInjectionKey","downgradedModule","injectionKey","attemptedAction","upgradeAppType","downgradedModuleCount","_matches","INITIAL_VALUE","__UNINITIALIZED__","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$compile","$parse","componentFactory","wrapCallback","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compileContents","_this","compiledProjectableNodes","linkFns","groupProjectableNodes","map","empty","forEach","linkFn","clone","append","createComponent","projectableNodes","childInjector","Injector","create","providers","provide","useValue","parent","componentRef","viewChangeDetector","injector","ChangeDetectorRef","changeDetector","changeDetectorRef","component","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","hookupNgModel","supportsNgModel","writeValue","registerOnChange","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","setupInputs","manuallyAttachView","propagateDigest","inputs","_loop_1","prevValue","input","propName","templateName","expr","observeFn_1","currValue","strictEquals","val1","val2","updateInput","$observe","unwatch_1","this_1","$watch","watchFn","detectChanges","componentType","ngOnChanges","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","setupOutputs","outputs","j","output","substring","subscribeToOutput","isAssignment","getter","setter","assign","emitter","subscribe","v","$event","registerCleanup","destroyComponentRef","destroy","destroyed","on","$destroy","$on","unregisterApplication","getInjector","SimpleChange","groupNodesBySelector","ngContentSelectors","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","contents","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","ParentInjectorPromise","injectorKey","callbacks","data","then","callback","resolve","isThenable","obj","VERSION","Version","tempInjectorRef","setTempInjectorRef","injectorFactory","rootScopeFactory","compileFactory","parseFactory","angular1Providers","useFactory","deps","NgAdapterInjector","modInjector","token","notFoundValue","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","moduleUid","identity","x","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","link","notSupported","replace","terminal","getTemplate","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","Promise","reject","$httpBackend","status","response","put","buildController","controllerType","$scope","controller","controllerAs","compileTemplate","compileHtml","onDestroy","controllerInstance","$onDestroy","querySelectorAll","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","attachChildrenFn","cloneAttachFn","$template","slots_1","Object","slotMap_1","filledSlots_1","keys","slotName","optional","directiveNormalize","_","letter","nodeName","toLowerCase","filter","cloneAttach","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","isMap","requiredControllersMap_1","key","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","Array","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","inheritedData","property","feature","INITIAL_VALUE$1","Bindings","twoWayBoundProperties","twoWayBoundLastValues","expressionBoundProperties","propertyToOutputMap","UpgradeComponent","helper","bindings","initializeBindings","$parentScope","$componentScope","initializeOutputs","ngOnInit","attachChildNodes","bindingDestination","bindOutputs","pendingChanges","forwardChanges","$onInit","$doCheck","callDoCheck","unregisterDoCheckWatcher","$parent","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ngDoCheck","idx","newValue","ɵlooseIdentical","emit","ngOnDestroy","btcIsObject","context","bindingType","json","JSON","stringify","EventEmitter","currentValue","$onChanges","UpgradeModule","ngZone","element$$1","modules","config","INIT_MODULE_NAME","UPGRADE_MODULE_NAME","upgradeModule","constant","$provide","decorator","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","intervalDelegate","wrappedInterval","fn","delay","count","invokeApply","pass","_i","runOutsideAngular","apply","args","setTimeout","run","cancel","$rootScope","subscription","onMicrotaskEmpty","$digest","unsubscribe","windowAngular","originalResumeBootstrap_1","ngZone_1","__decorate","decorators","target","desc","d","c","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","NgModule","__metadata","metadataKey","metadataValue","metadata","NgZone","ɵangular_packages_upgrade_static_static_e","ɵangular_packages_upgrade_static_static_c","ɵangular_packages_upgrade_static_static_a","ɵangular_packages_upgrade_static_static_d","ɵangular_packages_upgrade_static_static_b","getAngularLib","setAngularLib","downgradeComponent","info","directiveFactory","isNgUpgradeLite","cb","isInAngularZone","hasMultipleDowngradedModules","restrict","required","moduleInjector","ranAsync","lazyModuleRefKey","lazyModuleRef","promise","finalParentInjector","finalModuleInjector","doDowngrade","ComponentFactoryResolver","resolveComponentFactory","injectorPromise","facade","$evalAsync","downgradeFn","pInjector","mInjector","all","_b","downgradeInjectable","injectableName","String","downgradeModule","moduleFactoryOrBootstrapFn","lazyModuleName","lazyInjectorKey","bootstrapFn","extraProviders","bootstrapModuleFactory","result","ref"],"mappings":"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","sourcesContent":["/**\n * @license Angular v7.2.4\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser')) :\n    typeof define === 'function' && define.amd ? define('@angular/upgrade/static', ['exports', '@angular/core', '@angular/platform-browser'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.upgrade = global.ng.upgrade || {}, global.ng.upgrade.static = {}), global.ng.core, global.ng.platformBrowser));\n}(this, function (exports, core, platformBrowser) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noNg() {\n        throw new Error('AngularJS v1.x is not loaded!');\n    }\n    var ɵ0 = function () { return noNg(); };\n    var noNgElement = (ɵ0);\n    noNgElement.cleanData = noNg;\n    var angular = {\n        bootstrap: noNg,\n        module: noNg,\n        element: noNgElement,\n        version: undefined,\n        resumeBootstrap: noNg,\n        getTestability: noNg\n    };\n    try {\n        if (window.hasOwnProperty('angular')) {\n            angular = window.angular;\n        }\n    }\n    catch (_a) {\n        // ignore in CJS mode.\n    }\n    /**\n     * @deprecated Use `setAngularJSGlobal` instead.\n     *\n     * @publicApi\n     */\n    function setAngularLib(ng) {\n        setAngularJSGlobal(ng);\n    }\n    /**\n     * @deprecated Use `getAngularJSGlobal` instead.\n     *\n     * @publicApi\n     */\n    function getAngularLib() {\n        return getAngularJSGlobal();\n    }\n    /**\n     * Resets the AngularJS global.\n     *\n     * Used when AngularJS is loaded lazily, and not available on `window`.\n     *\n     * @publicApi\n     */\n    function setAngularJSGlobal(ng) {\n        angular = ng;\n        version = ng && ng.version;\n    }\n    /**\n     * Returns the current AngularJS global.\n     *\n     * @publicApi\n     */\n    function getAngularJSGlobal() {\n        return angular;\n    }\n    var bootstrap = function (e, modules, config) {\n        return angular.bootstrap(e, modules, config);\n    };\n    var module$1 = function (prefix, dependencies) {\n        return angular.module(prefix, dependencies);\n    };\n    var element = (function (e) { return angular.element(e); });\n    element.cleanData = function (nodes) { return angular.element.cleanData(nodes); };\n    var version = angular.version;\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var $COMPILE = '$compile';\n    var $CONTROLLER = '$controller';\n    var $DELEGATE = '$delegate';\n    var $HTTP_BACKEND = '$httpBackend';\n    var $INJECTOR = '$injector';\n    var $INTERVAL = '$interval';\n    var $PARSE = '$parse';\n    var $PROVIDE = '$provide';\n    var $SCOPE = '$scope';\n    var $TEMPLATE_CACHE = '$templateCache';\n    var $$TESTABILITY = '$$testability';\n    var DOWNGRADED_MODULE_COUNT_KEY = '$$angularDowngradedModuleCount';\n    var INJECTOR_KEY = '$$angularInjector';\n    var LAZY_MODULE_REF = '$$angularLazyModuleRef';\n    var UPGRADE_APP_TYPE_KEY = '$$angularUpgradeAppType';\n    var REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\n    var REQUIRE_NG_MODEL = '?ngModel';\n    var UPGRADE_MODULE_NAME = '$$UpgradeModule';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A `PropertyBinding` represents a mapping between a property name\n     * and an attribute name. It is parsed from a string of the form\n     * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n     * and attribute have the same identifier.\n     */\n    var PropertyBinding = /** @class */ (function () {\n        function PropertyBinding(prop, attr) {\n            this.prop = prop;\n            this.attr = attr;\n            this.parseBinding();\n        }\n        PropertyBinding.prototype.parseBinding = function () {\n            this.bracketAttr = \"[\" + this.attr + \"]\";\n            this.parenAttr = \"(\" + this.attr + \")\";\n            this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n            var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n            this.onAttr = \"on\" + capitalAttr;\n            this.bindAttr = \"bind\" + capitalAttr;\n            this.bindonAttr = \"bindon\" + capitalAttr;\n        };\n        return PropertyBinding;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\n    var DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n    function controllerKey(name) {\n        return '$' + name + 'Controller';\n    }\n    function directiveNormalize(name) {\n        return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n            .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n    }\n    function getTypeName(type) {\n        // Return the name of the type or the first line of its stringified version.\n        return type.overriddenName || type.name || type.toString().split('\\n')[0];\n    }\n    function getDowngradedModuleCount($injector) {\n        return $injector.has(DOWNGRADED_MODULE_COUNT_KEY) ? $injector.get(DOWNGRADED_MODULE_COUNT_KEY) :\n            0;\n    }\n    function getUpgradeAppType($injector) {\n        return $injector.has(UPGRADE_APP_TYPE_KEY) ? $injector.get(UPGRADE_APP_TYPE_KEY) :\n            0 /* None */;\n    }\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n    function validateInjectionKey($injector, downgradedModule, injectionKey, attemptedAction) {\n        var upgradeAppType = getUpgradeAppType($injector);\n        var downgradedModuleCount = getDowngradedModuleCount($injector);\n        // Check for common errors.\n        switch (upgradeAppType) {\n            case 1 /* Dynamic */:\n            case 2 /* Static */:\n                if (downgradedModule) {\n                    throw new Error(\"Error while \" + attemptedAction + \": 'downgradedModule' unexpectedly specified.\\n\" +\n                        'You should not specify a value for \\'downgradedModule\\', unless you are downgrading ' +\n                        'more than one Angular module (via \\'downgradeModule()\\').');\n                }\n                break;\n            case 3 /* Lite */:\n                if (!downgradedModule && (downgradedModuleCount >= 2)) {\n                    throw new Error(\"Error while \" + attemptedAction + \": 'downgradedModule' not specified.\\n\" +\n                        'This application contains more than one downgraded Angular module, thus you need to ' +\n                        'always specify \\'downgradedModule\\' when downgrading components and injectables.');\n                }\n                if (!$injector.has(injectionKey)) {\n                    throw new Error(\"Error while \" + attemptedAction + \": Unable to find the specified downgraded module.\\n\" +\n                        'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n                        'application?');\n                }\n                break;\n            default:\n                throw new Error(\"Error while \" + attemptedAction + \": Not a valid '@angular/upgrade' application.\\n\" +\n                    'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n                    'application?');\n        }\n    }\n    /**\n     * @return Whether the passed-in component implements the subset of the\n     *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n     *     compatibility.\n     */\n    function supportsNgModel(component) {\n        return typeof component.writeValue === 'function' &&\n            typeof component.registerOnChange === 'function';\n    }\n    /**\n     * Glue the AngularJS `NgModelController` (if it exists) to the component\n     * (if it implements the needed subset of the `ControlValueAccessor` interface).\n     */\n    function hookupNgModel(ngModel, component) {\n        if (ngModel && supportsNgModel(component)) {\n            ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n            component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n            if (typeof component.registerOnTouched === 'function') {\n                component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n            }\n        }\n    }\n    /**\n     * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n     */\n    function strictEquals(val1, val2) {\n        return val1 === val2 || (val1 !== val1 && val2 !== val2);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var INITIAL_VALUE = {\n        __UNINITIALIZED__: true\n    };\n    var DowngradeComponentAdapter = /** @class */ (function () {\n        function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n            this.element = element;\n            this.attrs = attrs;\n            this.scope = scope;\n            this.ngModel = ngModel;\n            this.parentInjector = parentInjector;\n            this.$injector = $injector;\n            this.$compile = $compile;\n            this.$parse = $parse;\n            this.componentFactory = componentFactory;\n            this.wrapCallback = wrapCallback;\n            this.implementsOnChanges = false;\n            this.inputChangeCount = 0;\n            this.inputChanges = {};\n            this.componentScope = scope.$new();\n        }\n        DowngradeComponentAdapter.prototype.compileContents = function () {\n            var _this = this;\n            var compiledProjectableNodes = [];\n            var projectableNodes = this.groupProjectableNodes();\n            var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n            this.element.empty();\n            linkFns.forEach(function (linkFn) {\n                linkFn(_this.scope, function (clone) {\n                    compiledProjectableNodes.push(clone);\n                    _this.element.append(clone);\n                });\n            });\n            return compiledProjectableNodes;\n        };\n        DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n            var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n            var childInjector = core.Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n            this.componentRef =\n                this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n            this.viewChangeDetector = this.componentRef.injector.get(core.ChangeDetectorRef);\n            this.changeDetector = this.componentRef.changeDetectorRef;\n            this.component = this.componentRef.instance;\n            // testability hook is commonly added during component bootstrap in\n            // packages/core/src/application_ref.bootstrap()\n            // in downgraded application, component creation will take place here as well as adding the\n            // testability hook.\n            var testability = this.componentRef.injector.get(core.Testability, null);\n            if (testability) {\n                this.componentRef.injector.get(core.TestabilityRegistry)\n                    .registerApplication(this.componentRef.location.nativeElement, testability);\n            }\n            hookupNgModel(this.ngModel, this.component);\n        };\n        DowngradeComponentAdapter.prototype.setupInputs = function (manuallyAttachView, propagateDigest) {\n            var _this = this;\n            if (propagateDigest === void 0) { propagateDigest = true; }\n            var attrs = this.attrs;\n            var inputs = this.componentFactory.inputs || [];\n            var _loop_1 = function (i) {\n                var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n                var expr = null;\n                if (attrs.hasOwnProperty(input.attr)) {\n                    var observeFn_1 = (function (prop) {\n                        var prevValue = INITIAL_VALUE;\n                        return function (currValue) {\n                            // Initially, both `$observe()` and `$watch()` will call this function.\n                            if (!strictEquals(prevValue, currValue)) {\n                                if (prevValue === INITIAL_VALUE) {\n                                    prevValue = currValue;\n                                }\n                                _this.updateInput(prop, prevValue, currValue);\n                                prevValue = currValue;\n                            }\n                        };\n                    })(input.prop);\n                    attrs.$observe(input.attr, observeFn_1);\n                    // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                    // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                    // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                    var unwatch_1 = this_1.componentScope.$watch(function () {\n                        unwatch_1();\n                        unwatch_1 = null;\n                        observeFn_1(attrs[input.attr]);\n                    });\n                }\n                else if (attrs.hasOwnProperty(input.bindAttr)) {\n                    expr = attrs[input.bindAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                    expr = attrs[input.bracketAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                    expr = attrs[input.bindonAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                    expr = attrs[input.bracketParenAttr];\n                }\n                if (expr != null) {\n                    var watchFn = (function (prop) { return function (currValue, prevValue) {\n                        return _this.updateInput(prop, prevValue, currValue);\n                    }; })(input.prop);\n                    this_1.componentScope.$watch(expr, watchFn);\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < inputs.length; i++) {\n                _loop_1(i);\n            }\n            // Invoke `ngOnChanges()` and Change Detection (when necessary)\n            var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n            var prototype = this.componentFactory.componentType.prototype;\n            this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n            this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n                // Invoke `ngOnChanges()`\n                if (_this.implementsOnChanges) {\n                    var inputChanges = _this.inputChanges;\n                    _this.inputChanges = {};\n                    _this.component.ngOnChanges(inputChanges);\n                }\n                _this.viewChangeDetector.markForCheck();\n                // If opted out of propagating digests, invoke change detection when inputs change.\n                if (!propagateDigest) {\n                    detectChanges();\n                }\n            }));\n            // If not opted out of propagating digests, invoke change detection on every digest\n            if (propagateDigest) {\n                this.componentScope.$watch(this.wrapCallback(detectChanges));\n            }\n            // If necessary, attach the view so that it will be dirty-checked.\n            // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n            if (manuallyAttachView || !propagateDigest) {\n                var unwatch_2 = this.componentScope.$watch(function () {\n                    unwatch_2();\n                    unwatch_2 = null;\n                    var appRef = _this.parentInjector.get(core.ApplicationRef);\n                    appRef.attachView(_this.componentRef.hostView);\n                });\n            }\n        };\n        DowngradeComponentAdapter.prototype.setupOutputs = function () {\n            var attrs = this.attrs;\n            var outputs = this.componentFactory.outputs || [];\n            for (var j = 0; j < outputs.length; j++) {\n                var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n                var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n                var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n                // order below is important - first update bindings then evaluate expressions\n                if (attrs.hasOwnProperty(bindonAttr)) {\n                    this.subscribeToOutput(output, attrs[bindonAttr], true);\n                }\n                if (attrs.hasOwnProperty(bracketParenAttr)) {\n                    this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n                }\n                if (attrs.hasOwnProperty(output.onAttr)) {\n                    this.subscribeToOutput(output, attrs[output.onAttr]);\n                }\n                if (attrs.hasOwnProperty(output.parenAttr)) {\n                    this.subscribeToOutput(output, attrs[output.parenAttr]);\n                }\n            }\n        };\n        DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {\n            var _this = this;\n            if (isAssignment === void 0) { isAssignment = false; }\n            var getter = this.$parse(expr);\n            var setter = getter.assign;\n            if (isAssignment && !setter) {\n                throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n            }\n            var emitter = this.component[output.prop];\n            if (emitter) {\n                emitter.subscribe({\n                    next: isAssignment ? function (v) { return setter(_this.scope, v); } :\n                        function (v) { return getter(_this.scope, { '$event': v }); }\n                });\n            }\n            else {\n                throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getTypeName(this.componentFactory.componentType) + \"'!\");\n            }\n        };\n        DowngradeComponentAdapter.prototype.registerCleanup = function () {\n            var _this = this;\n            var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n            var destroyed = false;\n            this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });\n            this.componentScope.$on('$destroy', function () {\n                if (!destroyed) {\n                    destroyed = true;\n                    _this.componentRef.injector.get(core.TestabilityRegistry)\n                        .unregisterApplication(_this.componentRef.location.nativeElement);\n                    destroyComponentRef();\n                }\n            });\n        };\n        DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n        DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n            if (this.implementsOnChanges) {\n                this.inputChanges[prop] = new core.SimpleChange(prevValue, currValue, prevValue === currValue);\n            }\n            this.inputChangeCount++;\n            this.component[prop] = currValue;\n        };\n        DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n            var ngContentSelectors = this.componentFactory.ngContentSelectors;\n            return groupNodesBySelector(ngContentSelectors, this.element.contents());\n        };\n        return DowngradeComponentAdapter;\n    }());\n    /**\n     * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n     */\n    function groupNodesBySelector(ngContentSelectors, nodes) {\n        var projectableNodes = [];\n        for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n            projectableNodes[i] = [];\n        }\n        for (var j = 0, jj = nodes.length; j < jj; ++j) {\n            var node = nodes[j];\n            var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n            if (ngContentIndex != null) {\n                projectableNodes[ngContentIndex].push(node);\n            }\n        }\n        return projectableNodes;\n    }\n    function findMatchingNgContentIndex(element, ngContentSelectors) {\n        var ngContentIndices = [];\n        var wildcardNgContentIndex = -1;\n        for (var i = 0; i < ngContentSelectors.length; i++) {\n            var selector = ngContentSelectors[i];\n            if (selector === '*') {\n                wildcardNgContentIndex = i;\n            }\n            else {\n                if (matchesSelector(element, selector)) {\n                    ngContentIndices.push(i);\n                }\n            }\n        }\n        ngContentIndices.sort();\n        if (wildcardNgContentIndex !== -1) {\n            ngContentIndices.push(wildcardNgContentIndex);\n        }\n        return ngContentIndices.length ? ngContentIndices[0] : null;\n    }\n    var _matches;\n    function matchesSelector(el, selector) {\n        if (!_matches) {\n            var elProto = Element.prototype;\n            _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n                elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n        }\n        return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function that allows an Angular component to be used from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function to be used for registering\n     * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n     *\n     * @usageNotes\n     * ### Examples\n     *\n     * Let's assume that you have an Angular component called `ng2Heroes` that needs\n     * to be made available in AngularJS templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n     *\n     * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n     * that will make this Angular component available inside AngularJS templates.\n     * The `downgradeComponent()` function returns a factory function that we\n     * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n     *\n     * @param info contains information about the Component that is being downgraded:\n     *\n     * - `component: Type<any>`: The type of the Component that will be downgraded\n     * - `downgradedModule?: string`: The name of the downgraded module (if any) that the component\n     *   \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose\n     *   corresponding Angular module will be bootstrapped, when the component needs to be instantiated.\n     *   <br />\n     *   (This option is only necessary when using `downgradeModule()` to downgrade more than one\n     *   Angular module.)\n     * - `propagateDigest?: boolean`: Whether to perform {@link ChangeDetectorRef#detectChanges\n     *   change detection} on the component on every\n     *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n     *   change detection will still be performed when any of the component's inputs changes.\n     *   (Default: true)\n     *\n     * @returns a factory function that can be used to register the component in an\n     * AngularJS module.\n     *\n     * @publicApi\n     */\n    function downgradeComponent(info) {\n        var directiveFactory = function ($compile, $injector, $parse) {\n            // When using `downgradeModule()`, we need to handle certain things specially. For example:\n            // - We always need to attach the component view to the `ApplicationRef` for it to be\n            //   dirty-checked.\n            // - We need to ensure callbacks to Angular APIs (e.g. change detection) are run inside the\n            //   Angular zone.\n            //   NOTE: This is not needed, when using `UpgradeModule`, because `$digest()` will be run\n            //         inside the Angular zone (except if explicitly escaped, in which case we shouldn't\n            //         force it back in).\n            var isNgUpgradeLite = getUpgradeAppType($injector) === 3 /* Lite */;\n            var wrapCallback = !isNgUpgradeLite ? function (cb) { return cb; } : function (cb) { return function () { return core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb); }; };\n            var ngZone;\n            // When downgrading multiple modules, special handling is needed wrt injectors.\n            var hasMultipleDowngradedModules = isNgUpgradeLite && (getDowngradedModuleCount($injector) > 1);\n            return {\n                restrict: 'E',\n                terminal: true,\n                require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n                link: function (scope, element, attrs, required) {\n                    // We might have to compile the contents asynchronously, because this might have been\n                    // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                    // been compiled.\n                    var ngModel = required[1];\n                    var parentInjector = required[0];\n                    var moduleInjector = undefined;\n                    var ranAsync = false;\n                    if (!parentInjector || hasMultipleDowngradedModules) {\n                        var downgradedModule = info.downgradedModule || '';\n                        var lazyModuleRefKey = \"\" + LAZY_MODULE_REF + downgradedModule;\n                        var attemptedAction = \"instantiating component '\" + getTypeName(info.component) + \"'\";\n                        validateInjectionKey($injector, downgradedModule, lazyModuleRefKey, attemptedAction);\n                        var lazyModuleRef = $injector.get(lazyModuleRefKey);\n                        moduleInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                    }\n                    // Notes:\n                    //\n                    // There are two injectors: `finalModuleInjector` and `finalParentInjector` (they might be\n                    // the same instance, but that is irrelevant):\n                    // - `finalModuleInjector` is used to retrieve `ComponentFactoryResolver`, thus it must be\n                    //   on the same tree as the `NgModule` that declares this downgraded component.\n                    // - `finalParentInjector` is used for all other injection purposes.\n                    //   (Note that Angular knows to only traverse the component-tree part of that injector,\n                    //   when looking for an injectable and then switch to the module injector.)\n                    //\n                    // There are basically three cases:\n                    // - If there is no parent component (thus no `parentInjector`), we bootstrap the downgraded\n                    //   `NgModule` and use its injector as both `finalModuleInjector` and\n                    //   `finalParentInjector`.\n                    // - If there is a parent component (and thus a `parentInjector`) and we are sure that it\n                    //   belongs to the same `NgModule` as this downgraded component (e.g. because there is only\n                    //   one downgraded module, we use that `parentInjector` as both `finalModuleInjector` and\n                    //   `finalParentInjector`.\n                    // - If there is a parent component, but it may belong to a different `NgModule`, then we\n                    //   use the `parentInjector` as `finalParentInjector` and this downgraded component's\n                    //   declaring `NgModule`'s injector as `finalModuleInjector`.\n                    //   Note 1: If the `NgModule` is already bootstrapped, we just get its injector (we don't\n                    //           bootstrap again).\n                    //   Note 2: It is possible that (while there are multiple downgraded modules) this\n                    //           downgraded component and its parent component both belong to the same NgModule.\n                    //           In that case, we could have used the `parentInjector` as both\n                    //           `finalModuleInjector` and `finalParentInjector`, but (for simplicity) we are\n                    //           treating this case as if they belong to different `NgModule`s. That doesn't\n                    //           really affect anything, since `parentInjector` has `moduleInjector` as ancestor\n                    //           and trying to resolve `ComponentFactoryResolver` from either one will return\n                    //           the same instance.\n                    // If there is a parent component, use its injector as parent injector.\n                    // If this is a \"top-level\" Angular component, use the module injector.\n                    var finalParentInjector = parentInjector || moduleInjector;\n                    // If this is a \"top-level\" Angular component or the parent component may belong to a\n                    // different `NgModule`, use the module injector for module-specific dependencies.\n                    // If there is a parent component that belongs to the same `NgModule`, use its injector.\n                    var finalModuleInjector = moduleInjector || parentInjector;\n                    var doDowngrade = function (injector, moduleInjector) {\n                        // Retrieve `ComponentFactoryResolver` from the injector tied to the `NgModule` this\n                        // component belongs to.\n                        var componentFactoryResolver = moduleInjector.get(core.ComponentFactoryResolver);\n                        var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);\n                        if (!componentFactory) {\n                            throw new Error(\"Expecting ComponentFactory for: \" + getTypeName(info.component));\n                        }\n                        var injectorPromise = new ParentInjectorPromise(element);\n                        var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                        var projectableNodes = facade.compileContents();\n                        facade.createComponent(projectableNodes);\n                        facade.setupInputs(isNgUpgradeLite, info.propagateDigest);\n                        facade.setupOutputs();\n                        facade.registerCleanup();\n                        injectorPromise.resolve(facade.getInjector());\n                        if (ranAsync) {\n                            // If this is run async, it is possible that it is not run inside a\n                            // digest and initial input values will not be detected.\n                            scope.$evalAsync(function () { });\n                        }\n                    };\n                    var downgradeFn = !isNgUpgradeLite ? doDowngrade : function (pInjector, mInjector) {\n                        if (!ngZone) {\n                            ngZone = pInjector.get(core.NgZone);\n                        }\n                        wrapCallback(function () { return doDowngrade(pInjector, mInjector); })();\n                    };\n                    if (isThenable(finalParentInjector) || isThenable(finalModuleInjector)) {\n                        Promise.all([finalParentInjector, finalModuleInjector])\n                            .then(function (_a) {\n                            var _b = __read(_a, 2), pInjector = _b[0], mInjector = _b[1];\n                            return downgradeFn(pInjector, mInjector);\n                        });\n                    }\n                    else {\n                        downgradeFn(finalParentInjector, finalModuleInjector);\n                    }\n                    ranAsync = true;\n                }\n            };\n        };\n        // bracket-notation because of closure - see #14441\n        directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n        return directiveFactory;\n    }\n    /**\n     * Synchronous promise-like object to wrap parent injectors,\n     * to preserve the synchronous nature of Angular 1's $compile.\n     */\n    var ParentInjectorPromise = /** @class */ (function () {\n        function ParentInjectorPromise(element) {\n            this.element = element;\n            this.injectorKey = controllerKey(INJECTOR_KEY);\n            this.callbacks = [];\n            // Store the promise on the element.\n            element.data(this.injectorKey, this);\n        }\n        ParentInjectorPromise.prototype.then = function (callback) {\n            if (this.injector) {\n                callback(this.injector);\n            }\n            else {\n                this.callbacks.push(callback);\n            }\n        };\n        ParentInjectorPromise.prototype.resolve = function (injector) {\n            this.injector = injector;\n            // Store the real injector on the element.\n            this.element.data(this.injectorKey, injector);\n            // Release the element to prevent memory leaks.\n            this.element = null;\n            // Run the queued callbacks.\n            this.callbacks.forEach(function (callback) { return callback(injector); });\n            this.callbacks.length = 0;\n        };\n        return ParentInjectorPromise;\n    }());\n    function isThenable(obj) {\n        return isFunction(obj.then);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function to allow an Angular service to be accessible from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function that provides access to the Angular\n     * service identified by the `token` parameter.\n     *\n     * @usageNotes\n     * ### Examples\n     *\n     * First ensure that the service to be downgraded is provided in an `NgModule`\n     * that will be part of the upgrade application. For example, let's assume we have\n     * defined `HeroesService`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n     *\n     * and that we have included this in our upgrade app `NgModule`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n     *\n     * Now we can register the `downgradeInjectable` factory function for the service\n     * on an AngularJS module.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n     *\n     * Inside an AngularJS component's controller we can get hold of the\n     * downgraded service via the name we gave when downgrading.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n     *\n     * <div class=\"alert is-important\">\n     *\n     *   When using `downgradeModule()`, downgraded injectables will not be available until the Angular\n     *   module that provides them is instantiated. In order to be safe, you need to ensure that the\n     *   downgraded injectables are not used anywhere _outside_ the part of the app where it is\n     *   guaranteed that their module has been instantiated.\n     *\n     *   For example, it is _OK_ to use a downgraded service in an upgraded component that is only used\n     *   from a downgraded Angular component provided by the same Angular module as the injectable, but\n     *   it is _not OK_ to use it in an AngularJS component that may be used independently of Angular or\n     *   use it in a downgraded Angular component from a different module.\n     *\n     * </div>\n     *\n     * @param token an `InjectionToken` that identifies a service provided from Angular.\n     * @param downgradedModule the name of the downgraded module (if any) that the injectable\n     * \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose injector will\n     * be used for instantiating the injectable.<br />\n     * (This option is only necessary when using `downgradeModule()` to downgrade more than one Angular\n     * module.)\n     *\n     * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n     * used to register the service on an AngularJS module.\n     *\n     * @publicApi\n     */\n    function downgradeInjectable(token, downgradedModule) {\n        if (downgradedModule === void 0) { downgradedModule = ''; }\n        var factory = function ($injector) {\n            var injectorKey = \"\" + INJECTOR_KEY + downgradedModule;\n            var injectableName = isFunction(token) ? getTypeName(token) : String(token);\n            var attemptedAction = \"instantiating injectable '\" + injectableName + \"'\";\n            validateInjectionKey($injector, downgradedModule, injectorKey, attemptedAction);\n            var injector = $injector.get(injectorKey);\n            return injector.get(token);\n        };\n        factory['$inject'] = [$INJECTOR];\n        return factory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @publicApi\n     */\n    var VERSION = new core.Version('7.2.4');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // We have to do a little dance to get the ng1 injector into the module injector.\n    // We store the ng1 injector so that the provider in the module injector can access it\n    // Then we \"get\" the ng1 injector from the module injector, which triggers the provider to read\n    // the stored injector and release the reference to it.\n    var tempInjectorRef = null;\n    function setTempInjectorRef(injector) {\n        tempInjectorRef = injector;\n    }\n    function injectorFactory() {\n        if (!tempInjectorRef) {\n            throw new Error('Trying to get the AngularJS injector before it being set.');\n        }\n        var injector = tempInjectorRef;\n        tempInjectorRef = null; // clear the value to prevent memory leaks\n        return injector;\n    }\n    function rootScopeFactory(i) {\n        return i.get('$rootScope');\n    }\n    function compileFactory(i) {\n        return i.get('$compile');\n    }\n    function parseFactory(i) {\n        return i.get('$parse');\n    }\n    var angular1Providers = [\n        // We must use exported named functions for the ng2 factories to keep the compiler happy:\n        // > Metadata collected contains an error that will be reported at runtime:\n        // >   Function calls are not supported.\n        // >   Consider replacing the function or lambda with a reference to an exported function\n        { provide: '$injector', useFactory: injectorFactory, deps: [] },\n        { provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector'] },\n        { provide: '$compile', useFactory: compileFactory, deps: ['$injector'] },\n        { provide: '$parse', useFactory: parseFactory, deps: ['$injector'] }\n    ];\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NgAdapterInjector = /** @class */ (function () {\n        function NgAdapterInjector(modInjector) {\n            this.modInjector = modInjector;\n        }\n        // When Angular locate a service in the component injector tree, the not found value is set to\n        // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module\n        // injector.\n        // AngularJS only supports a single tree and should always check the module injector.\n        NgAdapterInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === core.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                return notFoundValue;\n            }\n            return this.modInjector.get(token, notFoundValue);\n        };\n        return NgAdapterInjector;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var moduleUid = 0;\n    /**\n     * @description\n     *\n     * A helper function for creating an AngularJS module that can bootstrap an Angular module\n     * \"on-demand\" (possibly lazily) when a {@link downgradeComponent downgraded component} needs to be\n     * instantiated.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade/static) library for hybrid upgrade apps that\n     * support AoT compilation.*\n     *\n     * It allows loading/bootstrapping the Angular part of a hybrid application lazily and not having to\n     * pay the cost up-front. For example, you can have an AngularJS application that uses Angular for\n     * specific routes and only instantiate the Angular modules if/when the user visits one of these\n     * routes.\n     *\n     * The Angular module will be bootstrapped once (when requested for the first time) and the same\n     * reference will be used from that point onwards.\n     *\n     * `downgradeModule()` requires either an `NgModuleFactory` or a function:\n     * - `NgModuleFactory`: If you pass an `NgModuleFactory`, it will be used to instantiate a module\n     *   using `platformBrowser`'s {@link PlatformRef#bootstrapModuleFactory bootstrapModuleFactory()}.\n     * - `Function`: If you pass a function, it is expected to return a promise resolving to an\n     *   `NgModuleRef`. The function is called with an array of extra {@link StaticProvider Providers}\n     *   that are expected to be available from the returned `NgModuleRef`'s `Injector`.\n     *\n     * `downgradeModule()` returns the name of the created AngularJS wrapper module. You can use it to\n     * declare a dependency in your main AngularJS module.\n     *\n     * {@example upgrade/static/ts/lite/module.ts region=\"basic-how-to\"}\n     *\n     * For more details on how to use `downgradeModule()` see\n     * [Upgrading for Performance](guide/upgrade-performance).\n     *\n     * @usageNotes\n     *\n     * Apart from `UpgradeModule`, you can use the rest of the `upgrade/static` helpers as usual to\n     * build a hybrid application. Note that the Angular pieces (e.g. downgraded services) will not be\n     * available until the downgraded module has been bootstrapped, i.e. by instantiating a downgraded\n     * component.\n     *\n     * <div class=\"alert is-important\">\n     *\n     *   You cannot use `downgradeModule()` and `UpgradeModule` in the same hybrid application.<br />\n     *   Use one or the other.\n     *\n     * </div>\n     *\n     * ### Differences with `UpgradeModule`\n     *\n     * Besides their different API, there are two important internal differences between\n     * `downgradeModule()` and `UpgradeModule` that affect the behavior of hybrid applications:\n     *\n     * 1. Unlike `UpgradeModule`, `downgradeModule()` does not bootstrap the main AngularJS module\n     *    inside the {@link NgZone Angular zone}.\n     * 2. Unlike `UpgradeModule`, `downgradeModule()` does not automatically run a\n     *    [$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest) when changes are\n     *    detected in the Angular part of the application.\n     *\n     * What this means is that applications using `UpgradeModule` will run change detection more\n     * frequently in order to ensure that both frameworks are properly notified about possible changes.\n     * This will inevitably result in more change detection runs than necessary.\n     *\n     * `downgradeModule()`, on the other side, does not try to tie the two change detection systems as\n     * tightly, restricting the explicit change detection runs only to cases where it knows it is\n     * necessary (e.g. when the inputs of a downgraded component change). This improves performance,\n     * especially in change-detection-heavy applications, but leaves it up to the developer to manually\n     * notify each framework as needed.\n     *\n     * For a more detailed discussion of the differences and their implications, see\n     * [Upgrading for Performance](guide/upgrade-performance).\n     *\n     * <div class=\"alert is-helpful\">\n     *\n     *   You can manually trigger a change detection run in AngularJS using\n     *   [scope.$apply(...)](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply) or\n     *   [$rootScope.$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest).\n     *\n     *   You can manually trigger a change detection run in Angular using {@link NgZone#run\n     *   ngZone.run(...)}.\n     *\n     * </div>\n     *\n     * ### Downgrading multiple modules\n     *\n     * It is possible to downgrade multiple modules and include them in an AngularJS application. In\n     * that case, each downgraded module will be bootstrapped when an associated downgraded component or\n     * injectable needs to be instantiated.\n     *\n     * Things to keep in mind, when downgrading multiple modules:\n     *\n     * - Each downgraded component/injectable needs to be explicitly associated with a downgraded\n     *   module. See `downgradeComponent()` and `downgradeInjectable()` for more details.\n     *\n     * - If you want some injectables to be shared among all downgraded modules, you can provide them as\n     *   `StaticProvider`s, when creating the `PlatformRef` (e.g. via `platformBrowser` or\n     *   `platformBrowserDynamic`).\n     *\n     * - When using {@link PlatformRef#bootstrapmodule `bootstrapModule()`} or\n     *   {@link PlatformRef#bootstrapmodulefactory `bootstrapModuleFactory()`} to bootstrap the\n     *   downgraded modules, each one is considered a \"root\" module. As a consequence, a new instance\n     *   will be created for every injectable provided in `\"root\"` (via\n     *   {@link Injectable#providedIn `providedIn`}).\n     *   If this is not your intention, you can have a shared module (that will act as act as the \"root\"\n     *   module) and create all downgraded modules using that module's injector:\n     *\n     *   {@example upgrade/static/ts/lite-multi-shared/module.ts region=\"shared-root-module\"}\n     *\n     * @publicApi\n     */\n    function downgradeModule(moduleFactoryOrBootstrapFn) {\n        var lazyModuleName = UPGRADE_MODULE_NAME + \".lazy\" + ++moduleUid;\n        var lazyModuleRefKey = \"\" + LAZY_MODULE_REF + lazyModuleName;\n        var lazyInjectorKey = \"\" + INJECTOR_KEY + lazyModuleName;\n        var bootstrapFn = isFunction(moduleFactoryOrBootstrapFn) ?\n            moduleFactoryOrBootstrapFn :\n            function (extraProviders) {\n                return platformBrowser.platformBrowser(extraProviders).bootstrapModuleFactory(moduleFactoryOrBootstrapFn);\n            };\n        var injector;\n        // Create an ng1 module to bootstrap.\n        module$1(lazyModuleName, [])\n            .constant(UPGRADE_APP_TYPE_KEY, 3 /* Lite */)\n            .factory(INJECTOR_KEY, [lazyInjectorKey, identity])\n            .factory(lazyInjectorKey, function () {\n            if (!injector) {\n                throw new Error('Trying to get the Angular injector before bootstrapping the corresponding ' +\n                    'Angular module.');\n            }\n            return injector;\n        })\n            .factory(LAZY_MODULE_REF, [lazyModuleRefKey, identity])\n            .factory(lazyModuleRefKey, [\n            $INJECTOR,\n            function ($injector) {\n                setTempInjectorRef($injector);\n                var result = {\n                    promise: bootstrapFn(angular1Providers).then(function (ref) {\n                        injector = result.injector = new NgAdapterInjector(ref.injector);\n                        injector.get($INJECTOR);\n                        return injector;\n                    })\n                };\n                return result;\n            }\n        ])\n            .config([\n            $INJECTOR, $PROVIDE,\n            function ($injector, $provide) {\n                $provide.constant(DOWNGRADED_MODULE_COUNT_KEY, getDowngradedModuleCount($injector) + 1);\n            }\n        ]);\n        return lazyModuleName;\n    }\n    function identity(x) {\n        return x;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Constants\n    var REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n    // Classes\n    var UpgradeHelper = /** @class */ (function () {\n        function UpgradeHelper(injector, name, elementRef, directive) {\n            this.injector = injector;\n            this.name = name;\n            this.$injector = injector.get($INJECTOR);\n            this.$compile = this.$injector.get($COMPILE);\n            this.$controller = this.$injector.get($CONTROLLER);\n            this.element = elementRef.nativeElement;\n            this.$element = element(this.element);\n            this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n        }\n        UpgradeHelper.getDirective = function ($injector, name) {\n            var directives = $injector.get(name + 'Directive');\n            if (directives.length > 1) {\n                throw new Error(\"Only support single directive definition for: \" + name);\n            }\n            var directive = directives[0];\n            // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n            // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n            if (directive.compile && !directive.link)\n                notSupported(name, 'compile');\n            if (directive.replace)\n                notSupported(name, 'replace');\n            if (directive.terminal)\n                notSupported(name, 'terminal');\n            return directive;\n        };\n        UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate) {\n            if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n            if (directive.template !== undefined) {\n                return getOrCall(directive.template);\n            }\n            else if (directive.templateUrl) {\n                var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n                var url_1 = getOrCall(directive.templateUrl);\n                var template = $templateCache_1.get(url_1);\n                if (template !== undefined) {\n                    return template;\n                }\n                else if (!fetchRemoteTemplate) {\n                    throw new Error('loading directive templates asynchronously is not supported');\n                }\n                return new Promise(function (resolve, reject) {\n                    var $httpBackend = $injector.get($HTTP_BACKEND);\n                    $httpBackend('GET', url_1, null, function (status, response) {\n                        if (status === 200) {\n                            resolve($templateCache_1.put(url_1, response));\n                        }\n                        else {\n                            reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                        }\n                    });\n                });\n            }\n            else {\n                throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n            }\n        };\n        UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n            // TODO: Document that we do not pre-assign bindings on the controller instance.\n            // Quoted properties below so that this code can be optimized with Closure Compiler.\n            var locals = { '$scope': $scope, '$element': this.$element };\n            var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n            this.$element.data(controllerKey(this.directive.name), controller);\n            return controller;\n        };\n        UpgradeHelper.prototype.compileTemplate = function (template) {\n            if (template === undefined) {\n                template = UpgradeHelper.getTemplate(this.$injector, this.directive);\n            }\n            return this.compileHtml(template);\n        };\n        UpgradeHelper.prototype.onDestroy = function ($scope, controllerInstance) {\n            if (controllerInstance && isFunction(controllerInstance.$onDestroy)) {\n                controllerInstance.$onDestroy();\n            }\n            $scope.$destroy();\n            // Clean the jQuery/jqLite data on the component+child elements.\n            // Equivelent to how jQuery/jqLite invoke `cleanData` on an Element (this.element)\n            //  https://github.com/jquery/jquery/blob/e743cbd28553267f955f71ea7248377915613fd9/src/manipulation.js#L223\n            //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/jqLite.js#L306-L312\n            // `cleanData` will invoke the AngularJS `$destroy` DOM event\n            //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/Angular.js#L1911-L1924\n            element.cleanData([this.element]);\n            element.cleanData(this.element.querySelectorAll('*'));\n        };\n        UpgradeHelper.prototype.prepareTransclusion = function () {\n            var _this = this;\n            var transclude = this.directive.transclude;\n            var contentChildNodes = this.extractChildNodes();\n            var attachChildrenFn = function (scope, cloneAttachFn) {\n                // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n                // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n                // there will be no transclusion scope here.\n                // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n                scope = scope || { $destroy: function () { return undefined; } };\n                return cloneAttachFn($template, scope);\n            };\n            var $template = contentChildNodes;\n            if (transclude) {\n                var slots_1 = Object.create(null);\n                if (typeof transclude === 'object') {\n                    $template = [];\n                    var slotMap_1 = Object.create(null);\n                    var filledSlots_1 = Object.create(null);\n                    // Parse the element selectors.\n                    Object.keys(transclude).forEach(function (slotName) {\n                        var selector = transclude[slotName];\n                        var optional = selector.charAt(0) === '?';\n                        selector = optional ? selector.substring(1) : selector;\n                        slotMap_1[selector] = slotName;\n                        slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                        filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                    });\n                    // Add the matching elements into their slot.\n                    contentChildNodes.forEach(function (node) {\n                        var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                        if (slotName) {\n                            filledSlots_1[slotName] = true;\n                            slots_1[slotName] = slots_1[slotName] || [];\n                            slots_1[slotName].push(node);\n                        }\n                        else {\n                            $template.push(node);\n                        }\n                    });\n                    // Check for required slots that were not filled.\n                    Object.keys(filledSlots_1).forEach(function (slotName) {\n                        if (!filledSlots_1[slotName]) {\n                            throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                        }\n                    });\n                    Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                        var nodes = slots_1[slotName];\n                        slots_1[slotName] = function (scope, cloneAttach) {\n                            return cloneAttach(nodes, scope);\n                        };\n                    });\n                }\n                // Attach `$$slots` to default slot transclude fn.\n                attachChildrenFn.$$slots = slots_1;\n                // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n                // removes all text content after the first interpolation and updates it later, after\n                // evaluating the expressions. This would result in AngularJS failing to recognize text\n                // nodes that start with an interpolation as transcluded content and use the fallback\n                // content instead.\n                // To avoid this issue, we add a\n                // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n                // to empty text nodes (which can only be a result of Angular removing their initial content).\n                // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n                //       will still fail to be detected by AngularJS v1.6+\n                $template.forEach(function (node) {\n                    if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                        node.nodeValue = '\\u200C';\n                    }\n                });\n            }\n            return attachChildrenFn;\n        };\n        UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n            var directiveRequire = this.getDirectiveRequire();\n            var requiredControllers = this.resolveRequire(directiveRequire);\n            if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n                var requiredControllersMap_1 = requiredControllers;\n                Object.keys(requiredControllersMap_1).forEach(function (key) {\n                    controllerInstance[key] = requiredControllersMap_1[key];\n                });\n            }\n            return requiredControllers;\n        };\n        UpgradeHelper.prototype.compileHtml = function (html) {\n            this.element.innerHTML = html;\n            return this.$compile(this.element.childNodes);\n        };\n        UpgradeHelper.prototype.extractChildNodes = function () {\n            var childNodes = [];\n            var childNode;\n            while (childNode = this.element.firstChild) {\n                this.element.removeChild(childNode);\n                childNodes.push(childNode);\n            }\n            return childNodes;\n        };\n        UpgradeHelper.prototype.getDirectiveRequire = function () {\n            var require = this.directive.require || (this.directive.controller && this.directive.name);\n            if (isMap(require)) {\n                Object.keys(require).forEach(function (key) {\n                    var value = require[key];\n                    var match = value.match(REQUIRE_PREFIX_RE);\n                    var name = value.substring(match[0].length);\n                    if (!name) {\n                        require[key] = match[0] + key;\n                    }\n                });\n            }\n            return require;\n        };\n        UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n            var _this = this;\n            if (!require) {\n                return null;\n            }\n            else if (Array.isArray(require)) {\n                return require.map(function (req) { return _this.resolveRequire(req); });\n            }\n            else if (typeof require === 'object') {\n                var value_1 = {};\n                Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(require[key]); });\n                return value_1;\n            }\n            else if (typeof require === 'string') {\n                var match = require.match(REQUIRE_PREFIX_RE);\n                var inheritType = match[1] || match[3];\n                var name_1 = require.substring(match[0].length);\n                var isOptional = !!match[2];\n                var searchParents = !!inheritType;\n                var startOnParent = inheritType === '^^';\n                var ctrlKey = controllerKey(name_1);\n                var elem = startOnParent ? this.$element.parent() : this.$element;\n                var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n                if (!value && !isOptional) {\n                    throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n                }\n                return value;\n            }\n            else {\n                throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n            }\n        };\n        return UpgradeHelper;\n    }());\n    function getOrCall(property) {\n        return isFunction(property) ? property() : property;\n    }\n    // NOTE: Only works for `typeof T !== 'object'`.\n    function isMap(value) {\n        return value && !Array.isArray(value) && typeof value === 'object';\n    }\n    function notSupported(name, feature) {\n        throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NOT_SUPPORTED = 'NOT_SUPPORTED';\n    var INITIAL_VALUE$1 = {\n        __UNINITIALIZED__: true\n    };\n    var Bindings = /** @class */ (function () {\n        function Bindings() {\n            this.twoWayBoundProperties = [];\n            this.twoWayBoundLastValues = [];\n            this.expressionBoundProperties = [];\n            this.propertyToOutputMap = {};\n        }\n        return Bindings;\n    }());\n    /**\n     * @description\n     *\n     * A helper class that allows an AngularJS component to be used from Angular.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation.*\n     *\n     * This helper class should be used as a base class for creating Angular directives\n     * that wrap AngularJS components that need to be \"upgraded\".\n     *\n     * @usageNotes\n     * ### Examples\n     *\n     * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n     * to be made available in Angular templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero\"}\n     *\n     * We must create a `Directive` that will make this AngularJS component\n     * available inside Angular templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\"}\n     *\n     * In this example you can see that we must derive from the `UpgradeComponent`\n     * base class but also provide an {@link Directive `@Directive`} decorator. This is\n     * because the AoT compiler requires that this information is statically available at\n     * compile time.\n     *\n     * Note that we must do the following:\n     * * specify the directive's selector (`ng1-hero`)\n     * * specify all inputs and outputs that the AngularJS component expects\n     * * derive from `UpgradeComponent`\n     * * call the base class from the constructor, passing\n     *   * the AngularJS name of the component (`ng1Hero`)\n     *   * the `ElementRef` and `Injector` for the component wrapper\n     *\n     * @publicApi\n     */\n    var UpgradeComponent = /** @class */ (function () {\n        /**\n         * Create a new `UpgradeComponent` instance. You should not normally need to do this.\n         * Instead you should derive a new class from this one and call the super constructor\n         * from the base class.\n         *\n         * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\" }\n         *\n         * * The `name` parameter should be the name of the AngularJS directive.\n         * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency\n         *   injection into the base class constructor.\n         */\n        function UpgradeComponent(name, elementRef, injector) {\n            this.name = name;\n            this.elementRef = elementRef;\n            this.injector = injector;\n            this.helper = new UpgradeHelper(injector, name, elementRef);\n            this.$injector = this.helper.$injector;\n            this.element = this.helper.element;\n            this.$element = this.helper.$element;\n            this.directive = this.helper.directive;\n            this.bindings = this.initializeBindings(this.directive);\n            // We ask for the AngularJS scope from the Angular injector, since\n            // we will put the new component scope onto the new injector for each component\n            var $parentScope = injector.get($SCOPE);\n            // QUESTION 1: Should we create an isolated scope if the scope is only true?\n            // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?\n            this.$componentScope = $parentScope.$new(!!this.directive.scope);\n            this.initializeOutputs();\n        }\n        UpgradeComponent.prototype.ngOnInit = function () {\n            var _this = this;\n            // Collect contents, insert and compile template\n            var attachChildNodes = this.helper.prepareTransclusion();\n            var linkFn = this.helper.compileTemplate();\n            // Instantiate controller\n            var controllerType = this.directive.controller;\n            var bindToController = this.directive.bindToController;\n            if (controllerType) {\n                this.controllerInstance = this.helper.buildController(controllerType, this.$componentScope);\n            }\n            else if (bindToController) {\n                throw new Error(\"Upgraded directive '\" + this.directive.name + \"' specifies 'bindToController' but no controller.\");\n            }\n            // Set up outputs\n            this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;\n            this.bindOutputs();\n            // Require other controllers\n            var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n            // Hook: $onChanges\n            if (this.pendingChanges) {\n                this.forwardChanges(this.pendingChanges);\n                this.pendingChanges = null;\n            }\n            // Hook: $onInit\n            if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n                this.controllerInstance.$onInit();\n            }\n            // Hook: $doCheck\n            if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n                var callDoCheck = function () { return _this.controllerInstance.$doCheck(); };\n                this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);\n                callDoCheck();\n            }\n            // Linking\n            var link = this.directive.link;\n            var preLink = (typeof link == 'object') && link.pre;\n            var postLink = (typeof link == 'object') ? link.post : link;\n            var attrs = NOT_SUPPORTED;\n            var transcludeFn = NOT_SUPPORTED;\n            if (preLink) {\n                preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            linkFn(this.$componentScope, null, { parentBoundTranscludeFn: attachChildNodes });\n            if (postLink) {\n                postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            // Hook: $postLink\n            if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n                this.controllerInstance.$postLink();\n            }\n        };\n        UpgradeComponent.prototype.ngOnChanges = function (changes) {\n            if (!this.bindingDestination) {\n                this.pendingChanges = changes;\n            }\n            else {\n                this.forwardChanges(changes);\n            }\n        };\n        UpgradeComponent.prototype.ngDoCheck = function () {\n            var _this = this;\n            var twoWayBoundProperties = this.bindings.twoWayBoundProperties;\n            var twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;\n            var propertyToOutputMap = this.bindings.propertyToOutputMap;\n            twoWayBoundProperties.forEach(function (propName, idx) {\n                var newValue = _this.bindingDestination[propName];\n                var oldValue = twoWayBoundLastValues[idx];\n                if (!core.ɵlooseIdentical(newValue, oldValue)) {\n                    var outputName = propertyToOutputMap[propName];\n                    var eventEmitter = _this[outputName];\n                    eventEmitter.emit(newValue);\n                    twoWayBoundLastValues[idx] = newValue;\n                }\n            });\n        };\n        UpgradeComponent.prototype.ngOnDestroy = function () {\n            if (isFunction(this.unregisterDoCheckWatcher)) {\n                this.unregisterDoCheckWatcher();\n            }\n            this.helper.onDestroy(this.$componentScope, this.controllerInstance);\n        };\n        UpgradeComponent.prototype.initializeBindings = function (directive) {\n            var _this = this;\n            var btcIsObject = typeof directive.bindToController === 'object';\n            if (btcIsObject && Object.keys(directive.scope).length) {\n                throw new Error(\"Binding definitions on scope and controller at the same time is not supported.\");\n            }\n            var context = (btcIsObject) ? directive.bindToController : directive.scope;\n            var bindings = new Bindings();\n            if (typeof context == 'object') {\n                Object.keys(context).forEach(function (propName) {\n                    var definition = context[propName];\n                    var bindingType = definition.charAt(0);\n                    // QUESTION: What about `=*`? Ignore? Throw? Support?\n                    switch (bindingType) {\n                        case '@':\n                        case '<':\n                            // We don't need to do anything special. They will be defined as inputs on the\n                            // upgraded component facade and the change propagation will be handled by\n                            // `ngOnChanges()`.\n                            break;\n                        case '=':\n                            bindings.twoWayBoundProperties.push(propName);\n                            bindings.twoWayBoundLastValues.push(INITIAL_VALUE$1);\n                            bindings.propertyToOutputMap[propName] = propName + 'Change';\n                            break;\n                        case '&':\n                            bindings.expressionBoundProperties.push(propName);\n                            bindings.propertyToOutputMap[propName] = propName;\n                            break;\n                        default:\n                            var json = JSON.stringify(context);\n                            throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                    }\n                });\n            }\n            return bindings;\n        };\n        UpgradeComponent.prototype.initializeOutputs = function () {\n            var _this = this;\n            // Initialize the outputs for `=` and `&` bindings\n            this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)\n                .forEach(function (propName) {\n                var outputName = _this.bindings.propertyToOutputMap[propName];\n                _this[outputName] = new core.EventEmitter();\n            });\n        };\n        UpgradeComponent.prototype.bindOutputs = function () {\n            var _this = this;\n            // Bind `&` bindings to the corresponding outputs\n            this.bindings.expressionBoundProperties.forEach(function (propName) {\n                var outputName = _this.bindings.propertyToOutputMap[propName];\n                var emitter = _this[outputName];\n                _this.bindingDestination[propName] = function (value) { return emitter.emit(value); };\n            });\n        };\n        UpgradeComponent.prototype.forwardChanges = function (changes) {\n            var _this = this;\n            // Forward input changes to `bindingDestination`\n            Object.keys(changes).forEach(function (propName) { return _this.bindingDestination[propName] = changes[propName].currentValue; });\n            if (isFunction(this.bindingDestination.$onChanges)) {\n                this.bindingDestination.$onChanges(changes);\n            }\n        };\n        return UpgradeComponent;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * An `NgModule`, which you import to provide AngularJS core services,\n     * and has an instance method used to bootstrap the hybrid upgrade application.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade/static)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * The `upgrade/static` package contains helpers that allow AngularJS and Angular components\n     * to be used together inside a hybrid upgrade application, which supports AoT compilation.\n     *\n     * Specifically, the classes and functions in the `upgrade/static` module allow the following:\n     *\n     * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so\n     *    that it can be used in an Angular template. See `UpgradeComponent`.\n     * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so\n     *    that it can be used in an AngularJS template. See `downgradeComponent`.\n     * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS\n     *    service so that it can be injected into an Angular context. See\n     *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.\n     * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable\n     *    so that it can be injected into an AngularJS context. See `downgradeInjectable`.\n     * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n     *    coexisting in a single application.\n     *\n     * @usageNotes\n     *\n     * ```ts\n     * import {UpgradeModule} from '@angular/upgrade/static';\n     * ```\n     *\n     * See also the {@link UpgradeModule#examples examples} below.\n     *\n     * ### Mental Model\n     *\n     * When reasoning about how a hybrid application works it is useful to have a mental model which\n     * describes what is happening and explains what is happening at the lowest level.\n     *\n     * 1. There are two independent frameworks running in a single application, each framework treats\n     *    the other as a black box.\n     * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n     *    instantiated the element is the owner. Each framework only updates/interacts with its own\n     *    DOM elements and ignores others.\n     * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of\n     *    where they are instantiated.\n     * 4. Angular components always execute inside the Angular framework codebase regardless of\n     *    where they are instantiated.\n     * 5. An AngularJS component can be \"upgraded\"\" to an Angular component. This is achieved by\n     *    defining an Angular directive, which bootstraps the AngularJS component at its location\n     *    in the DOM. See `UpgradeComponent`.\n     * 6. An Angular component can be \"downgraded\" to an AngularJS component. This is achieved by\n     *    defining an AngularJS directive, which bootstraps the Angular component at its location\n     *    in the DOM. See `downgradeComponent`.\n     * 7. Whenever an \"upgraded\"/\"downgraded\" component is instantiated the host element is owned by\n     *    the framework doing the instantiation. The other framework then instantiates and owns the\n     *    view for that component.\n     *    1. This implies that the component bindings will always follow the semantics of the\n     *       instantiation framework.\n     *    2. The DOM attributes are parsed by the framework that owns the current template. So\n     *       attributes in AngularJS templates must use kebab-case, while AngularJS templates must use\n     *       camelCase.\n     *    3. However the template binding syntax will always use the Angular style, e.g. square\n     *       brackets (`[...]`) for property binding.\n     * 8. Angular is bootstrapped first; AngularJS is bootstrapped second. AngularJS always owns the\n     *    root component of the application.\n     * 9. The new application is running in an Angular zone, and therefore it no longer needs calls to\n     *    `$apply()`.\n     *\n     * ### The `UpgradeModule` class\n     *\n     * This class is an `NgModule`, which you import to provide AngularJS core services,\n     * and has an instance method used to bootstrap the hybrid upgrade application.\n     *\n     * * Core AngularJS services\n     *   Importing this `NgModule` will add providers for the core\n     *   [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.\n     *\n     * * Bootstrap\n     *   The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}\n     *   method, which you use to bootstrap the top level AngularJS module onto an element in the\n     *   DOM for the hybrid upgrade app.\n     *\n     *   It also contains properties to access the {@link UpgradeModule#injector root injector}, the\n     *   bootstrap `NgZone` and the\n     *   [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).\n     *\n     * ### Examples\n     *\n     * Import the `UpgradeModule` into your top level {@link NgModule Angular `NgModule`}.\n     *\n     * {@example upgrade/static/ts/full/module.ts region='ng2-module'}\n     *\n     * Then inject `UpgradeModule` into your Angular `NgModule` and use it to bootstrap the top level\n     * [AngularJS module](https://docs.angularjs.org/api/ng/type/angular.Module) in the\n     * `ngDoBootstrap()` method.\n     *\n     * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng1'}\n     *\n     * Finally, kick off the whole process, by bootstraping your top level Angular `NgModule`.\n     *\n     * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng2'}\n     *\n     * {@a upgrading-an-angular-1-service}\n     * ### Upgrading an AngularJS service\n     *\n     * There is no specific API for upgrading an AngularJS service. Instead you should just follow the\n     * following recipe:\n     *\n     * Let's say you have an AngularJS service:\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-text-formatter-service\"}\n     *\n     * Then you should define an Angular provider to be included in your `NgModule` `providers`\n     * property.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"upgrade-ng1-service\"}\n     *\n     * Then you can use the \"upgraded\" AngularJS service by injecting it into an Angular component\n     * or service.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"use-ng1-upgraded-service\"}\n     *\n     * @publicApi\n     */\n    var UpgradeModule = /** @class */ (function () {\n        function UpgradeModule(\n        /** The root `Injector` for the upgrade application. */\n        injector, \n        /** The bootstrap zone for the upgrade application */\n        ngZone) {\n            this.ngZone = ngZone;\n            this.injector = new NgAdapterInjector(injector);\n        }\n        /**\n         * Bootstrap an AngularJS application from this NgModule\n         * @param element the element on which to bootstrap the AngularJS application\n         * @param [modules] the AngularJS modules to bootstrap for this application\n         * @param [config] optional extra AngularJS bootstrap configuration\n         */\n        UpgradeModule.prototype.bootstrap = function (element$$1, modules, config /*angular.IAngularBootstrapConfig*/) {\n            var _this = this;\n            if (modules === void 0) { modules = []; }\n            var INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';\n            // Create an ng1 module to bootstrap\n            var initModule = module$1(INIT_MODULE_NAME, [])\n                .constant(UPGRADE_APP_TYPE_KEY, 2 /* Static */)\n                .value(INJECTOR_KEY, this.injector)\n                .factory(LAZY_MODULE_REF, [INJECTOR_KEY, function (injector) { return ({ injector: injector }); }])\n                .config([\n                $PROVIDE, $INJECTOR,\n                function ($provide, $injector) {\n                    if ($injector.has($$TESTABILITY)) {\n                        $provide.decorator($$TESTABILITY, [\n                            $DELEGATE,\n                            function (testabilityDelegate) {\n                                var originalWhenStable = testabilityDelegate.whenStable;\n                                var injector = _this.injector;\n                                // Cannot use arrow function below because we need the context\n                                var newWhenStable = function (callback) {\n                                    originalWhenStable.call(testabilityDelegate, function () {\n                                        var ng2Testability = injector.get(core.Testability);\n                                        if (ng2Testability.isStable()) {\n                                            callback();\n                                        }\n                                        else {\n                                            ng2Testability.whenStable(newWhenStable.bind(testabilityDelegate, callback));\n                                        }\n                                    });\n                                };\n                                testabilityDelegate.whenStable = newWhenStable;\n                                return testabilityDelegate;\n                            }\n                        ]);\n                    }\n                    if ($injector.has($INTERVAL)) {\n                        $provide.decorator($INTERVAL, [\n                            $DELEGATE,\n                            function (intervalDelegate) {\n                                // Wrap the $interval service so that setInterval is called outside NgZone,\n                                // but the callback is still invoked within it. This is so that $interval\n                                // won't block stability, which preserves the behavior from AngularJS.\n                                var wrappedInterval = function (fn, delay, count, invokeApply) {\n                                    var pass = [];\n                                    for (var _i = 4; _i < arguments.length; _i++) {\n                                        pass[_i - 4] = arguments[_i];\n                                    }\n                                    return _this.ngZone.runOutsideAngular(function () {\n                                        return intervalDelegate.apply(void 0, __spread([function () {\n                                                var args = [];\n                                                for (var _i = 0; _i < arguments.length; _i++) {\n                                                    args[_i] = arguments[_i];\n                                                }\n                                                // Run callback in the next VM turn - $interval calls\n                                                // $rootScope.$apply, and running the callback in NgZone will\n                                                // cause a '$digest already in progress' error if it's in the\n                                                // same vm turn.\n                                                setTimeout(function () { _this.ngZone.run(function () { return fn.apply(void 0, __spread(args)); }); });\n                                            }, delay, count, invokeApply], pass));\n                                    });\n                                };\n                                wrappedInterval['cancel'] = intervalDelegate.cancel;\n                                return wrappedInterval;\n                            }\n                        ]);\n                    }\n                }\n            ])\n                .run([\n                $INJECTOR,\n                function ($injector) {\n                    _this.$injector = $injector;\n                    // Initialize the ng1 $injector provider\n                    setTempInjectorRef($injector);\n                    _this.injector.get($INJECTOR);\n                    // Put the injector on the DOM, so that it can be \"required\"\n                    element(element$$1).data(controllerKey(INJECTOR_KEY), _this.injector);\n                    // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles\n                    // We need to do this in the next tick so that we don't prevent the bootup\n                    // stabilizing\n                    setTimeout(function () {\n                        var $rootScope = $injector.get('$rootScope');\n                        var subscription = _this.ngZone.onMicrotaskEmpty.subscribe(function () { return $rootScope.$digest(); });\n                        $rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                    }, 0);\n                }\n            ]);\n            var upgradeModule = module$1(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));\n            // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n            var windowAngular = window['angular'];\n            windowAngular.resumeBootstrap = undefined;\n            // Bootstrap the AngularJS application inside our zone\n            this.ngZone.run(function () { bootstrap(element$$1, [upgradeModule.name], config); });\n            // Patch resumeBootstrap() to run inside the ngZone\n            if (windowAngular.resumeBootstrap) {\n                var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                var ngZone_1 = this.ngZone;\n                windowAngular.resumeBootstrap = function () {\n                    var _this = this;\n                    var args = arguments;\n                    windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                    return ngZone_1.run(function () { return windowAngular.resumeBootstrap.apply(_this, args); });\n                };\n            }\n        };\n        UpgradeModule = __decorate([\n            core.NgModule({ providers: [angular1Providers] }),\n            __metadata(\"design:paramtypes\", [core.Injector,\n                core.NgZone])\n        ], UpgradeModule);\n        return UpgradeModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only re-exports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_packages_upgrade_static_static_e = angular1Providers;\n    exports.ɵangular_packages_upgrade_static_static_c = compileFactory;\n    exports.ɵangular_packages_upgrade_static_static_a = injectorFactory;\n    exports.ɵangular_packages_upgrade_static_static_d = parseFactory;\n    exports.ɵangular_packages_upgrade_static_static_b = rootScopeFactory;\n    exports.getAngularJSGlobal = getAngularJSGlobal;\n    exports.getAngularLib = getAngularLib;\n    exports.setAngularJSGlobal = setAngularJSGlobal;\n    exports.setAngularLib = setAngularLib;\n    exports.downgradeComponent = downgradeComponent;\n    exports.downgradeInjectable = downgradeInjectable;\n    exports.VERSION = VERSION;\n    exports.downgradeModule = downgradeModule;\n    exports.UpgradeComponent = UpgradeComponent;\n    exports.UpgradeModule = UpgradeModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=upgrade-static.umd.js.map\n"]}
{"version":3,"sources":["packages/upgrade/upgrade-static.umd.js"],"names":["global","factory","exports","module","require","define","amd","ng","upgrade","static","core","platformBrowser","this","noNg","Error","angular","bootstrap","element","version","undefined","resumeBootstrap","getTestability","window","hasOwnProperty","e","setAngularJSGlobal","getAngularJSGlobal","module$1","prefix","dependencies","$COMPILE","$CONTROLLER","$INJECTOR","$SCOPE","INJECTOR_KEY","REQUIRE_INJECTOR","PropertyBinding","prop","attr","parseBinding","prototype","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","bindAttr","bindonAttr","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","controllerKey","name","getComponentName","component","overriddenName","toString","split","isFunction","value","_matches","INITIAL_VALUE","__UNINITIALIZED__","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$injector","$compile","$parse","componentFactory","wrapCallback","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compileContents","_this","compiledProjectableNodes","linkFns","groupProjectableNodes","map","nodes","empty","forEach","linkFn","clone","push","append","createComponent","projectableNodes","childInjector","Injector","create","providers","provide","useValue","parent","componentRef","viewChangeDetector","injector","get","ChangeDetectorRef","changeDetector","changeDetectorRef","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","hookupNgModel","supportsNgModel","writeValue","registerOnChange","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","setupInputs","needsNgZone","propagateDigest","inputs","_loop_1","i","prevValue","input","propName","templateName","expr","observeFn_1","currValue","strictEquals","val1","val2","updateInput","$observe","unwatch_1","this_1","$watch","watchFn","length","detectChanges","componentType","ngOnChanges","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","setupOutputs","outputs","j","output","substring","subscribeToOutput","isAssignment","getter","setter","assign","emitter","subscribe","next","v","$event","registerCleanup","destroyComponentRef","destroy","destroyed","on","$destroy","$on","unregisterApplication","getInjector","SimpleChange","groupNodesBySelector","ngContentSelectors","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","contents","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","call","tempInjectorRef","ParentInjectorPromise","injectorKey","callbacks","data","then","callback","resolve","VERSION","Version","setTempInjectorRef","injectorFactory","rootScopeFactory","compileFactory","parseFactory","angular1Providers","useFactory","deps","NgAdapterInjector","modInjector","token","notFoundValue","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","link","notSupported","replace","terminal","getTemplate","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","Promise","reject","$httpBackend","status","response","put","buildController","controllerType","$scope","controller","controllerAs","compileTemplate","compileHtml","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","attachChildrenFn","cloneAttachFn","$template","slots_1","Object","slotMap_1","filledSlots_1","keys","slotName","optional","directiveNormalize","_","letter","nodeName","toLowerCase","filter","cloneAttach","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","controllerInstance","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","isMap","requiredControllersMap_1","key","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","Array","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","inheritedData","property","feature","INITIAL_VALUE$1","Bindings","twoWayBoundProperties","twoWayBoundLastValues","expressionBoundProperties","propertyToOutputMap","UpgradeComponent","helper","bindings","initializeBindings","$parentScope","$componentScope","initializeOutputs","ngOnInit","attachChildNodes","bindingDestination","bindOutputs","pendingChanges","forwardChanges","$onInit","$doCheck","callDoCheck","unregisterDoCheckWatcher","$parent","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ngDoCheck","idx","newValue","ɵlooseIdentical","emit","ngOnDestroy","$onDestroy","btcIsObject","context","bindingType","json","JSON","stringify","concat","EventEmitter","currentValue","$onChanges","__read","o","n","m","Symbol","iterator","r","ar","done","error","__spread","arguments","UpgradeModule","ngZone","element$$1","modules","config","INIT_MODULE_NAME","UPGRADE_MODULE_NAME","upgradeModule","$provide","has","decorator","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","intervalDelegate","wrappedInterval","fn","delay","count","invokeApply","pass","_i","runOutsideAngular","apply","args","setTimeout","run","cancel","$rootScope","subscription","onMicrotaskEmpty","$digest","unsubscribe","windowAngular","originalResumeBootstrap_1","ngZone_1","decorators","type","NgModule","ctorParameters","NgZone","ɵangular_packages_upgrade_static_static_e","ɵangular_packages_upgrade_static_static_c","ɵangular_packages_upgrade_static_static_a","ɵangular_packages_upgrade_static_static_d","ɵangular_packages_upgrade_static_static_b","getAngularLib","setAngularLib","downgradeComponent","info","directiveFactory","cb","restrict","required","ranAsync","lazyModuleRef","promise","doDowngrade","ComponentFactoryResolver","resolveComponentFactory","injectorPromise","facade","$evalAsync","downgradeFn","isInAngularZone","isThenable","obj","downgradeInjectable","downgradeModule","moduleFactoryOrBootstrapFn","bootstrapFn","extraProviders","bootstrapModuleFactory","result","ref","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license Angular v6.1.6\n * (c) 2010-2018 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser')) :\n    typeof define === 'function' && define.amd ? define('@angular/upgrade/static', ['exports', '@angular/core', '@angular/platform-browser'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.upgrade = global.ng.upgrade || {}, global.ng.upgrade.static = {}),global.ng.core,global.ng.platformBrowser));\n}(this, (function (exports,core,platformBrowser) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noNg() {\n        throw new Error('AngularJS v1.x is not loaded!');\n    }\n    var angular = {\n        bootstrap: noNg,\n        module: noNg,\n        element: noNg,\n        version: undefined,\n        resumeBootstrap: noNg,\n        getTestability: noNg\n    };\n    try {\n        if (window.hasOwnProperty('angular')) {\n            angular = window.angular;\n        }\n    }\n    catch (e) {\n        // ignore in CJS mode.\n    }\n    /**\n     * @deprecated Use `setAngularJSGlobal` instead.\n     */\n    function setAngularLib(ng) {\n        setAngularJSGlobal(ng);\n    }\n    /**\n     * @deprecated Use `getAngularJSGlobal` instead.\n     */\n    function getAngularLib() {\n        return getAngularJSGlobal();\n    }\n    /**\n     * Resets the AngularJS global.\n     *\n     * Used when AngularJS is loaded lazily, and not available on `window`.\n     */\n    function setAngularJSGlobal(ng) {\n        angular = ng;\n        version = ng && ng.version;\n    }\n    /**\n     * Returns the current AngularJS global.\n     */\n    function getAngularJSGlobal() {\n        return angular;\n    }\n    var bootstrap = function (e, modules, config) {\n        return angular.bootstrap(e, modules, config);\n    };\n    var module$1 = function (prefix, dependencies) {\n        return angular.module(prefix, dependencies);\n    };\n    var element = function (e) { return angular.element(e); };\n    var version = angular.version;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var $COMPILE = '$compile';\n    var $CONTROLLER = '$controller';\n    var $DELEGATE = '$delegate';\n    var $HTTP_BACKEND = '$httpBackend';\n    var $INJECTOR = '$injector';\n    var $INTERVAL = '$interval';\n    var $PARSE = '$parse';\n    var $PROVIDE = '$provide';\n    var $SCOPE = '$scope';\n    var $TEMPLATE_CACHE = '$templateCache';\n    var $$TESTABILITY = '$$testability';\n    var INJECTOR_KEY = '$$angularInjector';\n    var LAZY_MODULE_REF = '$$angularLazyModuleRef';\n    var REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\n    var REQUIRE_NG_MODEL = '?ngModel';\n    var UPGRADE_MODULE_NAME = '$$UpgradeModule';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A `PropertyBinding` represents a mapping between a property name\n     * and an attribute name. It is parsed from a string of the form\n     * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n     * and attribute have the same identifier.\n     */\n    var PropertyBinding = /** @class */ (function () {\n        function PropertyBinding(prop, attr) {\n            this.prop = prop;\n            this.attr = attr;\n            this.parseBinding();\n        }\n        PropertyBinding.prototype.parseBinding = function () {\n            this.bracketAttr = \"[\" + this.attr + \"]\";\n            this.parenAttr = \"(\" + this.attr + \")\";\n            this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n            var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n            this.onAttr = \"on\" + capitalAttr;\n            this.bindAttr = \"bind\" + capitalAttr;\n            this.bindonAttr = \"bindon\" + capitalAttr;\n        };\n        return PropertyBinding;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\n    var DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n    function controllerKey(name) {\n        return '$' + name + 'Controller';\n    }\n    function directiveNormalize(name) {\n        return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n            .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n    }\n    function getComponentName(component) {\n        // Return the name of the component or the first line of its stringified version.\n        return component.overriddenName || component.name || component.toString().split('\\n')[0];\n    }\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n    /**\n     * @return Whether the passed-in component implements the subset of the\n     *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n     *     compatibility.\n     */\n    function supportsNgModel(component) {\n        return typeof component.writeValue === 'function' &&\n            typeof component.registerOnChange === 'function';\n    }\n    /**\n     * Glue the AngularJS `NgModelController` (if it exists) to the component\n     * (if it implements the needed subset of the `ControlValueAccessor` interface).\n     */\n    function hookupNgModel(ngModel, component) {\n        if (ngModel && supportsNgModel(component)) {\n            ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n            component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n            if (typeof component.registerOnTouched === 'function') {\n                component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n            }\n        }\n    }\n    /**\n     * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n     */\n    function strictEquals(val1, val2) {\n        return val1 === val2 || (val1 !== val1 && val2 !== val2);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var INITIAL_VALUE = {\n        __UNINITIALIZED__: true\n    };\n    var DowngradeComponentAdapter = /** @class */ (function () {\n        function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n            this.element = element;\n            this.attrs = attrs;\n            this.scope = scope;\n            this.ngModel = ngModel;\n            this.parentInjector = parentInjector;\n            this.$injector = $injector;\n            this.$compile = $compile;\n            this.$parse = $parse;\n            this.componentFactory = componentFactory;\n            this.wrapCallback = wrapCallback;\n            this.implementsOnChanges = false;\n            this.inputChangeCount = 0;\n            this.inputChanges = {};\n            this.componentScope = scope.$new();\n        }\n        DowngradeComponentAdapter.prototype.compileContents = function () {\n            var _this = this;\n            var compiledProjectableNodes = [];\n            var projectableNodes = this.groupProjectableNodes();\n            var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n            this.element.empty();\n            linkFns.forEach(function (linkFn) {\n                linkFn(_this.scope, function (clone) {\n                    compiledProjectableNodes.push(clone);\n                    _this.element.append(clone);\n                });\n            });\n            return compiledProjectableNodes;\n        };\n        DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n            var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n            var childInjector = core.Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n            this.componentRef =\n                this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n            this.viewChangeDetector = this.componentRef.injector.get(core.ChangeDetectorRef);\n            this.changeDetector = this.componentRef.changeDetectorRef;\n            this.component = this.componentRef.instance;\n            // testability hook is commonly added during component bootstrap in\n            // packages/core/src/application_ref.bootstrap()\n            // in downgraded application, component creation will take place here as well as adding the\n            // testability hook.\n            var testability = this.componentRef.injector.get(core.Testability, null);\n            if (testability) {\n                this.componentRef.injector.get(core.TestabilityRegistry)\n                    .registerApplication(this.componentRef.location.nativeElement, testability);\n            }\n            hookupNgModel(this.ngModel, this.component);\n        };\n        DowngradeComponentAdapter.prototype.setupInputs = function (needsNgZone, propagateDigest) {\n            var _this = this;\n            if (propagateDigest === void 0) { propagateDigest = true; }\n            var attrs = this.attrs;\n            var inputs = this.componentFactory.inputs || [];\n            var _loop_1 = function (i) {\n                var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n                var expr = null;\n                if (attrs.hasOwnProperty(input.attr)) {\n                    var observeFn_1 = (function (prop) {\n                        var prevValue = INITIAL_VALUE;\n                        return function (currValue) {\n                            // Initially, both `$observe()` and `$watch()` will call this function.\n                            if (!strictEquals(prevValue, currValue)) {\n                                if (prevValue === INITIAL_VALUE) {\n                                    prevValue = currValue;\n                                }\n                                _this.updateInput(prop, prevValue, currValue);\n                                prevValue = currValue;\n                            }\n                        };\n                    })(input.prop);\n                    attrs.$observe(input.attr, observeFn_1);\n                    // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                    // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                    // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                    var unwatch_1 = this_1.componentScope.$watch(function () {\n                        unwatch_1();\n                        unwatch_1 = null;\n                        observeFn_1(attrs[input.attr]);\n                    });\n                }\n                else if (attrs.hasOwnProperty(input.bindAttr)) {\n                    expr = attrs[input.bindAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                    expr = attrs[input.bracketAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                    expr = attrs[input.bindonAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                    expr = attrs[input.bracketParenAttr];\n                }\n                if (expr != null) {\n                    var watchFn = (function (prop) { return function (currValue, prevValue) {\n                        return _this.updateInput(prop, prevValue, currValue);\n                    }; })(input.prop);\n                    this_1.componentScope.$watch(expr, watchFn);\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < inputs.length; i++) {\n                _loop_1(i);\n            }\n            // Invoke `ngOnChanges()` and Change Detection (when necessary)\n            var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n            var prototype = this.componentFactory.componentType.prototype;\n            this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n            this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n                // Invoke `ngOnChanges()`\n                if (_this.implementsOnChanges) {\n                    var inputChanges = _this.inputChanges;\n                    _this.inputChanges = {};\n                    _this.component.ngOnChanges(inputChanges);\n                }\n                _this.viewChangeDetector.markForCheck();\n                // If opted out of propagating digests, invoke change detection when inputs change.\n                if (!propagateDigest) {\n                    detectChanges();\n                }\n            }));\n            // If not opted out of propagating digests, invoke change detection on every digest\n            if (propagateDigest) {\n                this.componentScope.$watch(this.wrapCallback(detectChanges));\n            }\n            // If necessary, attach the view so that it will be dirty-checked.\n            // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n            if (needsNgZone || !propagateDigest) {\n                var unwatch_2 = this.componentScope.$watch(function () {\n                    unwatch_2();\n                    unwatch_2 = null;\n                    var appRef = _this.parentInjector.get(core.ApplicationRef);\n                    appRef.attachView(_this.componentRef.hostView);\n                });\n            }\n        };\n        DowngradeComponentAdapter.prototype.setupOutputs = function () {\n            var attrs = this.attrs;\n            var outputs = this.componentFactory.outputs || [];\n            for (var j = 0; j < outputs.length; j++) {\n                var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n                var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n                var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n                // order below is important - first update bindings then evaluate expressions\n                if (attrs.hasOwnProperty(bindonAttr)) {\n                    this.subscribeToOutput(output, attrs[bindonAttr], true);\n                }\n                if (attrs.hasOwnProperty(bracketParenAttr)) {\n                    this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n                }\n                if (attrs.hasOwnProperty(output.onAttr)) {\n                    this.subscribeToOutput(output, attrs[output.onAttr]);\n                }\n                if (attrs.hasOwnProperty(output.parenAttr)) {\n                    this.subscribeToOutput(output, attrs[output.parenAttr]);\n                }\n            }\n        };\n        DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {\n            var _this = this;\n            if (isAssignment === void 0) { isAssignment = false; }\n            var getter = this.$parse(expr);\n            var setter = getter.assign;\n            if (isAssignment && !setter) {\n                throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n            }\n            var emitter = this.component[output.prop];\n            if (emitter) {\n                emitter.subscribe({\n                    next: isAssignment ? function (v) { return setter(_this.scope, v); } :\n                        function (v) { return getter(_this.scope, { '$event': v }); }\n                });\n            }\n            else {\n                throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getComponentName(this.componentFactory.componentType) + \"'!\");\n            }\n        };\n        DowngradeComponentAdapter.prototype.registerCleanup = function () {\n            var _this = this;\n            var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n            var destroyed = false;\n            this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });\n            this.componentScope.$on('$destroy', function () {\n                if (!destroyed) {\n                    destroyed = true;\n                    _this.componentRef.injector.get(core.TestabilityRegistry)\n                        .unregisterApplication(_this.componentRef.location.nativeElement);\n                    destroyComponentRef();\n                }\n            });\n        };\n        DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n        DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n            if (this.implementsOnChanges) {\n                this.inputChanges[prop] = new core.SimpleChange(prevValue, currValue, prevValue === currValue);\n            }\n            this.inputChangeCount++;\n            this.component[prop] = currValue;\n        };\n        DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n            var ngContentSelectors = this.componentFactory.ngContentSelectors;\n            return groupNodesBySelector(ngContentSelectors, this.element.contents());\n        };\n        return DowngradeComponentAdapter;\n    }());\n    /**\n     * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n     */\n    function groupNodesBySelector(ngContentSelectors, nodes) {\n        var projectableNodes = [];\n        for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n            projectableNodes[i] = [];\n        }\n        for (var j = 0, jj = nodes.length; j < jj; ++j) {\n            var node = nodes[j];\n            var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n            if (ngContentIndex != null) {\n                projectableNodes[ngContentIndex].push(node);\n            }\n        }\n        return projectableNodes;\n    }\n    function findMatchingNgContentIndex(element, ngContentSelectors) {\n        var ngContentIndices = [];\n        var wildcardNgContentIndex = -1;\n        for (var i = 0; i < ngContentSelectors.length; i++) {\n            var selector = ngContentSelectors[i];\n            if (selector === '*') {\n                wildcardNgContentIndex = i;\n            }\n            else {\n                if (matchesSelector(element, selector)) {\n                    ngContentIndices.push(i);\n                }\n            }\n        }\n        ngContentIndices.sort();\n        if (wildcardNgContentIndex !== -1) {\n            ngContentIndices.push(wildcardNgContentIndex);\n        }\n        return ngContentIndices.length ? ngContentIndices[0] : null;\n    }\n    var _matches;\n    function matchesSelector(el, selector) {\n        if (!_matches) {\n            var elProto = Element.prototype;\n            _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n                elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n        }\n        return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function that allows an Angular component to be used from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function to be used for registering\n     * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n     *\n     * ### Examples\n     *\n     * Let's assume that you have an Angular component called `ng2Heroes` that needs\n     * to be made available in AngularJS templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n     *\n     * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n     * that will make this Angular component available inside AngularJS templates.\n     * The `downgradeComponent()` function returns a factory function that we\n     * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n     *\n     * @param info contains information about the Component that is being downgraded:\n     *\n     * * `component: Type<any>`: The type of the Component that will be downgraded\n     * * `propagateDigest?: boolean`: Whether to perform {@link ChangeDetectorRef#detectChanges\n     *   change detection} on the component on every\n     *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n     *   change detection will still be performed when any of the component's inputs changes.\n     *   (Default: true)\n     *\n     * @returns a factory function that can be used to register the component in an\n     * AngularJS module.\n     *\n     * @experimental\n     */\n    function downgradeComponent(info) {\n        var directiveFactory = function ($compile, $injector, $parse) {\n            // When using `UpgradeModule`, we don't need to ensure callbacks to Angular APIs (e.g. change\n            // detection) are run inside the Angular zone, because `$digest()` will be run inside the zone\n            // (except if explicitly escaped, in which case we shouldn't force it back in).\n            // When using `downgradeModule()` though, we need to ensure such callbacks are run inside the\n            // Angular zone.\n            var needsNgZone = false;\n            var wrapCallback = function (cb) { return cb; };\n            var ngZone;\n            return {\n                restrict: 'E',\n                terminal: true,\n                require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n                link: function (scope, element, attrs, required) {\n                    // We might have to compile the contents asynchronously, because this might have been\n                    // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                    // been compiled.\n                    var ngModel = required[1];\n                    var parentInjector = required[0];\n                    var ranAsync = false;\n                    if (!parentInjector) {\n                        var lazyModuleRef = $injector.get(LAZY_MODULE_REF);\n                        needsNgZone = lazyModuleRef.needsNgZone;\n                        parentInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                    }\n                    var doDowngrade = function (injector) {\n                        var componentFactoryResolver = injector.get(core.ComponentFactoryResolver);\n                        var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);\n                        if (!componentFactory) {\n                            throw new Error('Expecting ComponentFactory for: ' + getComponentName(info.component));\n                        }\n                        var injectorPromise = new ParentInjectorPromise(element);\n                        var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                        var projectableNodes = facade.compileContents();\n                        facade.createComponent(projectableNodes);\n                        facade.setupInputs(needsNgZone, info.propagateDigest);\n                        facade.setupOutputs();\n                        facade.registerCleanup();\n                        injectorPromise.resolve(facade.getInjector());\n                        if (ranAsync) {\n                            // If this is run async, it is possible that it is not run inside a\n                            // digest and initial input values will not be detected.\n                            scope.$evalAsync(function () { });\n                        }\n                    };\n                    var downgradeFn = !needsNgZone ? doDowngrade : function (injector) {\n                        if (!ngZone) {\n                            ngZone = injector.get(core.NgZone);\n                            wrapCallback = function (cb) { return function () {\n                                return core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb);\n                            }; };\n                        }\n                        wrapCallback(function () { return doDowngrade(injector); })();\n                    };\n                    if (isThenable(parentInjector)) {\n                        parentInjector.then(downgradeFn);\n                    }\n                    else {\n                        downgradeFn(parentInjector);\n                    }\n                    ranAsync = true;\n                }\n            };\n        };\n        // bracket-notation because of closure - see #14441\n        directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n        return directiveFactory;\n    }\n    /**\n     * Synchronous promise-like object to wrap parent injectors,\n     * to preserve the synchronous nature of Angular 1's $compile.\n     */\n    var ParentInjectorPromise = /** @class */ (function () {\n        function ParentInjectorPromise(element) {\n            this.element = element;\n            this.injectorKey = controllerKey(INJECTOR_KEY);\n            this.callbacks = [];\n            // Store the promise on the element.\n            element.data(this.injectorKey, this);\n        }\n        ParentInjectorPromise.prototype.then = function (callback) {\n            if (this.injector) {\n                callback(this.injector);\n            }\n            else {\n                this.callbacks.push(callback);\n            }\n        };\n        ParentInjectorPromise.prototype.resolve = function (injector) {\n            this.injector = injector;\n            // Store the real injector on the element.\n            this.element.data(this.injectorKey, injector);\n            // Release the element to prevent memory leaks.\n            this.element = null;\n            // Run the queued callbacks.\n            this.callbacks.forEach(function (callback) { return callback(injector); });\n            this.callbacks.length = 0;\n        };\n        return ParentInjectorPromise;\n    }());\n    function isThenable(obj) {\n        return isFunction(obj.then);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function to allow an Angular service to be accessible from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function that provides access to the Angular\n     * service identified by the `token` parameter.\n     *\n     * ### Examples\n     *\n     * First ensure that the service to be downgraded is provided in an `NgModule`\n     * that will be part of the upgrade application. For example, let's assume we have\n     * defined `HeroesService`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n     *\n     * and that we have included this in our upgrade app `NgModule`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n     *\n     * Now we can register the `downgradeInjectable` factory function for the service\n     * on an AngularJS module.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n     *\n     * Inside an AngularJS component's controller we can get hold of the\n     * downgraded service via the name we gave when downgrading.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n     *\n     * @param token an `InjectionToken` that identifies a service provided from Angular.\n     *\n     * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n     * used to register the service on an AngularJS module.\n     *\n     * @experimental\n     */\n    function downgradeInjectable(token) {\n        var factory = function (i) { return i.get(token); };\n        factory['$inject'] = [INJECTOR_KEY];\n        return factory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var VERSION = new core.Version('6.1.6');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // We have to do a little dance to get the ng1 injector into the module injector.\n    // We store the ng1 injector so that the provider in the module injector can access it\n    // Then we \"get\" the ng1 injector from the module injector, which triggers the provider to read\n    // the stored injector and release the reference to it.\n    var tempInjectorRef;\n    function setTempInjectorRef(injector) {\n        tempInjectorRef = injector;\n    }\n    function injectorFactory() {\n        if (!tempInjectorRef) {\n            throw new Error('Trying to get the AngularJS injector before it being set.');\n        }\n        var injector = tempInjectorRef;\n        tempInjectorRef = null; // clear the value to prevent memory leaks\n        return injector;\n    }\n    function rootScopeFactory(i) {\n        return i.get('$rootScope');\n    }\n    function compileFactory(i) {\n        return i.get('$compile');\n    }\n    function parseFactory(i) {\n        return i.get('$parse');\n    }\n    var angular1Providers = [\n        // We must use exported named functions for the ng2 factories to keep the compiler happy:\n        // > Metadata collected contains an error that will be reported at runtime:\n        // >   Function calls are not supported.\n        // >   Consider replacing the function or lambda with a reference to an exported function\n        { provide: '$injector', useFactory: injectorFactory, deps: [] },\n        { provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector'] },\n        { provide: '$compile', useFactory: compileFactory, deps: ['$injector'] },\n        { provide: '$parse', useFactory: parseFactory, deps: ['$injector'] }\n    ];\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NgAdapterInjector = /** @class */ (function () {\n        function NgAdapterInjector(modInjector) {\n            this.modInjector = modInjector;\n        }\n        // When Angular locate a service in the component injector tree, the not found value is set to\n        // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module\n        // injector.\n        // AngularJS only supports a single tree and should always check the module injector.\n        NgAdapterInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === core.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                return notFoundValue;\n            }\n            return this.modInjector.get(token, notFoundValue);\n        };\n        return NgAdapterInjector;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function for creating an AngularJS module that can bootstrap an Angular module\n     * \"on-demand\" (possibly lazily) when a {@link downgradeComponent downgraded component} needs to be\n     * instantiated.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade/static) library for hybrid upgrade apps that\n     * support AoT compilation.*\n     *\n     * It allows loading/bootstrapping the Angular part of a hybrid application lazily and not having to\n     * pay the cost up-front. For example, you can have an AngularJS application that uses Angular for\n     * specific routes and only instantiate the Angular modules if/when the user visits one of these\n     * routes.\n     *\n     * The Angular module will be bootstrapped once (when requested for the first time) and the same\n     * reference will be used from that point onwards.\n     *\n     * `downgradeModule()` requires either an `NgModuleFactory` or a function:\n     * - `NgModuleFactory`: If you pass an `NgModuleFactory`, it will be used to instantiate a module\n     *   using `platformBrowser`'s {@link PlatformRef#bootstrapModuleFactory bootstrapModuleFactory()}.\n     * - `Function`: If you pass a function, it is expected to return a promise resolving to an\n     *   `NgModuleRef`. The function is called with an array of extra {@link StaticProvider Providers}\n     *   that are expected to be available from the returned `NgModuleRef`'s `Injector`.\n     *\n     * `downgradeModule()` returns the name of the created AngularJS wrapper module. You can use it to\n     * declare a dependency in your main AngularJS module.\n     *\n     * {@example upgrade/static/ts/lite/module.ts region=\"basic-how-to\"}\n     *\n     * For more details on how to use `downgradeModule()` see\n     * [Upgrading for Performance](guide/upgrade-performance).\n     *\n     * @usageNotes\n     *\n     * Apart from `UpgradeModule`, you can use the rest of the `upgrade/static` helpers as usual to\n     * build a hybrid application. Note that the Angular pieces (e.g. downgraded services) will not be\n     * available until the downgraded module has been bootstrapped, i.e. by instantiating a downgraded\n     * component.\n     *\n     * <div class=\"alert is-important\">\n     *\n     *   You cannot use `downgradeModule()` and `UpgradeModule` in the same hybrid application.<br />\n     *   Use one or the other.\n     *\n     * </div>\n     *\n     * ### Differences with `UpgradeModule`\n     *\n     * Besides their different API, there are two important internal differences between\n     * `downgradeModule()` and `UpgradeModule` that affect the behavior of hybrid applications:\n     *\n     * 1. Unlike `UpgradeModule`, `downgradeModule()` does not bootstrap the main AngularJS module\n     *    inside the {@link NgZone Angular zone}.\n     * 2. Unlike `UpgradeModule`, `downgradeModule()` does not automatically run a\n     *    [$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest) when changes are\n     *    detected in the Angular part of the application.\n     *\n     * What this means is that applications using `UpgradeModule` will run change detection more\n     * frequently in order to ensure that both frameworks are properly notified about possible changes.\n     * This will inevitably result in more change detection runs than necessary.\n     *\n     * `downgradeModule()`, on the other side, does not try to tie the two change detection systems as\n     * tightly, restricting the explicit change detection runs only to cases where it knows it is\n     * necessary (e.g. when the inputs of a downgraded component change). This improves performance,\n     * especially in change-detection-heavy applications, but leaves it up to the developer to manually\n     * notify each framework as needed.\n     *\n     * For a more detailed discussion of the differences and their implications, see\n     * [Upgrading for Performance](guide/upgrade-performance).\n     *\n     * <div class=\"alert is-helpful\">\n     *\n     *   You can manually trigger a change detection run in AngularJS using\n     *   [scope.$apply(...)](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply) or\n     *   [$rootScope.$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest).\n     *\n     *   You can manually trigger a change detection run in Angular using {@link NgZone#run\n     *   ngZone.run(...)}.\n     *\n     * </div>\n     *\n     * @experimental\n     */\n    function downgradeModule(moduleFactoryOrBootstrapFn) {\n        var LAZY_MODULE_NAME = UPGRADE_MODULE_NAME + '.lazy';\n        var bootstrapFn = isFunction(moduleFactoryOrBootstrapFn) ?\n            moduleFactoryOrBootstrapFn :\n            function (extraProviders) {\n                return platformBrowser.platformBrowser(extraProviders).bootstrapModuleFactory(moduleFactoryOrBootstrapFn);\n            };\n        var injector;\n        // Create an ng1 module to bootstrap.\n        module$1(LAZY_MODULE_NAME, [])\n            .factory(INJECTOR_KEY, function () {\n            if (!injector) {\n                throw new Error('Trying to get the Angular injector before bootstrapping an Angular module.');\n            }\n            return injector;\n        })\n            .factory(LAZY_MODULE_REF, [\n            $INJECTOR,\n            function ($injector) {\n                setTempInjectorRef($injector);\n                var result = {\n                    needsNgZone: true,\n                    promise: bootstrapFn(angular1Providers).then(function (ref) {\n                        injector = result.injector = new NgAdapterInjector(ref.injector);\n                        injector.get($INJECTOR);\n                        return injector;\n                    })\n                };\n                return result;\n            }\n        ]);\n        return LAZY_MODULE_NAME;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Constants\n    var REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n    // Classes\n    var UpgradeHelper = /** @class */ (function () {\n        function UpgradeHelper(injector, name, elementRef, directive) {\n            this.injector = injector;\n            this.name = name;\n            this.$injector = injector.get($INJECTOR);\n            this.$compile = this.$injector.get($COMPILE);\n            this.$controller = this.$injector.get($CONTROLLER);\n            this.element = elementRef.nativeElement;\n            this.$element = element(this.element);\n            this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n        }\n        UpgradeHelper.getDirective = function ($injector, name) {\n            var directives = $injector.get(name + 'Directive');\n            if (directives.length > 1) {\n                throw new Error(\"Only support single directive definition for: \" + name);\n            }\n            var directive = directives[0];\n            // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n            // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n            if (directive.compile && !directive.link)\n                notSupported(name, 'compile');\n            if (directive.replace)\n                notSupported(name, 'replace');\n            if (directive.terminal)\n                notSupported(name, 'terminal');\n            return directive;\n        };\n        UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate) {\n            if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n            if (directive.template !== undefined) {\n                return getOrCall(directive.template);\n            }\n            else if (directive.templateUrl) {\n                var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n                var url_1 = getOrCall(directive.templateUrl);\n                var template = $templateCache_1.get(url_1);\n                if (template !== undefined) {\n                    return template;\n                }\n                else if (!fetchRemoteTemplate) {\n                    throw new Error('loading directive templates asynchronously is not supported');\n                }\n                return new Promise(function (resolve, reject) {\n                    var $httpBackend = $injector.get($HTTP_BACKEND);\n                    $httpBackend('GET', url_1, null, function (status, response) {\n                        if (status === 200) {\n                            resolve($templateCache_1.put(url_1, response));\n                        }\n                        else {\n                            reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                        }\n                    });\n                });\n            }\n            else {\n                throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n            }\n        };\n        UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n            // TODO: Document that we do not pre-assign bindings on the controller instance.\n            // Quoted properties below so that this code can be optimized with Closure Compiler.\n            var locals = { '$scope': $scope, '$element': this.$element };\n            var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n            this.$element.data(controllerKey(this.directive.name), controller);\n            return controller;\n        };\n        UpgradeHelper.prototype.compileTemplate = function (template) {\n            if (template === undefined) {\n                template = UpgradeHelper.getTemplate(this.$injector, this.directive);\n            }\n            return this.compileHtml(template);\n        };\n        UpgradeHelper.prototype.prepareTransclusion = function () {\n            var _this = this;\n            var transclude = this.directive.transclude;\n            var contentChildNodes = this.extractChildNodes();\n            var attachChildrenFn = function (scope, cloneAttachFn) {\n                // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n                // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n                // there will be no transclusion scope here.\n                // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n                scope = scope || { $destroy: function () { return undefined; } };\n                return cloneAttachFn($template, scope);\n            };\n            var $template = contentChildNodes;\n            if (transclude) {\n                var slots_1 = Object.create(null);\n                if (typeof transclude === 'object') {\n                    $template = [];\n                    var slotMap_1 = Object.create(null);\n                    var filledSlots_1 = Object.create(null);\n                    // Parse the element selectors.\n                    Object.keys(transclude).forEach(function (slotName) {\n                        var selector = transclude[slotName];\n                        var optional = selector.charAt(0) === '?';\n                        selector = optional ? selector.substring(1) : selector;\n                        slotMap_1[selector] = slotName;\n                        slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                        filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                    });\n                    // Add the matching elements into their slot.\n                    contentChildNodes.forEach(function (node) {\n                        var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                        if (slotName) {\n                            filledSlots_1[slotName] = true;\n                            slots_1[slotName] = slots_1[slotName] || [];\n                            slots_1[slotName].push(node);\n                        }\n                        else {\n                            $template.push(node);\n                        }\n                    });\n                    // Check for required slots that were not filled.\n                    Object.keys(filledSlots_1).forEach(function (slotName) {\n                        if (!filledSlots_1[slotName]) {\n                            throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                        }\n                    });\n                    Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                        var nodes = slots_1[slotName];\n                        slots_1[slotName] = function (scope, cloneAttach) {\n                            return cloneAttach(nodes, scope);\n                        };\n                    });\n                }\n                // Attach `$$slots` to default slot transclude fn.\n                attachChildrenFn.$$slots = slots_1;\n                // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n                // removes all text content after the first interpolation and updates it later, after\n                // evaluating the expressions. This would result in AngularJS failing to recognize text\n                // nodes that start with an interpolation as transcluded content and use the fallback\n                // content instead.\n                // To avoid this issue, we add a\n                // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n                // to empty text nodes (which can only be a result of Angular removing their initial content).\n                // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n                //       will still fail to be detected by AngularJS v1.6+\n                $template.forEach(function (node) {\n                    if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                        node.nodeValue = '\\u200C';\n                    }\n                });\n            }\n            return attachChildrenFn;\n        };\n        UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n            var directiveRequire = this.getDirectiveRequire();\n            var requiredControllers = this.resolveRequire(directiveRequire);\n            if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n                var requiredControllersMap_1 = requiredControllers;\n                Object.keys(requiredControllersMap_1).forEach(function (key) {\n                    controllerInstance[key] = requiredControllersMap_1[key];\n                });\n            }\n            return requiredControllers;\n        };\n        UpgradeHelper.prototype.compileHtml = function (html) {\n            this.element.innerHTML = html;\n            return this.$compile(this.element.childNodes);\n        };\n        UpgradeHelper.prototype.extractChildNodes = function () {\n            var childNodes = [];\n            var childNode;\n            while (childNode = this.element.firstChild) {\n                this.element.removeChild(childNode);\n                childNodes.push(childNode);\n            }\n            return childNodes;\n        };\n        UpgradeHelper.prototype.getDirectiveRequire = function () {\n            var require = this.directive.require || (this.directive.controller && this.directive.name);\n            if (isMap(require)) {\n                Object.keys(require).forEach(function (key) {\n                    var value = require[key];\n                    var match = value.match(REQUIRE_PREFIX_RE);\n                    var name = value.substring(match[0].length);\n                    if (!name) {\n                        require[key] = match[0] + key;\n                    }\n                });\n            }\n            return require;\n        };\n        UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n            var _this = this;\n            if (!require) {\n                return null;\n            }\n            else if (Array.isArray(require)) {\n                return require.map(function (req) { return _this.resolveRequire(req); });\n            }\n            else if (typeof require === 'object') {\n                var value_1 = {};\n                Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(require[key]); });\n                return value_1;\n            }\n            else if (typeof require === 'string') {\n                var match = require.match(REQUIRE_PREFIX_RE);\n                var inheritType = match[1] || match[3];\n                var name_1 = require.substring(match[0].length);\n                var isOptional = !!match[2];\n                var searchParents = !!inheritType;\n                var startOnParent = inheritType === '^^';\n                var ctrlKey = controllerKey(name_1);\n                var elem = startOnParent ? this.$element.parent() : this.$element;\n                var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n                if (!value && !isOptional) {\n                    throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n                }\n                return value;\n            }\n            else {\n                throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n            }\n        };\n        return UpgradeHelper;\n    }());\n    function getOrCall(property) {\n        return isFunction(property) ? property() : property;\n    }\n    // NOTE: Only works for `typeof T !== 'object'`.\n    function isMap(value) {\n        return value && !Array.isArray(value) && typeof value === 'object';\n    }\n    function notSupported(name, feature) {\n        throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NOT_SUPPORTED = 'NOT_SUPPORTED';\n    var INITIAL_VALUE$1 = {\n        __UNINITIALIZED__: true\n    };\n    var Bindings = /** @class */ (function () {\n        function Bindings() {\n            this.twoWayBoundProperties = [];\n            this.twoWayBoundLastValues = [];\n            this.expressionBoundProperties = [];\n            this.propertyToOutputMap = {};\n        }\n        return Bindings;\n    }());\n    /**\n     * @description\n     *\n     * A helper class that allows an AngularJS component to be used from Angular.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper class should be used as a base class for creating Angular directives\n     * that wrap AngularJS components that need to be \"upgraded\".\n     *\n     * ### Examples\n     *\n     * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n     * to be made available in Angular templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero\"}\n     *\n     * We must create a `Directive` that will make this AngularJS component\n     * available inside Angular templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\"}\n     *\n     * In this example you can see that we must derive from the `UpgradeComponent`\n     * base class but also provide an {@link Directive `@Directive`} decorator. This is\n     * because the AoT compiler requires that this information is statically available at\n     * compile time.\n     *\n     * Note that we must do the following:\n     * * specify the directive's selector (`ng1-hero`)\n     * * specify all inputs and outputs that the AngularJS component expects\n     * * derive from `UpgradeComponent`\n     * * call the base class from the constructor, passing\n     *   * the AngularJS name of the component (`ng1Hero`)\n     *   * the `ElementRef` and `Injector` for the component wrapper\n     *\n     * @experimental\n     */\n    var UpgradeComponent = /** @class */ (function () {\n        /**\n         * Create a new `UpgradeComponent` instance. You should not normally need to do this.\n         * Instead you should derive a new class from this one and call the super constructor\n         * from the base class.\n         *\n         * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\" }\n         *\n         * * The `name` parameter should be the name of the AngularJS directive.\n         * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency\n         *   injection into the base class constructor.\n         */\n        function UpgradeComponent(name, elementRef, injector) {\n            this.name = name;\n            this.elementRef = elementRef;\n            this.injector = injector;\n            this.helper = new UpgradeHelper(injector, name, elementRef);\n            this.$injector = this.helper.$injector;\n            this.element = this.helper.element;\n            this.$element = this.helper.$element;\n            this.directive = this.helper.directive;\n            this.bindings = this.initializeBindings(this.directive);\n            // We ask for the AngularJS scope from the Angular injector, since\n            // we will put the new component scope onto the new injector for each component\n            var $parentScope = injector.get($SCOPE);\n            // QUESTION 1: Should we create an isolated scope if the scope is only true?\n            // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?\n            this.$componentScope = $parentScope.$new(!!this.directive.scope);\n            this.initializeOutputs();\n        }\n        UpgradeComponent.prototype.ngOnInit = function () {\n            var _this = this;\n            // Collect contents, insert and compile template\n            var attachChildNodes = this.helper.prepareTransclusion();\n            var linkFn = this.helper.compileTemplate();\n            // Instantiate controller\n            var controllerType = this.directive.controller;\n            var bindToController = this.directive.bindToController;\n            if (controllerType) {\n                this.controllerInstance = this.helper.buildController(controllerType, this.$componentScope);\n            }\n            else if (bindToController) {\n                throw new Error(\"Upgraded directive '\" + this.directive.name + \"' specifies 'bindToController' but no controller.\");\n            }\n            // Set up outputs\n            this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;\n            this.bindOutputs();\n            // Require other controllers\n            var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n            // Hook: $onChanges\n            if (this.pendingChanges) {\n                this.forwardChanges(this.pendingChanges);\n                this.pendingChanges = null;\n            }\n            // Hook: $onInit\n            if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n                this.controllerInstance.$onInit();\n            }\n            // Hook: $doCheck\n            if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n                var callDoCheck = function () { return _this.controllerInstance.$doCheck(); };\n                this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);\n                callDoCheck();\n            }\n            // Linking\n            var link = this.directive.link;\n            var preLink = (typeof link == 'object') && link.pre;\n            var postLink = (typeof link == 'object') ? link.post : link;\n            var attrs = NOT_SUPPORTED;\n            var transcludeFn = NOT_SUPPORTED;\n            if (preLink) {\n                preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            linkFn(this.$componentScope, null, { parentBoundTranscludeFn: attachChildNodes });\n            if (postLink) {\n                postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            // Hook: $postLink\n            if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n                this.controllerInstance.$postLink();\n            }\n        };\n        UpgradeComponent.prototype.ngOnChanges = function (changes) {\n            if (!this.bindingDestination) {\n                this.pendingChanges = changes;\n            }\n            else {\n                this.forwardChanges(changes);\n            }\n        };\n        UpgradeComponent.prototype.ngDoCheck = function () {\n            var _this = this;\n            var twoWayBoundProperties = this.bindings.twoWayBoundProperties;\n            var twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;\n            var propertyToOutputMap = this.bindings.propertyToOutputMap;\n            twoWayBoundProperties.forEach(function (propName, idx) {\n                var newValue = _this.bindingDestination[propName];\n                var oldValue = twoWayBoundLastValues[idx];\n                if (!core.ɵlooseIdentical(newValue, oldValue)) {\n                    var outputName = propertyToOutputMap[propName];\n                    var eventEmitter = _this[outputName];\n                    eventEmitter.emit(newValue);\n                    twoWayBoundLastValues[idx] = newValue;\n                }\n            });\n        };\n        UpgradeComponent.prototype.ngOnDestroy = function () {\n            if (isFunction(this.unregisterDoCheckWatcher)) {\n                this.unregisterDoCheckWatcher();\n            }\n            if (this.controllerInstance && isFunction(this.controllerInstance.$onDestroy)) {\n                this.controllerInstance.$onDestroy();\n            }\n            this.$componentScope.$destroy();\n        };\n        UpgradeComponent.prototype.initializeBindings = function (directive) {\n            var _this = this;\n            var btcIsObject = typeof directive.bindToController === 'object';\n            if (btcIsObject && Object.keys(directive.scope).length) {\n                throw new Error(\"Binding definitions on scope and controller at the same time is not supported.\");\n            }\n            var context = (btcIsObject) ? directive.bindToController : directive.scope;\n            var bindings = new Bindings();\n            if (typeof context == 'object') {\n                Object.keys(context).forEach(function (propName) {\n                    var definition = context[propName];\n                    var bindingType = definition.charAt(0);\n                    // QUESTION: What about `=*`? Ignore? Throw? Support?\n                    switch (bindingType) {\n                        case '@':\n                        case '<':\n                            // We don't need to do anything special. They will be defined as inputs on the\n                            // upgraded component facade and the change propagation will be handled by\n                            // `ngOnChanges()`.\n                            break;\n                        case '=':\n                            bindings.twoWayBoundProperties.push(propName);\n                            bindings.twoWayBoundLastValues.push(INITIAL_VALUE$1);\n                            bindings.propertyToOutputMap[propName] = propName + 'Change';\n                            break;\n                        case '&':\n                            bindings.expressionBoundProperties.push(propName);\n                            bindings.propertyToOutputMap[propName] = propName;\n                            break;\n                        default:\n                            var json = JSON.stringify(context);\n                            throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                    }\n                });\n            }\n            return bindings;\n        };\n        UpgradeComponent.prototype.initializeOutputs = function () {\n            var _this = this;\n            // Initialize the outputs for `=` and `&` bindings\n            this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)\n                .forEach(function (propName) {\n                var outputName = _this.bindings.propertyToOutputMap[propName];\n                _this[outputName] = new core.EventEmitter();\n            });\n        };\n        UpgradeComponent.prototype.bindOutputs = function () {\n            var _this = this;\n            // Bind `&` bindings to the corresponding outputs\n            this.bindings.expressionBoundProperties.forEach(function (propName) {\n                var outputName = _this.bindings.propertyToOutputMap[propName];\n                var emitter = _this[outputName];\n                _this.bindingDestination[propName] = function (value) { return emitter.emit(value); };\n            });\n        };\n        UpgradeComponent.prototype.forwardChanges = function (changes) {\n            var _this = this;\n            // Forward input changes to `bindingDestination`\n            Object.keys(changes).forEach(function (propName) { return _this.bindingDestination[propName] = changes[propName].currentValue; });\n            if (isFunction(this.bindingDestination.$onChanges)) {\n                this.bindingDestination.$onChanges(changes);\n            }\n        };\n        return UpgradeComponent;\n    }());\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * An `NgModule`, which you import to provide AngularJS core services,\n     * and has an instance method used to bootstrap the hybrid upgrade application.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade/static)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * The `upgrade/static` package contains helpers that allow AngularJS and Angular components\n     * to be used together inside a hybrid upgrade application, which supports AoT compilation.\n     *\n     * Specifically, the classes and functions in the `upgrade/static` module allow the following:\n     *\n     * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so\n     *    that it can be used in an Angular template. See `UpgradeComponent`.\n     * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so\n     *    that it can be used in an AngularJS template. See `downgradeComponent`.\n     * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS\n     *    service so that it can be injected into an Angular context. See\n     *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.\n     * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable\n     *    so that it can be injected into an AngularJS context. See `downgradeInjectable`.\n     * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n     *    coexisting in a single application.\n     *\n     * @usageNotes\n     *\n     * ```ts\n     * import {UpgradeModule} from '@angular/upgrade/static';\n     * ```\n     *\n     * See also the {@link UpgradeModule#examples examples} below.\n     *\n     * ### Mental Model\n     *\n     * When reasoning about how a hybrid application works it is useful to have a mental model which\n     * describes what is happening and explains what is happening at the lowest level.\n     *\n     * 1. There are two independent frameworks running in a single application, each framework treats\n     *    the other as a black box.\n     * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n     *    instantiated the element is the owner. Each framework only updates/interacts with its own\n     *    DOM elements and ignores others.\n     * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of\n     *    where they are instantiated.\n     * 4. Angular components always execute inside the Angular framework codebase regardless of\n     *    where they are instantiated.\n     * 5. An AngularJS component can be \"upgraded\"\" to an Angular component. This is achieved by\n     *    defining an Angular directive, which bootstraps the AngularJS component at its location\n     *    in the DOM. See `UpgradeComponent`.\n     * 6. An Angular component can be \"downgraded\" to an AngularJS component. This is achieved by\n     *    defining an AngularJS directive, which bootstraps the Angular component at its location\n     *    in the DOM. See `downgradeComponent`.\n     * 7. Whenever an \"upgraded\"/\"downgraded\" component is instantiated the host element is owned by\n     *    the framework doing the instantiation. The other framework then instantiates and owns the\n     *    view for that component.\n     *    1. This implies that the component bindings will always follow the semantics of the\n     *       instantiation framework.\n     *    2. The DOM attributes are parsed by the framework that owns the current template. So\n     *       attributes in AngularJS templates must use kebab-case, while AngularJS templates must use\n     *       camelCase.\n     *    3. However the template binding syntax will always use the Angular style, e.g. square\n     *       brackets (`[...]`) for property binding.\n     * 8. Angular is bootstrapped first; AngularJS is bootstrapped second. AngularJS always owns the\n     *    root component of the application.\n     * 9. The new application is running in an Angular zone, and therefore it no longer needs calls to\n     *    `$apply()`.\n     *\n     * ### The `UpgradeModule` class\n     *\n     * This class is an `NgModule`, which you import to provide AngularJS core services,\n     * and has an instance method used to bootstrap the hybrid upgrade application.\n     *\n     * #### Core AngularJS services\n     * Importing this `NgModule` will add providers for the core\n     * [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.\n     *\n     * #### Bootstrap\n     * The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}\n     * method, which you use to bootstrap the top level AngularJS module onto an element in the\n     * DOM for the hybrid upgrade app.\n     *\n     * It also contains properties to access the {@link UpgradeModule#injector root injector}, the\n     * bootstrap `NgZone` and the\n     * [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).\n     *\n     * ### Examples\n     *\n     * Import the `UpgradeModule` into your top level {@link NgModule Angular `NgModule`}.\n     *\n     * {@example upgrade/static/ts/full/module.ts region='ng2-module'}\n     *\n     * Then inject `UpgradeModule` into your Angular `NgModule` and use it to bootstrap the top level\n     * [AngularJS module](https://docs.angularjs.org/api/ng/type/angular.Module) in the\n     * `ngDoBootstrap()` method.\n     *\n     * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng1'}\n     *\n     * Finally, kick off the whole process, by bootstraping your top level Angular `NgModule`.\n     *\n     * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng2'}\n     *\n     * {@a upgrading-an-angular-1-service}\n     * ### Upgrading an AngularJS service\n     *\n     * There is no specific API for upgrading an AngularJS service. Instead you should just follow the\n     * following recipe:\n     *\n     * Let's say you have an AngularJS service:\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-text-formatter-service\"}\n     *\n     * Then you should define an Angular provider to be included in your `NgModule` `providers`\n     * property.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"upgrade-ng1-service\"}\n     *\n     * Then you can use the \"upgraded\" AngularJS service by injecting it into an Angular component\n     * or service.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"use-ng1-upgraded-service\"}\n     *\n     * @experimental\n     */\n    var UpgradeModule = /** @class */ (function () {\n        function UpgradeModule(\n        /** The root `Injector` for the upgrade application. */\n        injector, \n        /** The bootstrap zone for the upgrade application */\n        ngZone) {\n            this.ngZone = ngZone;\n            this.injector = new NgAdapterInjector(injector);\n        }\n        /**\n         * Bootstrap an AngularJS application from this NgModule\n         * @param element the element on which to bootstrap the AngularJS application\n         * @param [modules] the AngularJS modules to bootstrap for this application\n         * @param [config] optional extra AngularJS bootstrap configuration\n         */\n        UpgradeModule.prototype.bootstrap = function (element$$1, modules, config /*angular.IAngularBootstrapConfig*/) {\n            var _this = this;\n            if (modules === void 0) { modules = []; }\n            var INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';\n            // Create an ng1 module to bootstrap\n            var initModule = module$1(INIT_MODULE_NAME, [])\n                .value(INJECTOR_KEY, this.injector)\n                .factory(LAZY_MODULE_REF, [\n                INJECTOR_KEY,\n                function (injector) { return ({ injector: injector, needsNgZone: false }); }\n            ])\n                .config([\n                $PROVIDE, $INJECTOR,\n                function ($provide, $injector) {\n                    if ($injector.has($$TESTABILITY)) {\n                        $provide.decorator($$TESTABILITY, [\n                            $DELEGATE,\n                            function (testabilityDelegate) {\n                                var originalWhenStable = testabilityDelegate.whenStable;\n                                var injector = _this.injector;\n                                // Cannot use arrow function below because we need the context\n                                var newWhenStable = function (callback) {\n                                    originalWhenStable.call(testabilityDelegate, function () {\n                                        var ng2Testability = injector.get(core.Testability);\n                                        if (ng2Testability.isStable()) {\n                                            callback();\n                                        }\n                                        else {\n                                            ng2Testability.whenStable(newWhenStable.bind(testabilityDelegate, callback));\n                                        }\n                                    });\n                                };\n                                testabilityDelegate.whenStable = newWhenStable;\n                                return testabilityDelegate;\n                            }\n                        ]);\n                    }\n                    if ($injector.has($INTERVAL)) {\n                        $provide.decorator($INTERVAL, [\n                            $DELEGATE,\n                            function (intervalDelegate) {\n                                // Wrap the $interval service so that setInterval is called outside NgZone,\n                                // but the callback is still invoked within it. This is so that $interval\n                                // won't block stability, which preserves the behavior from AngularJS.\n                                var wrappedInterval = function (fn, delay, count, invokeApply) {\n                                    var pass = [];\n                                    for (var _i = 4; _i < arguments.length; _i++) {\n                                        pass[_i - 4] = arguments[_i];\n                                    }\n                                    return _this.ngZone.runOutsideAngular(function () {\n                                        return intervalDelegate.apply(void 0, __spread([function () {\n                                                var args = [];\n                                                for (var _i = 0; _i < arguments.length; _i++) {\n                                                    args[_i] = arguments[_i];\n                                                }\n                                                // Run callback in the next VM turn - $interval calls\n                                                // $rootScope.$apply, and running the callback in NgZone will\n                                                // cause a '$digest already in progress' error if it's in the\n                                                // same vm turn.\n                                                setTimeout(function () { _this.ngZone.run(function () { return fn.apply(void 0, __spread(args)); }); });\n                                            }, delay, count, invokeApply], pass));\n                                    });\n                                };\n                                wrappedInterval['cancel'] = intervalDelegate.cancel;\n                                return wrappedInterval;\n                            }\n                        ]);\n                    }\n                }\n            ])\n                .run([\n                $INJECTOR,\n                function ($injector) {\n                    _this.$injector = $injector;\n                    // Initialize the ng1 $injector provider\n                    setTempInjectorRef($injector);\n                    _this.injector.get($INJECTOR);\n                    // Put the injector on the DOM, so that it can be \"required\"\n                    element(element$$1).data(controllerKey(INJECTOR_KEY), _this.injector);\n                    // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles\n                    // We need to do this in the next tick so that we don't prevent the bootup\n                    // stabilizing\n                    setTimeout(function () {\n                        var $rootScope = $injector.get('$rootScope');\n                        var subscription = _this.ngZone.onMicrotaskEmpty.subscribe(function () { return $rootScope.$digest(); });\n                        $rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                    }, 0);\n                }\n            ]);\n            var upgradeModule = module$1(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));\n            // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n            var windowAngular = window['angular'];\n            windowAngular.resumeBootstrap = undefined;\n            // Bootstrap the AngularJS application inside our zone\n            this.ngZone.run(function () { bootstrap(element$$1, [upgradeModule.name], config); });\n            // Patch resumeBootstrap() to run inside the ngZone\n            if (windowAngular.resumeBootstrap) {\n                var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                var ngZone_1 = this.ngZone;\n                windowAngular.resumeBootstrap = function () {\n                    var _this = this;\n                    var args = arguments;\n                    windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                    return ngZone_1.run(function () { return windowAngular.resumeBootstrap.apply(_this, args); });\n                };\n            }\n        };\n        UpgradeModule.decorators = [\n            { type: core.NgModule, args: [{ providers: [angular1Providers] },] }\n        ];\n        /** @nocollapse */\n        UpgradeModule.ctorParameters = function () { return [\n            { type: core.Injector },\n            { type: core.NgZone }\n        ]; };\n        return UpgradeModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only re-exports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_packages_upgrade_static_static_e = angular1Providers;\n    exports.ɵangular_packages_upgrade_static_static_c = compileFactory;\n    exports.ɵangular_packages_upgrade_static_static_a = injectorFactory;\n    exports.ɵangular_packages_upgrade_static_static_d = parseFactory;\n    exports.ɵangular_packages_upgrade_static_static_b = rootScopeFactory;\n    exports.getAngularJSGlobal = getAngularJSGlobal;\n    exports.getAngularLib = getAngularLib;\n    exports.setAngularJSGlobal = setAngularJSGlobal;\n    exports.setAngularLib = setAngularLib;\n    exports.downgradeComponent = downgradeComponent;\n    exports.downgradeInjectable = downgradeInjectable;\n    exports.VERSION = VERSION;\n    exports.downgradeModule = downgradeModule;\n    exports.UpgradeComponent = UpgradeComponent;\n    exports.UpgradeModule = UpgradeModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=upgrade-static.umd.js.map\n"]}
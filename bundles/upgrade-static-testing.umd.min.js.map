{"version":3,"sources":["packages/upgrade/upgrade-static-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","upgrade","static","testing","core","this","__metadata","metadataKey","metadataValue","Reflect","metadata","noNg","Error","noNgElement","cleanData","angular","bootstrap","element","injector","version","undefined","resumeBootstrap","getTestability","window","hasOwnProperty","_a","injector$1","module_","prefix","dependencies","$injector","$injectorFactory","AngularTestingModule","__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","decorate","i","defineProperty","NgModule","providers","provide","useFactory","Injector","ɵangular_packages_upgrade_static_testing_testing_a","ɵangular_packages_upgrade_static_testing_testing_d","ɵangular_packages_upgrade_static_testing_testing_b","createAngularTestingModule","angularJSModules","strictDi","constant","modules","createAngularJSTestingModule","angularModules","TestBed","configureTestingModule","imports","useValue","get","name","value"],"mappings":"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","sourcesContent":["/**\n * @license Angular v8.1.0+1.sha-dcf9c13.with-local-changes\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/core/testing')) :\n    typeof define === 'function' && define.amd ? define('@angular/upgrade/static/testing', ['exports', '@angular/core', '@angular/core/testing'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.upgrade = global.ng.upgrade || {}, global.ng.upgrade.static = global.ng.upgrade.static || {}, global.ng.upgrade.static.testing = {}), global.ng.core, global.ng.core.testing));\n}(this, function (exports, core, testing) { 'use strict';\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noNg() {\n        throw new Error('AngularJS v1.x is not loaded!');\n    }\n    var noNgElement = (function () { return noNg(); });\n    noNgElement.cleanData = noNg;\n    var angular = {\n        bootstrap: noNg,\n        module: noNg,\n        element: noNgElement,\n        injector: noNg,\n        version: undefined,\n        resumeBootstrap: noNg,\n        getTestability: noNg\n    };\n    try {\n        if (window.hasOwnProperty('angular')) {\n            angular = window.angular;\n        }\n    }\n    catch (_a) {\n        // ignore in CJS mode.\n    }\n    // Do not declare as `module` to avoid webpack bug\n    // (see https://github.com/angular/angular/issues/30050).\n    var module_ = function (prefix, dependencies) {\n        return angular.module(prefix, dependencies);\n    };\n    var injector = function (modules, strictDi) { return angular.injector(modules, strictDi); };\n    var version = angular.version;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var $INJECTOR = '$injector';\n    var INJECTOR_KEY = '$$angularInjector';\n    var UPGRADE_APP_TYPE_KEY = '$$angularUpgradeAppType';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var $injector = null;\n    var injector$1;\n    function $injectorFactory() {\n        return $injector;\n    }\n    var AngularTestingModule = /** @class */ (function () {\n        function AngularTestingModule(i) {\n            injector$1 = i;\n        }\n        AngularTestingModule = __decorate([\n            core.NgModule({ providers: [{ provide: $INJECTOR, useFactory: $injectorFactory }] }),\n            __metadata(\"design:paramtypes\", [core.Injector])\n        ], AngularTestingModule);\n        return AngularTestingModule;\n    }());\n    /**\n     * A helper function to use when unit testing Angular services that depend upon upgraded AngularJS\n     * services.\n     *\n     * This function returns an `NgModule` decorated class that is configured to wire up the Angular\n     * and AngularJS injectors without the need to actually bootstrap a hybrid application.\n     * This makes it simpler and faster to unit test services.\n     *\n     * Use the returned class as an \"import\" when configuring the `TestBed`.\n     *\n     * In the following code snippet, we are configuring the TestBed with two imports.\n     * The `Ng2AppModule` is the Angular part of our hybrid application and the `ng1AppModule` is the\n     * AngularJS part.\n     *\n     * <code-example path=\"upgrade/static/ts/full/module.spec.ts\" region=\"angular-setup\"></code-example>\n     *\n     * Once this is done we can get hold of services via the Angular `Injector` as normal.\n     * Services that are (or have dependencies on) an upgraded AngularJS service, will be instantiated\n     * as needed by the AngularJS `$injector`.\n     *\n     * In the following code snippet, `HeroesService` is an Angular service that depends upon an\n     * AngularJS service, `titleCase`.\n     *\n     * <code-example path=\"upgrade/static/ts/full/module.spec.ts\" region=\"angular-spec\"></code-example>\n     *\n     * <div class=\"alert is-important\">\n     *\n     * This helper is for testing services not Components.\n     * For Component testing you must still bootstrap a hybrid app. See `UpgradeModule` or\n     * `downgradeModule` for more information.\n     *\n     * </div>\n     *\n     * <div class=\"alert is-important\">\n     *\n     * The resulting configuration does not wire up AngularJS digests to Zone hooks. It is the\n     * responsibility of the test writer to call `$rootScope.$apply`, as necessary, to trigger\n     * AngularJS handlers of async events from Angular.\n     *\n     * </div>\n     *\n     * <div class=\"alert is-important\">\n     *\n     * The helper sets up global variables to hold the shared Angular and AngularJS injectors.\n     *\n     * * Only call this helper once per spec.\n     * * Do not use `createAngularTestingModule` in the same spec as `createAngularJSTestingModule`.\n     *\n     * </div>\n     *\n     * Here is the example application and its unit tests that use `createAngularTestingModule`\n     * and `createAngularJSTestingModule`.\n     *\n     * <code-tabs>\n     *  <code-pane header=\"module.spec.ts\" path=\"upgrade/static/ts/full/module.spec.ts\"></code-pane>\n     *  <code-pane header=\"module.ts\" path=\"upgrade/static/ts/full/module.ts\"></code-pane>\n     * </code-tabs>\n     *\n     *\n     * @param angularJSModules a collection of the names of AngularJS modules to include in the\n     * configuration.\n     * @param [strictDi] whether the AngularJS injector should have `strictDI` enabled.\n     *\n     * @publicApi\n     */\n    function createAngularTestingModule(angularJSModules, strictDi) {\n        module_('$$angularJSTestingModule', angularJSModules)\n            .constant(UPGRADE_APP_TYPE_KEY, 2 /* Static */)\n            .factory(INJECTOR_KEY, function () { return injector$1; });\n        $injector = injector(['ng', '$$angularJSTestingModule'], strictDi);\n        return AngularTestingModule;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A helper function to use when unit testing AngularJS services that depend upon downgraded Angular\n     * services.\n     *\n     * This function returns an AngularJS module that is configured to wire up the AngularJS and Angular\n     * injectors without the need to actually bootstrap a hybrid application.\n     * This makes it simpler and faster to unit test services.\n     *\n     * Use the returned AngularJS module in a call to\n     * [`angular.mocks.module`](https://docs.angularjs.org/api/ngMock/function/angular.mock.module) to\n     * include this module in the unit test injector.\n     *\n     * In the following code snippet, we are configuring the `$injector` with two modules:\n     * The AngularJS `ng1AppModule`, which is the AngularJS part of our hybrid application and the\n     * `Ng2AppModule`, which is the Angular part.\n     *\n     * <code-example path=\"upgrade/static/ts/full/module.spec.ts\"\n     * region=\"angularjs-setup\"></code-example>\n     *\n     * Once this is done we can get hold of services via the AngularJS `$injector` as normal.\n     * Services that are (or have dependencies on) a downgraded Angular service, will be instantiated as\n     * needed by the Angular root `Injector`.\n     *\n     * In the following code snippet, `heroesService` is a downgraded Angular service that we are\n     * accessing from AngularJS.\n     *\n     * <code-example path=\"upgrade/static/ts/full/module.spec.ts\"\n     * region=\"angularjs-spec\"></code-example>\n     *\n     * <div class=\"alert is-important\">\n     *\n     * This helper is for testing services not components.\n     * For Component testing you must still bootstrap a hybrid app. See `UpgradeModule` or\n     * `downgradeModule` for more information.\n     *\n     * </div>\n     *\n     * <div class=\"alert is-important\">\n     *\n     * The resulting configuration does not wire up AngularJS digests to Zone hooks. It is the\n     * responsibility of the test writer to call `$rootScope.$apply`, as necessary, to trigger\n     * AngularJS handlers of async events from Angular.\n     *\n     * </div>\n     *\n     * <div class=\"alert is-important\">\n     *\n     * The helper sets up global variables to hold the shared Angular and AngularJS injectors.\n     *\n     * * Only call this helper once per spec.\n     * * Do not use `createAngularJSTestingModule` in the same spec as `createAngularTestingModule`.\n     *\n     * </div>\n     *\n     * Here is the example application and its unit tests that use `createAngularTestingModule`\n     * and `createAngularJSTestingModule`.\n     *\n     * <code-tabs>\n     *  <code-pane header=\"module.spec.ts\" path=\"upgrade/static/ts/full/module.spec.ts\"></code-pane>\n     *  <code-pane header=\"module.ts\" path=\"upgrade/static/ts/full/module.ts\"></code-pane>\n     * </code-tabs>\n     *\n     *\n     * @param angularModules a collection of Angular modules to include in the configuration.\n     *\n     * @publicApi\n     */\n    function createAngularJSTestingModule(angularModules) {\n        return module_('$$angularJSTestingModule', [])\n            .constant(UPGRADE_APP_TYPE_KEY, 2 /* Static */)\n            .factory(INJECTOR_KEY, [\n            $INJECTOR,\n            function ($injector) {\n                testing.TestBed.configureTestingModule({\n                    imports: angularModules,\n                    providers: [{ provide: $INJECTOR, useValue: $injector }]\n                });\n                return testing.TestBed.get(core.Injector);\n            }\n        ])\n            .name;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_packages_upgrade_static_testing_testing_a = module_;\n    exports.ɵangular_packages_upgrade_static_testing_testing_d = INJECTOR_KEY;\n    exports.ɵangular_packages_upgrade_static_testing_testing_b = UPGRADE_APP_TYPE_KEY;\n    exports.createAngularTestingModule = createAngularTestingModule;\n    exports.createAngularJSTestingModule = createAngularJSTestingModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=upgrade-static-testing.umd.js.map\n"]}